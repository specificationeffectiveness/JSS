package comparators;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        comparators.Composite composite18 = composite9.addUTF8("Placeholder(100)");
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.util.RandomAccess[] randomAccessArray29 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray30 = composite28.toArray(randomAccessArray29);
        comparators.Composite composite32 = composite28.addUTF8("UTF-8");
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream46 = null;
        composite43.byteStream = byteArrayOutputStream46;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        comparators.Composite composite63 = composite57.addBool(true);
        java.util.Iterator<java.lang.Object> objItor64 = composite57.iterator();
        int int65 = composite43.compareTo(composite57);
        byte[] byteArray66 = composite57.bytes;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator67 = composite18.new CompositeTypeIterator(composite28, 455, byteArray66);
        java.util.Iterator<java.lang.Object> objItor68 = composite18.iterator();
        comparators.Composite composite70 = composite18.addBool(false);
        java.util.stream.Stream<java.lang.Object> objStream71 = composite70.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite70.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(objItor64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objItor68);
        org.junit.Assert.assertNotNull(composite70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        composite9.startOffset = 4;
        java.util.UUID uUID25 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite26 = composite9.addTimeUUID(uUID25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        comparators.hector.CompositeListSerializer compositeListSerializer16 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator22 = compositeType17.indexComparator;
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator28 = compositeType17.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType23);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.lang.String str34 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.List<java.util.List<java.lang.Object>> objListList35 = compositeListSerializer16.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList31);
        comparators.CompositeType compositeType36 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType36.indexComparator;
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType36.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType38);
        java.lang.Object[] objArray40 = new java.lang.Object[] { compositeListSerializer16, compositeType38 };
        java.lang.Object[][] objArray41 = new java.lang.Object[][] { objArray40 };
        java.lang.Object[][] objArray42 = composite0.toArray(objArray41);
        comparators.Composite composite44 = composite0.addLong((long) 3);
        comparators.Composite composite46 = composite0.addAscii("Placeholder(58)");
        comparators.Composite composite48 = composite46.addBool(false);
        comparators.Composite composite50 = composite48.addLong(0L);
        java.lang.String str51 = composite48.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(indexInfoComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteBufferComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objListList35);
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "3,Placeholder(58),false,0" + "'", str51, "3,Placeholder(58),false,0");
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        java.util.logging.Logger logger14 = comparators.CompositeType.logger;
        boolean boolean15 = composite13.contains((java.lang.Object) logger14);
        java.io.ByteArrayOutputStream byteArrayOutputStream16 = composite13.byteStream;
        comparators.Composite composite18 = composite13.addLong((long) 43);
        comparators.CompositeType compositeType19 = new comparators.CompositeType();
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite44.startOffset;
        int int50 = composite30.compareTo(composite44);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        comparators.Composite composite57 = composite30.addBytes(byteArray55);
        java.nio.ByteBuffer byteBuffer58 = composite57.serializeToByteBuffer();
        compositeType20.validate(byteBuffer58);
        boolean boolean60 = comparators.Composite.validate(byteBuffer58);
        comparators.Composite composite61 = new comparators.Composite(byteBuffer58);
        java.nio.ByteBuffer byteBuffer62 = null;
        int int63 = compositeType19.compare(byteBuffer58, byteBuffer62);
        comparators.Composite composite64 = new comparators.Composite(byteBuffer58);
        comparators.Composite composite65 = new comparators.Composite(byteBuffer58);
        comparators.Composite composite66 = new comparators.Composite(byteBuffer58);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray71);
        byte[] byteArray74 = comparators.Composite.serialize(objList73);
        java.util.stream.Stream<java.lang.Object> objStream75 = objList73.parallelStream();
        comparators.Composite composite76 = new comparators.Composite(objList73);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        boolean boolean85 = comparators.Composite.validate((int) ' ', byteArray82, true);
        boolean boolean86 = composite76.contains((java.lang.Object) boolean85);
        java.util.stream.Stream<java.lang.Object> objStream87 = composite76.parallelStream();
        composite76.startOffset = 8;
        comparators.Composite composite91 = composite76.addAscii("hi!");
        boolean boolean92 = composite66.containsAll((java.util.Collection<java.lang.Object>) composite91);
        boolean boolean93 = composite18.addAll((java.util.Collection<java.lang.Object>) composite66);
        java.io.DataOutputStream dataOutputStream94 = composite18.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(logger14);
        org.junit.Assert.assertEquals(logger14.getName(), "comparators.CompositeType");
        org.junit.Assert.assertNull("logger14.getResourceBundleName() == null", logger14.getResourceBundleName());
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(byteArrayOutputStream16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objStream87);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dataOutputStream94);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.size();
        java.util.Spliterator<java.lang.Object> objSpliterator41 = composite9.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream42 = composite9.byteStream;
        composite9.clear();
        composite9.clear();
        java.lang.Object[] objArray45 = composite9.toArray();
        boolean boolean46 = comparators.Composite.isValidType((java.lang.Object) objArray45);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objSpliterator41);
        org.junit.Assert.assertNull(byteArrayOutputStream42);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        java.io.DataOutputStream dataOutputStream21 = composite9.out;
        java.lang.String str22 = composite9.toString();
        java.util.Iterator<java.lang.Object> objItor23 = composite9.iterator();
        comparators.Composite composite25 = composite9.addUTF8("Placeholder(0)");
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.util.Iterator<java.lang.Object> objItor42 = composite35.iterator();
        comparators.Composite composite43 = new comparators.Composite();
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        int int55 = composite53.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream56 = composite53.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream57 = composite53.parallelStream();
        int int58 = composite43.compareTo(composite53);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        boolean boolean77 = comparators.Composite.validate((int) ' ', byteArray74, true);
        boolean boolean78 = composite68.contains((java.lang.Object) boolean77);
        java.util.stream.Stream<java.lang.Object> objStream79 = composite68.parallelStream();
        boolean boolean80 = composite43.contains((java.lang.Object) composite68);
        boolean boolean81 = composite35.addAll((java.util.Collection<java.lang.Object>) composite43);
        int int82 = composite43.startOffset;
        comparators.Composite composite84 = composite43.addAscii("hi!");
        java.io.DataOutputStream dataOutputStream85 = composite84.out;
        composite25.out = dataOutputStream85;
        int int87 = composite25.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(dataOutputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objItor23);
        org.junit.Assert.assertNotNull(composite25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(objItor42);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(dataOutputStream85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        int int14 = composite9.startOffset;
        composite9.startOffset = (byte) 10;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addLong((long) 67);
        byte[] byteArray38 = composite37.serialize();
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray38);
        int int40 = comparators.Composite.compare(byteArray21, byteArray38);
        comparators.hector.CompositeSerializer compositeSerializer41 = new comparators.hector.CompositeSerializer();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        comparators.Composite composite57 = composite51.addBool(true);
        java.io.DataOutputStream dataOutputStream58 = composite51.out;
        byte[] byteArray59 = compositeSerializer41.toBytes(composite51);
        int int60 = comparators.Composite.compare(byteArray38, byteArray59);
        composite9.bytes = byteArray38;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite9.stream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(dataOutputStream58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objStream62);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = null;
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        int int49 = comparators.Composite.compare(byteArray40, byteArray47);
        int int50 = comparators.Composite.compare((int) (byte) 1, byteArray35, 10, byteArray40);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        int int63 = comparators.Composite.compare(byteArray54, byteArray61);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray61);
        int int65 = comparators.Composite.compare(byteArray40, byteArray61);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray61);
        boolean boolean68 = comparators.Composite.validate((int) (byte) 10, byteArray61, true);
        java.util.List<java.lang.Object> objList69 = compositeListSerializer0.fromBytes(byteArray61);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.util.RandomAccess[] randomAccessArray80 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray81 = composite79.toArray(randomAccessArray80);
        comparators.Composite composite83 = composite79.addLong((long) 67);
        comparators.Composite composite85 = composite83.addBool(true);
        comparators.Composite composite87 = composite83.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer88 = composite83.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList89 = comparators.Composite.deserialize(byteBuffer88);
        java.util.List<java.lang.Object> objList90 = compositeListSerializer0.fromByteBuffer(byteBuffer88);
        java.util.List<java.nio.ByteBuffer> byteBufferList91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.Object>> objListList92 = compositeListSerializer0.fromBytesList(byteBufferList91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(objList89);
        org.junit.Assert.assertNotNull(objList90);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        java.util.stream.Stream<java.lang.Object> objStream55 = composite9.parallelStream();
        comparators.Composite composite57 = composite9.addUTF8("UTF-8");
        comparators.Composite composite59 = composite57.addLong((-1L));
        java.util.stream.Stream<java.lang.Object> objStream60 = composite59.parallelStream();
        java.lang.Object[] objArray61 = composite59.toArray();
        java.nio.ByteBuffer byteBuffer62 = composite59.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(composite59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[UTF-8, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[UTF-8, -1]");
        org.junit.Assert.assertNotNull(byteBuffer62);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        composite57.startOffset = 8;
        comparators.Composite composite72 = composite57.addAscii("hi!");
        boolean boolean73 = composite47.containsAll((java.util.Collection<java.lang.Object>) composite72);
        comparators.Composite composite75 = composite72.addReal((java.lang.Double) 10.0d);
        java.util.UUID uUID76 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite77 = composite72.addTimeUUID(uUID76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(composite72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(composite75);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        int int26 = composite25.size();
        boolean boolean27 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        boolean boolean46 = comparators.Composite.validate((int) ' ', byteArray43, true);
        boolean boolean47 = composite37.contains((java.lang.Object) boolean46);
        java.util.stream.Stream<java.lang.Object> objStream48 = composite37.parallelStream();
        boolean boolean49 = composite37.isEmpty();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        boolean boolean63 = composite37.containsAll((java.util.Collection<java.lang.Object>) composite59);
        comparators.Composite composite65 = composite37.addLong((long) (short) 1);
        int int66 = comparators.Composite.compare(composite9, composite65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray71);
        byte[] byteArray74 = comparators.Composite.serialize(objList73);
        java.util.stream.Stream<java.lang.Object> objStream75 = objList73.parallelStream();
        comparators.Composite composite76 = new comparators.Composite(objList73);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        boolean boolean85 = comparators.Composite.validate((int) ' ', byteArray82, true);
        boolean boolean86 = composite76.contains((java.lang.Object) boolean85);
        java.util.Spliterator<java.lang.Object> objSpliterator87 = composite76.spliterator();
        byte[] byteArray88 = composite76.bytes;
        comparators.Composite composite90 = composite76.addLong((long) 5);
        int int91 = composite90.size();
        boolean boolean92 = composite65.equals((java.lang.Object) composite90);
        comparators.Composite composite93 = composite65.addMatchMaximum();
        comparators.Composite composite95 = composite65.addBool(false);
        comparators.Composite composite97 = composite65.addReal((java.lang.Double) 100.0d);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objSpliterator87);
        org.junit.Assert.assertNull(byteArray88);
        org.junit.Assert.assertNotNull(composite90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(composite95);
        org.junit.Assert.assertNotNull(composite97);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        byte[] byteArray32 = composite23.bytes;
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        int int45 = composite42.startOffset;
        byte[] byteArray47 = null;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator48 = composite23.new CompositeTypeIterator(composite42, 341, byteArray47);
        byte[] byteArray49 = compositeTypeIterator48.bytes;
        int int50 = compositeTypeIterator48.len;
        int int51 = compositeTypeIterator48.len;
        java.lang.Class<?> wildcardClass52 = compositeTypeIterator48.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = comparators.Composite.serialize(objList18);
        comparators.Composite composite23 = new comparators.Composite(objList18);
        comparators.Composite composite24 = new comparators.Composite(objList18);
        comparators.Composite composite26 = composite24.addUTF8("Placeholder(90)");
        boolean boolean27 = composite24.isEmpty();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.util.RandomAccess[] randomAccessArray50 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray51 = composite49.toArray(randomAccessArray50);
        comparators.Composite composite53 = composite49.addUTF8("UTF-8");
        int int54 = composite53.size();
        int int55 = comparators.Composite.compare(composite39, composite53);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(randomAccessArray50);
        org.junit.Assert.assertNotNull(randomAccessArray51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.hector.CompositeListSerializer compositeListSerializer19 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.lang.String str37 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.List<java.util.List<java.lang.Object>> objListList38 = compositeListSerializer19.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList34);
        comparators.hector.CompositeListSerializer compositeListSerializer39 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.util.List<java.util.List<java.lang.Object>> objListList58 = compositeListSerializer39.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList54);
        int int60 = compositeListSerializer39.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer61 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator67 = compositeType62.indexComparator;
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType62.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType68);
        comparators.CompositeType compositeType74 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray75 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList76 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76, byteBufferArray75);
        java.lang.String str78 = compositeType74.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.lang.String str79 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.util.List<java.lang.Object>> objListList80 = compositeListSerializer61.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.nio.ByteBuffer> byteBufferList81 = compositeListSerializer39.toBytesList(objListList80);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet82 = compositeListSerializer19.toBytesSet(objListList80);
        java.util.List<comparators.Composite> compositeList83 = compositeSerializer0.fromBytesSet(byteBufferSet82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray89 = new byte[] {};
        int int90 = comparators.Composite.compare(byteArray88, byteArray89);
        java.util.List<java.lang.Object> objList91 = comparators.Composite.deserialize(byteArray89);
        boolean boolean92 = comparators.Composite.validate(0, byteArray89);
        comparators.Composite composite93 = compositeSerializer0.fromBytes(byteArray89);
        int int95 = compositeSerializer0.computeInitialHashSize(2);
        int int97 = compositeSerializer0.computeInitialHashSize(6);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objListList38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(objListList58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(indexInfoComparator67);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(compositeType74);
        org.junit.Assert.assertNotNull(byteBufferArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(objListList80);
        org.junit.Assert.assertNotNull(byteBufferList81);
        org.junit.Assert.assertNotNull(byteBufferSet82);
        org.junit.Assert.assertNotNull(compositeList83);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 9 + "'", int97 == 9);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        int int86 = compositeTypeIterator80.offset;
        int int87 = compositeTypeIterator80.type;
        int int88 = compositeTypeIterator80.offset;
        byte[] byteArray89 = compositeTypeIterator80.bytes;
        compositeTypeIterator80.type = 'a';
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 67 + "'", int88 == 67);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        int int62 = composite57.startOffset;
        int int63 = composite43.compareTo(composite57);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        comparators.Composite composite70 = composite43.addBytes(byteArray68);
        java.nio.ByteBuffer byteBuffer71 = composite70.serializeToByteBuffer();
        compositeType33.validate(byteBuffer71);
        boolean boolean73 = comparators.Composite.validate(byteBuffer71);
        comparators.Composite composite74 = new comparators.Composite(byteBuffer71);
        boolean boolean75 = comparators.Composite.validate(byteBuffer71);
        comparators.Composite composite76 = new comparators.Composite(byteBuffer71);
        comparators.Composite composite77 = new comparators.Composite(byteBuffer71);
        compositeType0.validate(byteBuffer71);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(composite70);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator4 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType3);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator5 = compositeType3.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType3.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType3.indexReverseComparator;
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferComparator4);
        org.junit.Assert.assertNotNull(byteBufferComparator5);
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(indexInfoComparator7);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray14);
        comparators.Composite composite16 = new comparators.Composite(byteArray14);
        java.util.Spliterator<java.lang.Object> objSpliterator17 = composite16.spliterator();
        java.util.stream.Stream<java.lang.Object> objStream18 = composite16.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNotNull(objSpliterator17);
        org.junit.Assert.assertNotNull(objStream18);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        boolean boolean32 = comparators.Composite.isValidType((java.lang.Object) composite23);
        byte[] byteArray34 = null;
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        int int48 = comparators.Composite.compare(byteArray39, byteArray46);
        int int49 = comparators.Composite.compare((int) (byte) 1, byteArray34, 10, byteArray39);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        boolean boolean58 = comparators.Composite.validate(0, byteArray55);
        byte[] byteArray59 = null;
        int int60 = comparators.Composite.compare(byteArray55, byteArray59);
        int int61 = comparators.Composite.compare(byteArray39, byteArray55);
        comparators.Composite composite62 = composite23.addBytes(byteArray39);
        comparators.Composite composite63 = composite23.addMatchMaximum();
        composite23.startOffset = 134;
        java.io.DataOutputStream dataOutputStream66 = composite23.out;
        java.io.ByteArrayOutputStream byteArrayOutputStream67 = composite23.byteStream;
        composite23.startOffset = 121;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(dataOutputStream66);
        org.junit.Assert.assertNotNull(byteArrayOutputStream67);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream67.toString(), "CMP\001\002\001\000\t\000\003\n\n\ufffd\ufffd\000");
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        int int2 = placeholder0.type;
        int int3 = placeholder0.type;
        java.lang.String str4 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(6)" + "'", str4, "Placeholder(6)");
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        int int86 = compositeTypeIterator80.offset;
        int int87 = compositeTypeIterator80.type;
        compositeTypeIterator80.len = 0;
        comparators.Composite composite90 = compositeTypeIterator80.collection;
        java.util.Spliterator<java.lang.Object> objSpliterator91 = composite90.spliterator();
        java.util.UUID uUID92 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite93 = composite90.addLexicalUUID(uUID92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertNotNull(composite90);
        org.junit.Assert.assertNotNull(objSpliterator91);
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        java.lang.String str56 = composite17.toString();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        comparators.Composite composite72 = composite66.addBool(true);
        java.io.DataOutputStream dataOutputStream73 = composite66.out;
        composite17.out = dataOutputStream73;
        java.io.ByteArrayOutputStream byteArrayOutputStream75 = composite17.byteStream;
        java.io.DataOutputStream dataOutputStream76 = composite17.out;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite17.stream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(composite72);
        org.junit.Assert.assertNotNull(dataOutputStream73);
        org.junit.Assert.assertNull(byteArrayOutputStream75);
        org.junit.Assert.assertNotNull(dataOutputStream76);
        org.junit.Assert.assertNotNull(objStream77);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        int int27 = composite26.size();
        java.lang.Object[] objArray28 = composite26.toArray();
        byte[] byteArray29 = comparators.Composite.serialize(objArray28);
        byte[] byteArray30 = comparators.Composite.serialize(objArray28);
        java.nio.ByteBuffer byteBuffer31 = comparators.Composite.serializeToByteBuffer(objArray28);
        boolean boolean32 = comparators.Composite.isValidType((java.lang.Object) byteBuffer31);
        comparators.Composite composite33 = new comparators.Composite(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.util.RandomAccess[] randomAccessArray33 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray34 = composite32.toArray(randomAccessArray33);
        comparators.Composite composite36 = composite32.addLong((long) 67);
        byte[] byteArray37 = composite36.serialize();
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray37);
        int int39 = comparators.Composite.compare(byteArray20, byteArray37);
        comparators.hector.CompositeSerializer compositeSerializer40 = new comparators.hector.CompositeSerializer();
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream54 = composite50.parallelStream();
        comparators.Composite composite56 = composite50.addBool(true);
        java.io.DataOutputStream dataOutputStream57 = composite50.out;
        byte[] byteArray58 = compositeSerializer40.toBytes(composite50);
        int int59 = comparators.Composite.compare(byteArray37, byteArray58);
        boolean boolean60 = comparators.Composite.validate(1, byteArray58);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        byte[] byteArray63 = comparators.Composite.serialize(objList61);
        comparators.Composite composite64 = compositeSerializer0.fromBytes(byteArray63);
        int int66 = compositeSerializer0.computeInitialHashSize((int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(randomAccessArray33);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(dataOutputStream57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        comparators.Composite composite33 = composite27.addBool(true);
        comparators.Composite composite35 = composite33.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = composite33.byteStream;
        composite17.byteStream = byteArrayOutputStream36;
        int int38 = composite17.startOffset;
        java.nio.ByteBuffer byteBuffer39 = composite17.serializeToByteBuffer();
        boolean boolean40 = comparators.Composite.isValidType((java.lang.Object) composite17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArrayOutputStream36);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream36.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        int int81 = comparators.Composite.compare(byteBuffer38, byteBuffer79);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteBuffer79);
        boolean boolean84 = comparators.Composite.validate(byteBuffer79, true);
        java.nio.ByteBuffer byteBuffer85 = null;
        int int86 = comparators.Composite.compare(byteBuffer79, byteBuffer85);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        org.apache.cassandra.db.IColumn[] iColumnArray7 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList8 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8, iColumnArray7);
        java.lang.String str10 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType12.validate(byteBuffer50);
        boolean boolean52 = comparators.Composite.validate(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        java.nio.ByteBuffer byteBuffer54 = null;
        int int55 = compositeType11.compare(byteBuffer50, byteBuffer54);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer50);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer50);
        java.lang.String str58 = compositeType0.getString(byteBuffer50);
        comparators.CompositeType compositeType59 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator60 = compositeType59.indexComparator;
        comparators.CompositeType compositeType61 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator62 = compositeType59.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType61);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator63 = compositeType0.thenComparing(byteBufferComparator62);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer65 = compositeType0.fromString("67,true,2");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(iColumnArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(indexInfoComparator60);
        org.junit.Assert.assertNotNull(compositeType61);
        org.junit.Assert.assertNotNull(byteBufferComparator62);
        org.junit.Assert.assertNotNull(byteBufferComparator63);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream28 = null;
        composite25.byteStream = byteArrayOutputStream28;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        comparators.Composite composite45 = composite39.addBool(true);
        java.util.Iterator<java.lang.Object> objItor46 = composite39.iterator();
        int int47 = composite25.compareTo(composite39);
        boolean boolean48 = composite9.addAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.util.RandomAccess[] randomAccessArray59 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray60 = composite58.toArray(randomAccessArray59);
        comparators.Composite composite62 = composite58.addLong((long) 67);
        comparators.Composite composite64 = composite62.addBool(true);
        java.util.Iterator<java.lang.Object> objItor65 = composite62.iterator();
        java.nio.ByteBuffer byteBuffer66 = composite62.serializeToByteBuffer();
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray71);
        byte[] byteArray74 = comparators.Composite.serialize(objList73);
        java.util.stream.Stream<java.lang.Object> objStream75 = objList73.parallelStream();
        comparators.Composite composite76 = new comparators.Composite(objList73);
        java.util.RandomAccess[] randomAccessArray77 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray78 = composite76.toArray(randomAccessArray77);
        comparators.Composite composite80 = composite76.addLong((long) 67);
        comparators.Composite composite82 = composite80.addBool(true);
        java.util.Iterator<java.lang.Object> objItor83 = composite80.iterator();
        java.nio.ByteBuffer byteBuffer84 = composite80.serializeToByteBuffer();
        int int85 = composite62.compareTo(composite80);
        int int86 = comparators.Composite.compare(composite9, composite80);
        comparators.Composite composite88 = composite9.addUTF8("Placeholder(58)");
        java.nio.ByteBuffer byteBuffer89 = composite9.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(objItor46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(randomAccessArray59);
        org.junit.Assert.assertNotNull(randomAccessArray60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(objItor65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(randomAccessArray77);
        org.junit.Assert.assertNotNull(randomAccessArray78);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(objItor83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(byteBuffer89);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        comparators.hector.CompositeSerializer compositeSerializer12 = new comparators.hector.CompositeSerializer();
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        comparators.Composite composite28 = composite22.addBool(true);
        java.io.DataOutputStream dataOutputStream29 = composite22.out;
        byte[] byteArray30 = compositeSerializer12.toBytes(composite22);
        byte[] byteArray31 = composite22.serialize();
        boolean boolean32 = comparators.Composite.isValidType((java.lang.Object) composite22);
        byte[] byteArray33 = composite22.bytes;
        java.util.List<java.lang.Object> objList34 = compositeListSerializer0.fromBytes(byteArray33);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        int int63 = composite58.startOffset;
        int int64 = composite44.compareTo(composite58);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        comparators.Composite composite71 = composite44.addBytes(byteArray69);
        java.nio.ByteBuffer byteBuffer72 = composite71.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteBuffer72);
        java.util.List<java.lang.Object> objList74 = compositeListSerializer0.fromByteBuffer(byteBuffer72);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        boolean boolean83 = comparators.Composite.validate((int) ' ', byteArray80, true);
        java.util.List<java.lang.Object> objList84 = compositeListSerializer0.fromBytes(byteArray80);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(composite28);
        org.junit.Assert.assertNotNull(dataOutputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objList84);
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        java.util.UUID uUID15 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite16 = composite10.addTimeUUID(uUID15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        comparators.Composite.Placeholder placeholder2 = comparators.Composite.MATCH_MAXIMUM;
        placeholder2.type = (short) 1;
        java.lang.String str5 = placeholder2.toString();
        boolean boolean7 = placeholder2.equals((java.lang.Object) 10L);
        boolean boolean8 = placeholder0.equals((java.lang.Object) boolean7);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertNotNull(placeholder2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Placeholder(1)" + "'", str5, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        org.apache.cassandra.db.IColumn[] iColumnArray38 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList39 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39, iColumnArray38);
        java.lang.String str41 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType33.getReverseComparator();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        org.apache.cassandra.db.IColumn[] iColumnArray48 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList49 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49, iColumnArray48);
        java.lang.String str51 = compositeType43.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str52 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str53 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType0.getReverseComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer57 = compositeType0.fromString("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(iColumnArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(iColumnArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(byteBufferComparator55);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        int int27 = composite26.size();
        comparators.Composite composite29 = composite26.addUTF8("US-ASCII");
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        comparators.Composite composite45 = composite39.addBool(true);
        java.util.Iterator<java.lang.Object> objItor46 = composite39.iterator();
        comparators.Composite composite47 = new comparators.Composite();
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        int int62 = composite47.compareTo(composite57);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        boolean boolean81 = comparators.Composite.validate((int) ' ', byteArray78, true);
        boolean boolean82 = composite72.contains((java.lang.Object) boolean81);
        java.util.stream.Stream<java.lang.Object> objStream83 = composite72.parallelStream();
        boolean boolean84 = composite47.contains((java.lang.Object) composite72);
        boolean boolean85 = composite39.addAll((java.util.Collection<java.lang.Object>) composite47);
        int int86 = composite47.startOffset;
        comparators.Composite composite88 = composite47.addAscii("hi!");
        java.io.DataOutputStream dataOutputStream89 = composite88.out;
        composite29.out = dataOutputStream89;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(objItor46);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(dataOutputStream89);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        comparators.hector.CompositeSerializer compositeSerializer1 = new comparators.hector.CompositeSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        comparators.Composite composite17 = composite11.addBool(true);
        java.io.DataOutputStream dataOutputStream18 = composite11.out;
        byte[] byteArray19 = compositeSerializer1.toBytes(composite11);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        comparators.Composite composite35 = composite29.addBool(true);
        comparators.Composite composite37 = composite35.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream38 = composite35.byteStream;
        java.nio.ByteBuffer byteBuffer39 = compositeSerializer1.toByteBuffer(composite35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.lang.Object[] objArray64 = composite63.toArray();
        int int65 = composite63.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream66 = composite63.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream67 = composite63.parallelStream();
        int int68 = composite63.startOffset;
        int int69 = composite49.compareTo(composite63);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.util.RandomAccess[] randomAccessArray80 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray81 = composite79.toArray(randomAccessArray80);
        comparators.Composite composite83 = composite79.addLong((long) 67);
        byte[] byteArray84 = composite83.serialize();
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray84);
        comparators.Composite composite86 = new comparators.Composite(byteArray84);
        boolean boolean87 = composite63.equals((java.lang.Object) byteArray84);
        comparators.Composite composite88 = compositeSerializer1.fromBytes(byteArray84);
        comparators.CompositeType compositeType89 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray90 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList91 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91, byteBufferArray90);
        java.lang.String str93 = compositeType89.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList94 = compositeSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList95 = compositeSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        int int97 = compositeSerializer0.computeInitialHashSize(255);
        int int99 = compositeSerializer0.computeInitialHashSize(170);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArrayOutputStream38);
        org.junit.Assert.assertEquals(byteArrayOutputStream38.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(compositeType89);
        org.junit.Assert.assertNotNull(byteBufferArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(compositeList94);
        org.junit.Assert.assertNotNull(compositeList95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 341 + "'", int97 == 341);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 227 + "'", int99 == 227);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        int int6 = placeholder0.type;
        java.lang.String str7 = placeholder0.toString();
        java.lang.String str8 = placeholder0.toString();
        placeholder0.type = 141;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(1)" + "'", str7, "Placeholder(1)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Placeholder(1)" + "'", str8, "Placeholder(1)");
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.util.Iterator<java.lang.Object> objItor60 = composite59.iterator();
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        boolean boolean80 = comparators.Composite.validate((int) ' ', byteArray77, true);
        boolean boolean81 = composite71.contains((java.lang.Object) boolean80);
        java.util.stream.Stream<java.lang.Object> objStream82 = composite71.parallelStream();
        composite71.startOffset = 8;
        comparators.Composite composite86 = composite71.addAscii("hi!");
        comparators.Composite composite88 = composite71.addLong((long) 4);
        int int89 = composite88.size();
        java.lang.Object[] objArray90 = composite88.toArray();
        byte[] byteArray91 = comparators.Composite.serialize(objArray90);
        byte[] byteArray92 = comparators.Composite.serialize(objArray90);
        boolean boolean94 = comparators.Composite.validate(607, byteArray92, true);
        composite59.bytes = byteArray92;
        java.util.stream.Stream<java.lang.Object> objStream96 = composite59.stream();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objItor60);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(objStream96);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        byte[] byteArray30 = comparators.Composite.serialize(objList28);
        byte[] byteArray31 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        byte[] byteArray41 = compositeListSerializer0.toBytes(objList38);
        int int43 = compositeListSerializer0.computeInitialHashSize(10);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = composite36.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteBuffer37);
        boolean boolean39 = comparators.Composite.validate(byteBuffer37);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer37);
        java.nio.ByteBuffer byteBuffer41 = comparators.Composite.serializeToByteBuffer(objList40);
        boolean boolean43 = comparators.Composite.validate(byteBuffer41, false);
        comparators.hector.CompositeListSerializer compositeListSerializer44 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator50 = compositeType45.indexComparator;
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator56 = compositeType45.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType51);
        comparators.CompositeType compositeType57 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray58 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList59 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59, byteBufferArray58);
        java.lang.String str61 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59);
        java.lang.String str62 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59);
        java.util.List<java.util.List<java.lang.Object>> objListList63 = compositeListSerializer44.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList59);
        int int65 = compositeListSerializer44.computeInitialHashSize(9);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        byte[] byteArray76 = compositeListSerializer44.toBytes(objList72);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray81 = new byte[] {};
        int int82 = comparators.Composite.compare(byteArray80, byteArray81);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteArray81);
        byte[] byteArray84 = comparators.Composite.serialize(objList83);
        java.util.stream.Stream<java.lang.Object> objStream85 = objList83.parallelStream();
        comparators.Composite composite86 = new comparators.Composite(objList83);
        java.util.RandomAccess[] randomAccessArray87 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray88 = composite86.toArray(randomAccessArray87);
        comparators.Composite composite90 = composite86.addLong((long) 67);
        byte[] byteArray91 = composite90.serialize();
        java.util.List<java.lang.Object> objList92 = comparators.Composite.deserialize(byteArray91);
        java.nio.ByteBuffer byteBuffer93 = compositeListSerializer44.toByteBuffer(objList92);
        comparators.Composite composite94 = new comparators.Composite(byteBuffer93);
        int int95 = comparators.Composite.compare(byteBuffer41, byteBuffer93);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(indexInfoComparator50);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteBufferComparator56);
        org.junit.Assert.assertNotNull(compositeType57);
        org.junit.Assert.assertNotNull(byteBufferArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(objListList63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 13 + "'", int65 == 13);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(randomAccessArray87);
        org.junit.Assert.assertNotNull(randomAccessArray88);
        org.junit.Assert.assertNotNull(composite90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        composite9.startOffset = (byte) 1;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        comparators.Composite composite33 = new comparators.Composite();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite33.compareTo(composite43);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        boolean boolean67 = comparators.Composite.validate((int) ' ', byteArray64, true);
        boolean boolean68 = composite58.contains((java.lang.Object) boolean67);
        java.util.stream.Stream<java.lang.Object> objStream69 = composite58.parallelStream();
        boolean boolean70 = composite33.contains((java.lang.Object) composite58);
        boolean boolean71 = composite25.addAll((java.util.Collection<java.lang.Object>) composite33);
        int int72 = composite33.startOffset;
        comparators.Composite composite74 = composite33.addAscii("hi!");
        boolean boolean75 = composite9.add((java.lang.Object) composite33);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        boolean boolean84 = composite33.addAll((java.util.Collection<java.lang.Object>) objList82);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer85 = comparators.Composite.serializeToByteBuffer(objList82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        java.util.Iterator<java.lang.Object> objItor77 = composite17.iterator();
        int int78 = composite17.size();
        java.io.DataOutputStream dataOutputStream79 = composite17.out;
        java.util.UUID uUID80 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite81 = composite17.addLexicalUUID(uUID80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNull(dataOutputStream79);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        comparators.Composite composite63 = composite57.addBool(true);
        java.util.Iterator<java.lang.Object> objItor64 = composite57.iterator();
        comparators.Composite composite66 = composite57.addReal((java.lang.Double) 100.0d);
        int int67 = comparators.Composite.compare(composite47, composite57);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        java.util.List<java.lang.Object> objList74 = comparators.Composite.deserialize(byteArray72);
        byte[] byteArray75 = comparators.Composite.serialize(objList74);
        java.util.stream.Stream<java.lang.Object> objStream76 = objList74.parallelStream();
        comparators.Composite composite77 = new comparators.Composite(objList74);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        boolean boolean86 = comparators.Composite.validate((int) ' ', byteArray83, true);
        boolean boolean87 = composite77.contains((java.lang.Object) boolean86);
        java.util.Spliterator<java.lang.Object> objSpliterator88 = composite77.spliterator();
        java.io.DataOutputStream dataOutputStream89 = composite77.out;
        java.util.stream.Stream<java.lang.Object> objStream90 = composite77.parallelStream();
        byte[] byteArray91 = composite77.bytes;
        comparators.Composite composite93 = composite77.addAscii("Placeholder(77)");
        boolean boolean94 = composite47.contains((java.lang.Object) composite93);
        composite47.clear();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(objItor64);
        org.junit.Assert.assertNotNull(composite66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertNull(byteArray75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objSpliterator88);
        org.junit.Assert.assertNull(dataOutputStream89);
        org.junit.Assert.assertNotNull(objStream90);
        org.junit.Assert.assertNull(byteArray91);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        boolean boolean10 = comparators.Composite.validate((int) ' ', byteArray7, true);
        boolean boolean11 = comparators.Composite.validate(100, byteArray7);
        java.util.List<java.lang.Object> objList12 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        boolean boolean21 = comparators.Composite.validate(90, byteArray18);
        int int22 = comparators.Composite.compare(byteArray7, byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        boolean boolean33 = comparators.Composite.validate((int) ' ', byteArray30, true);
        boolean boolean34 = comparators.Composite.validate(100, byteArray30);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.util.RandomAccess[] randomAccessArray52 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray53 = composite51.toArray(randomAccessArray52);
        comparators.Composite composite55 = composite51.addLong((long) 67);
        byte[] byteArray56 = composite55.serialize();
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray56);
        int int58 = comparators.Composite.compare(byteArray39, byteArray56);
        int int59 = comparators.Composite.compare(byteArray30, byteArray56);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        boolean boolean70 = comparators.Composite.validate((int) ' ', byteArray67, true);
        boolean boolean71 = comparators.Composite.validate(100, byteArray67);
        int int72 = comparators.Composite.compare((int) (short) 100, byteArray30, 0, byteArray67);
        int int73 = comparators.Composite.compare(byteArray7, byteArray67);
        java.util.List<java.lang.Object> objList74 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        java.util.stream.Stream<java.lang.Object> objStream84 = objList82.parallelStream();
        comparators.Composite composite85 = new comparators.Composite(objList82);
        java.util.RandomAccess[] randomAccessArray86 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray87 = composite85.toArray(randomAccessArray86);
        comparators.Composite composite89 = composite85.addLong((long) 67);
        byte[] byteArray90 = composite89.serialize();
        java.util.List<java.lang.Object> objList91 = comparators.Composite.deserialize(byteArray90);
        java.nio.ByteBuffer byteBuffer92 = comparators.Composite.serializeToByteBuffer(objList91);
        byte[] byteArray93 = comparators.Composite.serialize(objList91);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = comparators.Composite.compare(25, byteArray67, 25, byteArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertNotNull(randomAccessArray53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(randomAccessArray86);
        org.junit.Assert.assertNotNull(randomAccessArray87);
        org.junit.Assert.assertNotNull(composite89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator1 = compositeType0.indexComparator;
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator3 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator4 = compositeType0.indexReverseComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer6 = compositeType0.fromString("1,true");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexInfoComparator1);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferComparator3);
        org.junit.Assert.assertNotNull(indexInfoComparator4);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        java.lang.String str25 = composite9.toString();
        int int26 = composite9.size();
        java.io.DataOutputStream dataOutputStream27 = composite9.out;
        java.nio.ByteBuffer byteBuffer28 = composite9.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNull(dataOutputStream27);
        org.junit.Assert.assertNotNull(byteBuffer28);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        int int81 = comparators.Composite.compare(byteBuffer38, byteBuffer79);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer38);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteBuffer38);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objList83);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        composite9.bytes = byteArray18;
        int int21 = composite9.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        java.util.Iterator<java.lang.Object> objItor39 = composite33.iterator();
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        boolean boolean58 = comparators.Composite.validate((int) ' ', byteArray55, true);
        boolean boolean59 = composite49.contains((java.lang.Object) boolean58);
        java.util.Spliterator<java.lang.Object> objSpliterator60 = composite49.spliterator();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite49.stream();
        comparators.Composite composite63 = composite49.addLong((long) 6);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = composite33.retainAll((java.util.Collection<java.lang.Object>) composite63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objItor39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objSpliterator60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(composite63);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        comparators.Composite composite23 = composite9.addAscii("hi!");
        comparators.Composite composite25 = composite9.addAscii("Placeholder(255)");
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        byte[] byteArray38 = composite35.bytes;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        int int40 = composite25.compareTo(composite35);
        java.nio.ByteBuffer byteBuffer41 = composite25.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(composite25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(byteBuffer41);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        org.apache.cassandra.db.IColumn[] iColumnArray17 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList18 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList18, iColumnArray17);
        java.lang.String str20 = compositeType12.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList18);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType12.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = byteBufferComparator11.thenComparing(byteBufferComparator21);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream36 = composite33.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite33.parallelStream();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        int int52 = composite47.startOffset;
        int int53 = composite33.compareTo(composite47);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        comparators.Composite composite60 = composite33.addBytes(byteArray58);
        java.nio.ByteBuffer byteBuffer61 = composite60.serializeToByteBuffer();
        compositeType23.validate(byteBuffer61);
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator68 = compositeType63.indexComparator;
        boolean boolean69 = comparators.Composite.isValidType((java.lang.Object) compositeType63);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator70 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType63);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator71 = compositeType63.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator72 = byteBufferComparator21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType63);
        comparators.CompositeType compositeType73 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray74 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList75 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75, byteBufferArray74);
        java.lang.String str77 = compositeType73.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator78 = compositeType73.indexComparator;
        comparators.CompositeType compositeType79 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray80 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList81 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList81, byteBufferArray80);
        java.lang.String str83 = compositeType79.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList81);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator84 = compositeType73.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType79);
        comparators.CompositeType compositeType85 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray86 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList87 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList87, byteBufferArray86);
        java.lang.String str89 = compositeType85.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList87);
        org.apache.cassandra.db.IColumn[] iColumnArray90 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList91 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList91, iColumnArray90);
        java.lang.String str93 = compositeType85.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList91);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator94 = compositeType85.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator95 = byteBufferComparator84.thenComparing(byteBufferComparator94);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator96 = compositeType63.thenComparing(byteBufferComparator95);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator97 = compositeType63.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator98 = compositeType63.getReverseComparator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(iColumnArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(indexInfoComparator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator70);
        org.junit.Assert.assertNotNull(indexInfoComparator71);
        org.junit.Assert.assertNotNull(byteBufferComparator72);
        org.junit.Assert.assertNotNull(compositeType73);
        org.junit.Assert.assertNotNull(byteBufferArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(indexInfoComparator78);
        org.junit.Assert.assertNotNull(compositeType79);
        org.junit.Assert.assertNotNull(byteBufferArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteBufferComparator84);
        org.junit.Assert.assertNotNull(compositeType85);
        org.junit.Assert.assertNotNull(byteBufferArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(iColumnArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteBufferComparator94);
        org.junit.Assert.assertNotNull(byteBufferComparator95);
        org.junit.Assert.assertNotNull(byteBufferComparator96);
        org.junit.Assert.assertNotNull(indexInfoComparator97);
        org.junit.Assert.assertNotNull(byteBufferComparator98);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        boolean boolean33 = comparators.Composite.validate((int) ' ', byteArray30, true);
        boolean boolean34 = composite24.contains((java.lang.Object) boolean33);
        java.util.stream.Stream<java.lang.Object> objStream35 = composite24.parallelStream();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        comparators.Composite composite51 = composite45.addBool(true);
        java.io.DataOutputStream dataOutputStream52 = composite45.out;
        composite24.out = dataOutputStream52;
        byte[] byteArray54 = composite24.serialize();
        java.io.DataOutputStream dataOutputStream55 = composite24.out;
        comparators.Composite composite57 = composite24.addUTF8("hi!");
        byte[] byteArray59 = null;
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        int int73 = comparators.Composite.compare(byteArray64, byteArray71);
        int int74 = comparators.Composite.compare((int) (byte) 1, byteArray59, 10, byteArray64);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray79 = new byte[] {};
        int int80 = comparators.Composite.compare(byteArray78, byteArray79);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray79);
        byte[] byteArray82 = comparators.Composite.serialize(objList81);
        java.util.stream.Stream<java.lang.Object> objStream83 = objList81.parallelStream();
        comparators.Composite composite84 = new comparators.Composite(objList81);
        java.util.RandomAccess[] randomAccessArray85 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray86 = composite84.toArray(randomAccessArray85);
        comparators.Composite composite88 = composite84.addLong((long) 67);
        byte[] byteArray89 = composite88.serialize();
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteArray89);
        int int91 = comparators.Composite.compare(byteArray59, byteArray89);
        comparators.Composite composite92 = new comparators.Composite(byteArray89);
        composite24.bytes = byteArray89;
        composite9.bytes = byteArray89;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(dataOutputStream52);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(dataOutputStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(randomAccessArray85);
        org.junit.Assert.assertNotNull(randomAccessArray86);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        int int63 = compositeSerializer0.computeInitialHashSize(8);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.util.RandomAccess[] randomAccessArray74 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray75 = composite73.toArray(randomAccessArray74);
        comparators.Composite composite77 = composite73.addLong((long) 67);
        comparators.Composite composite79 = composite77.addBool(true);
        java.util.Iterator<java.lang.Object> objItor80 = composite77.iterator();
        java.nio.ByteBuffer byteBuffer81 = composite77.serializeToByteBuffer();
        comparators.Composite composite82 = composite77.addMatchMaximum();
        java.nio.ByteBuffer byteBuffer83 = compositeSerializer0.toByteBuffer(composite82);
        boolean boolean84 = comparators.Composite.validate(byteBuffer83);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 11 + "'", int63 == 11);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(randomAccessArray74);
        org.junit.Assert.assertNotNull(randomAccessArray75);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(objItor80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        byte[] byteArray12 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray10);
        byte[] byteArray13 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray10);
        comparators.Composite composite14 = new comparators.Composite((java.lang.Object[]) randomAccessArray10);
        byte[] byteArray15 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray10);
        byte[] byteArray16 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray10);
        byte[] byteArray17 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray10);
        byte[] byteArray18 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNull(byteArray18);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean46 = comparators.Composite.validate(67, byteArray43, true);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray43);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList47.stream();
        comparators.Composite composite49 = new comparators.Composite(objList47);
        comparators.Composite composite50 = new comparators.Composite(objList47);
        comparators.Composite composite51 = new comparators.Composite(objList47);
        byte[] byteArray52 = comparators.Composite.serialize(objList47);
        comparators.Composite composite53 = new comparators.Composite(objList47);
        java.io.ByteArrayOutputStream byteArrayOutputStream54 = composite53.byteStream;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArrayOutputStream54);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream54.toString(), "CMP\001\002\001\000");
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        comparators.Composite composite88 = compositeTypeIterator80.collection;
        int int89 = compositeTypeIterator80.type;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        comparators.Composite composite40 = new comparators.Composite();
        comparators.Composite composite42 = composite40.addUTF8("Placeholder(58)");
        comparators.Composite composite44 = composite42.addLong((long) (-1));
        boolean boolean45 = composite9.equals((java.lang.Object) composite44);
        java.lang.String str46 = composite44.toString();
        java.io.DataOutputStream dataOutputStream47 = composite44.out;
        java.lang.Object[] objArray48 = composite44.toArray();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Placeholder(58),-1" + "'", str46, "Placeholder(58),-1");
        org.junit.Assert.assertNull(dataOutputStream47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[Placeholder(58), -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[Placeholder(58), -1]");
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        boolean boolean4 = comparators.Composite.isValidType((java.lang.Object) placeholder0);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        placeholder0.type = (byte) 0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        java.lang.String str9 = placeholder0.toString();
        int int10 = placeholder0.type;
        placeholder0.type = 15;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Placeholder(0)" + "'", str9, "Placeholder(0)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        compositeTypeIterator80.len = (short) 1;
        compositeTypeIterator80.len = (byte) 10;
        compositeTypeIterator80.start = '#';
        int int89 = compositeTypeIterator80.start;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.start = 0;
        int int83 = compositeTypeIterator80.len;
        boolean boolean84 = comparators.Composite.isValidType((java.lang.Object) int83);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean45 = comparators.Composite.validate(1, byteArray43);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray43);
        comparators.Composite composite47 = new comparators.Composite(objList46);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objList46);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.util.RandomAccess[] randomAccessArray43 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray44 = composite42.toArray(randomAccessArray43);
        comparators.Composite composite46 = composite42.addLong((long) 67);
        byte[] byteArray47 = composite46.serialize();
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray47);
        java.nio.ByteBuffer byteBuffer49 = compositeListSerializer0.toByteBuffer(objList48);
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        int int80 = composite60.compareTo(composite74);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        comparators.Composite composite87 = composite60.addBytes(byteArray85);
        java.nio.ByteBuffer byteBuffer88 = composite87.serializeToByteBuffer();
        compositeType50.validate(byteBuffer88);
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteBuffer88);
        java.util.List<java.lang.Object> objList91 = comparators.Composite.deserialize(byteBuffer88);
        byte[] byteArray92 = compositeListSerializer0.toBytes(objList91);
        int int94 = compositeListSerializer0.computeInitialHashSize(47);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 63 + "'", int94 == 63);
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 3;
        byte[] byteArray84 = compositeTypeIterator80.bytes;
        comparators.Composite composite85 = compositeTypeIterator80.collection;
        int int86 = composite85.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType6.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType6.getReverseComparator();
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator19 = compositeType14.indexComparator;
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator25 = compositeType14.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType20);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType14.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator27 = compositeType14.getReverseComparator();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.lang.String str51 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType52.getReverseComparator();
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        org.apache.cassandra.db.IColumn[] iColumnArray67 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList68 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68, iColumnArray67);
        java.lang.String str70 = compositeType62.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str71 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str72 = compositeType34.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str73 = compositeType14.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str74 = compositeType6.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(indexInfoComparator19);
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteBufferComparator25);
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(byteBufferComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(iColumnArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        boolean boolean63 = comparators.Composite.validate(byteBuffer57, true);
        boolean boolean64 = comparators.Composite.validate(byteBuffer57);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objList65);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite20 = composite18.addLong((long) '#');
        comparators.Composite composite21 = composite20.addMatchMaximum();
        int int22 = composite20.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.util.RandomAccess[] randomAccessArray43 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray44 = composite42.toArray(randomAccessArray43);
        comparators.Composite composite46 = composite42.addLong((long) 67);
        byte[] byteArray47 = composite46.serialize();
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray47);
        java.nio.ByteBuffer byteBuffer49 = compositeListSerializer0.toByteBuffer(objList48);
        comparators.Composite composite50 = new comparators.Composite(byteBuffer49);
        java.nio.ByteBuffer byteBuffer51 = composite50.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteBuffer51);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.nio.ByteBuffer byteBuffer54 = comparators.Composite.serializeToByteBuffer(objList52);
        java.nio.ByteBuffer byteBuffer55 = comparators.Composite.serializeToByteBuffer(objList52);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(byteBuffer55);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteBuffer38);
        comparators.Composite composite42 = new comparators.Composite(objList41);
        byte[] byteArray43 = null;
        composite42.bytes = byteArray43;
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.lang.Object[] objArray55 = composite54.toArray();
        int int56 = composite54.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream57 = null;
        composite54.byteStream = byteArrayOutputStream57;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        comparators.Composite composite74 = composite68.addBool(true);
        java.util.Iterator<java.lang.Object> objItor75 = composite68.iterator();
        int int76 = composite54.compareTo(composite68);
        boolean boolean77 = composite54.isEmpty();
        int int78 = comparators.Composite.compare(composite42, composite54);
        boolean boolean79 = comparators.Composite.isValidType((java.lang.Object) composite42);
        int int80 = composite42.size();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(objItor75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite25.parallelStream();
        boolean boolean37 = composite25.isEmpty();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        boolean boolean51 = composite25.containsAll((java.util.Collection<java.lang.Object>) composite47);
        comparators.Composite composite53 = composite25.addLong((long) (short) 1);
        comparators.Composite composite55 = composite53.addBool(true);
        comparators.Composite composite57 = composite55.addBool(true);
        boolean boolean58 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite55);
        java.nio.ByteBuffer byteBuffer59 = composite9.serializeToByteBuffer();
        comparators.Composite composite61 = composite9.addUTF8("Placeholder(-5)");
        comparators.Composite composite63 = composite9.addReal((java.lang.Double) 100.0d);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(composite63);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        comparators.Composite composite34 = composite25.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer35 = compositeSerializer0.toByteBuffer(composite34);
        int int37 = compositeSerializer0.computeInitialHashSize(0);
        int int39 = compositeSerializer0.computeInitialHashSize(78);
        int int41 = compositeSerializer0.computeInitialHashSize(10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 105 + "'", int39 == 105);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 14 + "'", int41 == 14);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        boolean boolean92 = compositeTypeIterator91.hasNext();
        compositeTypeIterator91.len = 127;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = (byte) 100;
        placeholder0.type = (short) 100;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.hector.CompositeSerializer compositeSerializer7 = new comparators.hector.CompositeSerializer();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        comparators.Composite composite24 = new comparators.Composite(byteArray22);
        comparators.Composite composite25 = compositeSerializer7.fromBytes(byteArray22);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.util.RandomAccess[] randomAccessArray45 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray46 = composite44.toArray(randomAccessArray45);
        comparators.Composite composite48 = composite44.addLong((long) 67);
        byte[] byteArray49 = composite48.serialize();
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray49);
        int int51 = comparators.Composite.compare(byteArray32, byteArray49);
        comparators.hector.CompositeSerializer compositeSerializer52 = new comparators.hector.CompositeSerializer();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        comparators.Composite composite68 = composite62.addBool(true);
        java.io.DataOutputStream dataOutputStream69 = composite62.out;
        byte[] byteArray70 = compositeSerializer52.toBytes(composite62);
        int int71 = comparators.Composite.compare(byteArray49, byteArray70);
        boolean boolean73 = comparators.Composite.validate(67, byteArray70, true);
        boolean boolean74 = comparators.Composite.validate(13, byteArray70);
        comparators.Composite composite75 = compositeSerializer7.fromBytes(byteArray70);
        int int77 = compositeSerializer7.computeInitialHashSize(455);
        boolean boolean78 = placeholder0.equals((java.lang.Object) 455);
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        int int82 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 95 + "'", int1 == 95);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(composite25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(randomAccessArray45);
        org.junit.Assert.assertNotNull(randomAccessArray46);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(dataOutputStream69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 607 + "'", int77 == 607);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 100 + "'", int82 == 100);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        boolean boolean41 = comparators.Composite.validate(byteBuffer38, true);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer38);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        boolean boolean86 = compositeTypeIterator80.hasNext();
        int int87 = compositeTypeIterator80.offset;
        compositeTypeIterator80.type = 5;
        compositeTypeIterator80.len = 143;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 71 + "'", int87 == 71);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        comparators.Composite composite22 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.util.RandomAccess[] randomAccessArray33 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray34 = composite32.toArray(randomAccessArray33);
        comparators.Composite composite36 = composite32.addUTF8("UTF-8");
        comparators.Composite composite38 = composite32.addBool(true);
        comparators.Composite composite40 = composite38.addLong((long) (byte) -1);
        int int41 = comparators.Composite.compare(composite9, composite40);
        comparators.Composite composite42 = composite9.addMatchMaximum();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(randomAccessArray33);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-5) + "'", int41 == (-5));
        org.junit.Assert.assertNotNull(composite42);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        comparators.Composite composite13 = composite9.addBool(true);
        java.util.UUID uUID14 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite15 = composite9.addTimeUUID(uUID14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(composite13);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.util.RandomAccess[] randomAccessArray38 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray39 = composite37.toArray(randomAccessArray38);
        comparators.Composite composite41 = composite37.addLong((long) 67);
        byte[] byteArray42 = composite41.serialize();
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray42);
        int int44 = comparators.Composite.compare(byteArray25, byteArray42);
        comparators.hector.CompositeSerializer compositeSerializer45 = new comparators.hector.CompositeSerializer();
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        comparators.Composite composite61 = composite55.addBool(true);
        java.io.DataOutputStream dataOutputStream62 = composite55.out;
        byte[] byteArray63 = compositeSerializer45.toBytes(composite55);
        int int64 = comparators.Composite.compare(byteArray42, byteArray63);
        boolean boolean66 = comparators.Composite.validate(67, byteArray63, true);
        boolean boolean67 = comparators.Composite.validate(13, byteArray63);
        comparators.Composite composite68 = compositeSerializer0.fromBytes(byteArray63);
        int int70 = compositeSerializer0.computeInitialHashSize(455);
        int int72 = compositeSerializer0.computeInitialHashSize(7);
        int int74 = compositeSerializer0.computeInitialHashSize(9);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray79 = new byte[] {};
        int int80 = comparators.Composite.compare(byteArray78, byteArray79);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray79);
        byte[] byteArray82 = comparators.Composite.serialize(objList81);
        java.util.stream.Stream<java.lang.Object> objStream83 = objList81.parallelStream();
        comparators.Composite composite84 = new comparators.Composite(objList81);
        java.lang.Object[] objArray85 = composite84.toArray();
        int int86 = composite84.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream87 = composite84.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream88 = composite84.parallelStream();
        comparators.Composite composite90 = composite84.addBool(true);
        comparators.Composite composite92 = composite90.addLong((long) 6);
        byte[] byteArray93 = composite90.serialize();
        comparators.Composite composite94 = compositeSerializer0.fromBytes(byteArray93);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(randomAccessArray38);
        org.junit.Assert.assertNotNull(randomAccessArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(dataOutputStream62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 607 + "'", int70 == 607);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 13 + "'", int74 == 13);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objStream87);
        org.junit.Assert.assertNotNull(objStream88);
        org.junit.Assert.assertNotNull(composite90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertNotNull(composite94);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteBuffer79);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteBuffer79);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteBuffer79);
        int int84 = comparators.Composite.compare(byteBuffer38, byteBuffer79);
        comparators.Composite composite85 = new comparators.Composite(byteBuffer79);
        java.util.Iterator<java.lang.Object> objItor86 = composite85.iterator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(objItor86);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType6.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType6.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator10 = compositeType6.getReverseComparator();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.hector.CompositeSerializer compositeSerializer29 = new comparators.hector.CompositeSerializer();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        int int42 = comparators.Composite.compare(byteArray33, byteArray40);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray40);
        comparators.Composite composite44 = compositeSerializer29.fromBytes(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.lang.Object[] objArray55 = composite54.toArray();
        int int56 = composite54.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream57 = composite54.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream58 = composite54.parallelStream();
        comparators.Composite composite60 = composite54.addBool(true);
        java.util.Iterator<java.lang.Object> objItor61 = composite54.iterator();
        comparators.Composite composite63 = composite54.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer64 = compositeSerializer29.toByteBuffer(composite63);
        java.lang.String str65 = compositeType17.getString(byteBuffer64);
        comparators.CompositeType compositeType66 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray67 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList68 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68, byteBufferArray67);
        java.lang.String str70 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        org.apache.cassandra.db.IColumn[] iColumnArray71 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList72 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList72, iColumnArray71);
        java.lang.String str74 = compositeType66.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList72);
        org.apache.cassandra.db.IColumn[] iColumnArray75 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList76 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList76, iColumnArray75);
        java.lang.String str78 = compositeType66.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList76);
        java.lang.String str79 = compositeType17.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList76);
        java.lang.String str80 = compositeType6.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList76);
        java.lang.String str81 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList76);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(byteBufferComparator10);
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(objItor61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "true" + "'", str65, "true");
        org.junit.Assert.assertNotNull(compositeType66);
        org.junit.Assert.assertNotNull(byteBufferArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(iColumnArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(iColumnArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.util.RandomAccess[] randomAccessArray31 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray32 = composite30.toArray(randomAccessArray31);
        comparators.Composite composite34 = composite30.addLong((long) 67);
        byte[] byteArray35 = composite34.serialize();
        boolean boolean36 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite34);
        comparators.Composite composite38 = composite34.addReal((java.lang.Double) 0.0d);
        comparators.Composite composite40 = composite34.addBool(false);
        comparators.Composite composite41 = composite34.addMatchMaximum();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(randomAccessArray32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertNotNull(composite41);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        comparators.Composite composite16 = composite14.addBool(true);
        comparators.Composite composite18 = composite14.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator19 = composite14.spliterator();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        java.io.DataOutputStream dataOutputStream41 = composite29.out;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite52.compareTo(composite66);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        comparators.Composite composite79 = composite52.addBytes(byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator81 = composite14.new CompositeTypeIterator(composite29, 67, byteArray77);
        compositeTypeIterator81.len = 0;
        int int84 = compositeTypeIterator81.len;
        int int85 = compositeTypeIterator81.len;
        int int86 = compositeTypeIterator81.start;
        compositeTypeIterator81.len = 58;
        byte[] byteArray89 = compositeTypeIterator81.bytes;
        byte[] byteArray90 = compositeTypeIterator81.bytes;
        boolean boolean92 = comparators.Composite.validate(26, byteArray90, true);
        comparators.Composite composite93 = new comparators.Composite(byteArray90);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(objSpliterator19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(dataOutputStream41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        comparators.Composite composite33 = composite23.addAscii("Placeholder(100)");
        composite33.startOffset = (short) 100;
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        comparators.Composite composite43 = new comparators.Composite(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = composite33.retainAll((java.util.Collection<java.lang.Object>) composite43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        java.util.Spliterator<java.lang.Object> objSpliterator46 = composite45.spliterator();
        int int47 = composite45.startOffset;
        composite45.clear();
        byte[] byteArray49 = composite45.bytes;
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objSpliterator46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(byteArray49);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType48 = new comparators.CompositeType();
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite73.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream77 = composite73.parallelStream();
        int int78 = composite73.startOffset;
        int int79 = composite59.compareTo(composite73);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        comparators.Composite composite86 = composite59.addBytes(byteArray84);
        java.nio.ByteBuffer byteBuffer87 = composite86.serializeToByteBuffer();
        compositeType49.validate(byteBuffer87);
        boolean boolean89 = comparators.Composite.validate(byteBuffer87);
        comparators.Composite composite90 = new comparators.Composite(byteBuffer87);
        java.nio.ByteBuffer byteBuffer91 = null;
        int int92 = compositeType48.compare(byteBuffer87, byteBuffer91);
        comparators.Composite composite93 = new comparators.Composite(byteBuffer87);
        comparators.Composite composite94 = new comparators.Composite(byteBuffer87);
        comparators.Composite composite95 = new comparators.Composite(byteBuffer87);
        boolean boolean97 = comparators.Composite.validate(byteBuffer87, true);
        boolean boolean98 = comparators.Composite.validate(byteBuffer87);
        compositeType0.validate(byteBuffer87);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        java.util.Iterator<java.lang.Object> objItor39 = composite33.iterator();
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite33.spliterator();
        comparators.Composite composite42 = composite33.addBool(false);
        byte[] byteArray43 = composite42.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objItor39);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNull(byteArray43);
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        compositeTypeIterator80.offset = (byte) -1;
        compositeTypeIterator80.len = 97;
        compositeTypeIterator80.start = (short) 10;
        comparators.Composite composite96 = compositeTypeIterator80.collection;
        compositeTypeIterator80.type = 810;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(composite96);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        comparators.Composite composite23 = composite9.addAscii("hi!");
        java.util.stream.Stream<java.lang.Object> objStream24 = composite9.stream();
        java.io.DataOutputStream dataOutputStream25 = composite9.out;
        comparators.Composite composite27 = composite9.addAscii("true,6");
        java.io.ByteArrayOutputStream[] byteArrayOutputStreamArray28 = new java.io.ByteArrayOutputStream[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.io.ByteArrayOutputStream[] byteArrayOutputStreamArray29 = composite9.toArray(byteArrayOutputStreamArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(dataOutputStream25);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(byteArrayOutputStreamArray28);
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        byte[] byteArray0 = null;
        comparators.Composite composite1 = new comparators.Composite(byteArray0);
        int int2 = composite1.size();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        boolean boolean21 = comparators.Composite.validate((int) ' ', byteArray18, true);
        boolean boolean22 = composite12.contains((java.lang.Object) boolean21);
        java.util.stream.Stream<java.lang.Object> objStream23 = composite12.parallelStream();
        composite12.startOffset = 8;
        comparators.Composite composite27 = composite12.addAscii("hi!");
        comparators.Composite composite29 = composite12.addLong((long) 4);
        int int30 = composite1.compareTo(composite29);
        composite1.startOffset = 114;
        byte[] byteArray33 = null;
        comparators.Composite composite34 = new comparators.Composite(byteArray33);
        int int35 = composite34.size();
        int int36 = comparators.Composite.compare(composite1, composite34);
        java.io.DataOutputStream dataOutputStream37 = composite34.out;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(dataOutputStream37);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        int int88 = compositeTypeIterator80.start;
        int int89 = compositeTypeIterator80.len;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj90 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 67 + "'", int88 == 67);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean4 = comparators.Composite.isValidType((java.lang.Object) str3);
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        comparators.Composite composite86 = compositeTypeIterator80.collection;
        int int87 = compositeTypeIterator80.offset;
        int int88 = compositeTypeIterator80.len;
        compositeTypeIterator80.start = '#';
        compositeTypeIterator80.len = '4';
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 67 + "'", int87 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer53);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer53);
        boolean boolean58 = composite9.addAll((java.util.Collection<java.lang.Object>) composite57);
        java.lang.Object[] objArray59 = composite9.toArray();
        composite9.startOffset = 80;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[[]]");
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 11;
        boolean boolean83 = compositeTypeIterator80.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean46 = comparators.Composite.validate(67, byteArray43, true);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray43);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList47.stream();
        comparators.Composite composite49 = new comparators.Composite(objList47);
        comparators.Composite composite50 = new comparators.Composite(objList47);
        comparators.Composite composite51 = new comparators.Composite(objList47);
        comparators.Composite composite52 = new comparators.Composite(objList47);
        comparators.Composite composite53 = new comparators.Composite(objList47);
        byte[] byteArray54 = composite53.bytes;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNull(byteArray54);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator23 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray25 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList26 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26, byteBufferArray25);
        java.lang.String str28 = compositeType24.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator29 = compositeType24.indexComparator;
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType24.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        int int64 = composite59.startOffset;
        int int65 = composite45.compareTo(composite59);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        comparators.Composite composite72 = composite45.addBytes(byteArray70);
        java.nio.ByteBuffer byteBuffer73 = composite72.serializeToByteBuffer();
        compositeType30.validate(byteBuffer73);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator75 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator76 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator77 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator78 = compositeType0.indexComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(byteBufferComparator23);
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteBufferArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(indexInfoComparator29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(composite72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBufferComparator75);
        org.junit.Assert.assertNotNull(indexInfoComparator76);
        org.junit.Assert.assertNotNull(byteBufferComparator77);
        org.junit.Assert.assertNotNull(indexInfoComparator78);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite9.parallelStream();
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = composite9.byteStream;
        comparators.Composite composite17 = composite9.addAscii("Placeholder(-1)");
        boolean boolean18 = composite9.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNull(byteArrayOutputStream15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) compositeType22);
        comparators.CompositeType compositeType29 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator30 = compositeType29.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType32.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        org.apache.cassandra.db.IColumn[] iColumnArray45 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList46 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList46, iColumnArray45);
        java.lang.String str48 = compositeType40.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList46);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = compositeType40.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator50 = compositeType40.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator51 = compositeType40.indexComparator;
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType52.getReverseComparator();
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        org.apache.cassandra.db.IColumn[] iColumnArray67 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList68 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68, iColumnArray67);
        java.lang.String str70 = compositeType62.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str71 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str72 = compositeType40.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str73 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        comparators.CompositeType compositeType74 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray75 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList76 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76, byteBufferArray75);
        java.lang.String str78 = compositeType74.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator79 = compositeType74.indexComparator;
        boolean boolean80 = comparators.Composite.isValidType((java.lang.Object) compositeType74);
        comparators.CompositeType compositeType81 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator82 = compositeType81.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator83 = compositeType74.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType81);
        comparators.CompositeType compositeType84 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray85 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList86 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86, byteBufferArray85);
        java.lang.String str88 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator89 = compositeType84.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator90 = compositeType81.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType84);
        org.apache.cassandra.db.IColumn[] iColumnArray91 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList92 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList92, iColumnArray91);
        java.lang.String str94 = compositeType81.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList92);
        java.lang.String str95 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList92);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator30);
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(iColumnArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteBufferComparator49);
        org.junit.Assert.assertNotNull(indexInfoComparator50);
        org.junit.Assert.assertNotNull(indexInfoComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(iColumnArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(compositeType74);
        org.junit.Assert.assertNotNull(byteBufferArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(indexInfoComparator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator82);
        org.junit.Assert.assertNotNull(byteBufferComparator83);
        org.junit.Assert.assertNotNull(compositeType84);
        org.junit.Assert.assertNotNull(byteBufferArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(indexInfoComparator89);
        org.junit.Assert.assertNotNull(byteBufferComparator90);
        org.junit.Assert.assertNotNull(iColumnArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        int int13 = compositeListSerializer0.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer14 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType15.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType15.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.lang.String str32 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.List<java.util.List<java.lang.Object>> objListList33 = compositeListSerializer14.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet34 = compositeListSerializer0.toBytesSet(objListList33);
        comparators.hector.CompositeListSerializer compositeListSerializer35 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        byte[] byteArray46 = compositeListSerializer35.toBytes(objList42);
        int int48 = compositeListSerializer35.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer49 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType50.indexComparator;
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType50.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType56);
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.lang.String str67 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.List<java.util.List<java.lang.Object>> objListList68 = compositeListSerializer49.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet69 = compositeListSerializer35.toBytesSet(objListList68);
        java.util.List<java.nio.ByteBuffer> byteBufferList70 = compositeListSerializer0.toBytesList(objListList68);
        comparators.hector.CompositeListSerializer compositeListSerializer71 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        java.util.List<java.lang.Object> objList78 = comparators.Composite.deserialize(byteArray76);
        byte[] byteArray79 = comparators.Composite.serialize(objList78);
        java.util.stream.Stream<java.lang.Object> objStream80 = objList78.parallelStream();
        comparators.Composite composite81 = new comparators.Composite(objList78);
        byte[] byteArray82 = compositeListSerializer71.toBytes(objList78);
        byte[] byteArray83 = comparators.Composite.serialize(objList78);
        byte[] byteArray84 = compositeListSerializer0.toBytes(objList78);
        java.util.stream.Stream<java.lang.Object> objStream85 = objList78.parallelStream();
        comparators.Composite composite86 = new comparators.Composite(objList78);
        java.util.Spliterator<java.lang.Object> objSpliterator87 = objList78.spliterator();
        comparators.Composite composite88 = new comparators.Composite(objList78);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteBufferComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objListList33);
        org.junit.Assert.assertNotNull(byteBufferSet34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 43 + "'", int48 == 43);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(indexInfoComparator55);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objListList68);
        org.junit.Assert.assertNotNull(byteBufferSet69);
        org.junit.Assert.assertNotNull(byteBufferList70);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(objSpliterator87);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        boolean boolean45 = comparators.Composite.validate((int) ' ', byteArray42, true);
        boolean boolean46 = composite36.contains((java.lang.Object) boolean45);
        java.util.stream.Stream<java.lang.Object> objStream47 = composite36.parallelStream();
        composite36.startOffset = 8;
        comparators.Composite composite51 = composite36.addAscii("hi!");
        java.lang.String str52 = composite36.toString();
        composite36.startOffset = 2;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        boolean boolean64 = comparators.Composite.validate((int) ' ', byteArray61, true);
        boolean boolean65 = comparators.Composite.validate(100, byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray77);
        byte[] byteArray80 = comparators.Composite.serialize(objList79);
        java.util.stream.Stream<java.lang.Object> objStream81 = objList79.parallelStream();
        comparators.Composite composite82 = new comparators.Composite(objList79);
        java.util.RandomAccess[] randomAccessArray83 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray84 = composite82.toArray(randomAccessArray83);
        comparators.Composite composite86 = composite82.addLong((long) 67);
        byte[] byteArray87 = composite86.serialize();
        java.util.List<java.lang.Object> objList88 = comparators.Composite.deserialize(byteArray87);
        int int89 = comparators.Composite.compare(byteArray70, byteArray87);
        int int90 = comparators.Composite.compare(byteArray61, byteArray87);
        composite36.bytes = byteArray61;
        composite9.bytes = byteArray61;
        int int93 = composite9.size();
        java.nio.ByteBuffer byteBuffer94 = composite9.serializeToByteBuffer();
        comparators.Composite composite96 = composite9.addUTF8("Placeholder(10)");
        byte[] byteArray97 = null;
        composite96.bytes = byteArray97;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(randomAccessArray83);
        org.junit.Assert.assertNotNull(randomAccessArray84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(composite96);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        int int13 = compositeListSerializer0.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer14 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType15.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType15.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.lang.String str32 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.List<java.util.List<java.lang.Object>> objListList33 = compositeListSerializer14.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList29);
        java.util.List<java.nio.ByteBuffer> byteBufferList34 = compositeListSerializer0.toBytesList(objListList33);
        comparators.hector.CompositeListSerializer compositeListSerializer35 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        byte[] byteArray46 = compositeListSerializer35.toBytes(objList42);
        int int48 = compositeListSerializer35.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer49 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType50.indexComparator;
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType50.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType56);
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.lang.String str67 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.List<java.util.List<java.lang.Object>> objListList68 = compositeListSerializer49.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet69 = compositeListSerializer35.toBytesSet(objListList68);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet70 = compositeListSerializer0.toBytesSet(objListList68);
        int int72 = compositeListSerializer0.computeInitialHashSize(5);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteBufferComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objListList33);
        org.junit.Assert.assertNotNull(byteBufferList34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 43 + "'", int48 == 43);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(indexInfoComparator55);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objListList68);
        org.junit.Assert.assertNotNull(byteBufferSet69);
        org.junit.Assert.assertNotNull(byteBufferSet70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        boolean boolean92 = composite26.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        int int16 = composite9.startOffset;
        comparators.CompositeType compositeType17 = new comparators.CompositeType();
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        boolean boolean58 = comparators.Composite.validate(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = null;
        int int61 = compositeType17.compare(byteBuffer56, byteBuffer60);
        comparators.Composite composite62 = new comparators.Composite(byteBuffer56);
        comparators.Composite composite63 = new comparators.Composite(byteBuffer56);
        boolean boolean64 = composite9.equals((java.lang.Object) composite63);
        int int65 = composite63.size();
        byte[] byteArray66 = composite63.serialize();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite44.startOffset;
        int int50 = composite30.compareTo(composite44);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.util.RandomAccess[] randomAccessArray61 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray62 = composite60.toArray(randomAccessArray61);
        comparators.Composite composite64 = composite60.addLong((long) 67);
        byte[] byteArray65 = composite64.serialize();
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray65);
        comparators.Composite composite67 = new comparators.Composite(byteArray65);
        boolean boolean68 = composite44.equals((java.lang.Object) byteArray65);
        java.util.List<java.lang.Object> objList69 = compositeListSerializer1.fromBytes(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(85, byteArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(randomAccessArray61);
        org.junit.Assert.assertNotNull(randomAccessArray62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objList69);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        java.lang.String str26 = composite9.toString();
        comparators.Composite composite28 = composite9.addAscii("");
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        boolean boolean47 = comparators.Composite.validate((int) ' ', byteArray44, true);
        boolean boolean48 = composite38.contains((java.lang.Object) boolean47);
        java.util.Spliterator<java.lang.Object> objSpliterator49 = composite38.spliterator();
        int int50 = composite38.startOffset;
        comparators.Composite composite52 = composite38.addAscii("hi!");
        java.util.stream.Stream<java.lang.Object> objStream53 = composite38.stream();
        java.lang.String str54 = composite38.toString();
        comparators.Composite composite55 = composite38.addMatchMinimum();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(composite28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objSpliterator49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(composite55);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        comparators.Composite composite27 = composite21.addBool(true);
        comparators.Composite composite29 = composite27.addLong((long) 6);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.util.RandomAccess[] randomAccessArray40 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray41 = composite39.toArray(randomAccessArray40);
        comparators.Composite composite43 = composite39.addLong((long) 67);
        byte[] byteArray44 = composite43.serialize();
        comparators.Composite composite45 = composite27.addBytes(byteArray44);
        comparators.Composite composite46 = new comparators.Composite(byteArray44);
        java.util.List<java.lang.Object> objList47 = compositeListSerializer0.fromBytes(byteArray44);
        java.nio.ByteBuffer byteBuffer48 = comparators.Composite.serializeToByteBuffer(objList47);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(randomAccessArray40);
        org.junit.Assert.assertNotNull(randomAccessArray41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(byteBuffer48);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        byte[] byteArray41 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray39);
        byte[] byteArray42 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite43 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite45 = composite43.addAscii("true");
        java.io.ByteArrayOutputStream byteArrayOutputStream46 = composite43.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(byteArrayOutputStream46);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream46.toString(), "CMP\001\007\000\004true\000");
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        boolean boolean9 = comparators.Composite.validate(90, byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList10 = comparators.Composite.deserialize((int) (short) 100, byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator3 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator4 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexReverseComparator;
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(indexInfoComparator3);
        org.junit.Assert.assertNotNull(indexInfoComparator4);
        org.junit.Assert.assertNotNull(indexInfoComparator5);
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.Composite composite11 = new comparators.Composite();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        int int26 = composite11.compareTo(composite21);
        comparators.hector.CompositeListSerializer compositeListSerializer27 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.List<java.util.List<java.lang.Object>> objListList46 = compositeListSerializer27.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList42);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType47.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        java.lang.Object[] objArray51 = new java.lang.Object[] { compositeListSerializer27, compositeType49 };
        java.lang.Object[][] objArray52 = new java.lang.Object[][] { objArray51 };
        java.lang.Object[][] objArray53 = composite11.toArray(objArray52);
        java.lang.Object[][] objArray54 = composite9.toArray(objArray53);
        composite9.startOffset = 141;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objListList46);
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray54);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        comparators.hector.CompositeSerializer compositeSerializer1 = new comparators.hector.CompositeSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.util.RandomAccess[] randomAccessArray12 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray13 = composite11.toArray(randomAccessArray12);
        comparators.Composite composite15 = composite11.addLong((long) 67);
        byte[] byteArray16 = composite15.serialize();
        java.util.List<java.lang.Object> objList17 = comparators.Composite.deserialize(byteArray16);
        comparators.Composite composite18 = new comparators.Composite(byteArray16);
        comparators.Composite composite19 = compositeSerializer1.fromBytes(byteArray16);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.util.RandomAccess[] randomAccessArray30 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray31 = composite29.toArray(randomAccessArray30);
        comparators.Composite composite33 = composite29.addLong((long) 67);
        comparators.Composite composite35 = composite33.addBool(true);
        java.util.Iterator<java.lang.Object> objItor36 = composite33.iterator();
        java.nio.ByteBuffer byteBuffer37 = composite33.serializeToByteBuffer();
        comparators.Composite composite38 = new comparators.Composite(byteBuffer37);
        comparators.Composite composite39 = compositeSerializer1.fromByteBuffer(byteBuffer37);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer37);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        boolean boolean43 = comparators.Composite.validate(19, byteArray41, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(randomAccessArray13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList17);
        org.junit.Assert.assertNotNull(composite19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(objItor36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        boolean boolean46 = comparators.Composite.isValidType((java.lang.Object) compositeType40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType40);
        comparators.CompositeType compositeType48 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = compositeType48.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator50 = compositeType48.indexComparator;
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator52 = compositeType48.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator53 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType48);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        int int64 = composite63.size();
        composite63.clear();
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray81 = new byte[] {};
        int int82 = comparators.Composite.compare(byteArray80, byteArray81);
        boolean boolean84 = comparators.Composite.validate((int) ' ', byteArray81, true);
        boolean boolean85 = composite75.contains((java.lang.Object) boolean84);
        java.util.stream.Stream<java.lang.Object> objStream86 = composite75.parallelStream();
        composite75.startOffset = 8;
        comparators.Composite composite90 = composite75.addAscii("hi!");
        boolean boolean91 = composite63.containsAll((java.util.Collection<java.lang.Object>) composite75);
        java.nio.ByteBuffer byteBuffer92 = composite75.serializeToByteBuffer();
        compositeType40.validate(byteBuffer92);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator94 = compositeType40.indexReverseComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer96 = compositeType40.fromString("true,6,434d500103000000000000004300");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
        org.junit.Assert.assertNotNull(byteBufferComparator49);
        org.junit.Assert.assertNotNull(indexInfoComparator50);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferComparator52);
        org.junit.Assert.assertNotNull(byteBufferComparator53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertNotNull(composite90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(indexInfoComparator94);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        int int92 = compositeTypeIterator91.type;
        int int93 = compositeTypeIterator91.offset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 97 + "'", int93 == 97);
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray19 = composite10.serialize();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        int int34 = composite29.startOffset;
        boolean boolean35 = composite29.isEmpty();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        int int46 = composite45.size();
        boolean boolean47 = composite29.containsAll((java.util.Collection<java.lang.Object>) composite45);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        boolean boolean69 = composite57.isEmpty();
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        boolean boolean83 = composite57.containsAll((java.util.Collection<java.lang.Object>) composite79);
        comparators.Composite composite85 = composite57.addLong((long) (short) 1);
        int int86 = comparators.Composite.compare(composite29, composite85);
        composite29.clear();
        boolean boolean88 = composite10.containsAll((java.util.Collection<java.lang.Object>) composite29);
        comparators.Composite composite90 = composite10.addLong((long) 34);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(composite90);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator13 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator15 = compositeType0.getReverseComparator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(indexInfoComparator13);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(byteBufferComparator15);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        int int5 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        int int82 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = 255;
        compositeTypeIterator80.len = '#';
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        comparators.Composite composite77 = compositeSerializer0.fromByteBuffer(byteBuffer76);
        int int79 = compositeSerializer0.computeInitialHashSize((int) '#');
        int int81 = compositeSerializer0.computeInitialHashSize(130);
        int int83 = compositeSerializer0.computeInitialHashSize((int) (short) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 47 + "'", int79 == 47);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 174 + "'", int81 == 174);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addLong((long) 67);
        byte[] byteArray38 = composite37.serialize();
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray38);
        comparators.Composite composite40 = new comparators.Composite(objList39);
        byte[] byteArray41 = compositeListSerializer0.toBytes(objList39);
        java.nio.ByteBuffer byteBuffer42 = comparators.Composite.serializeToByteBuffer(objList39);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteBuffer42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNotNull(objList44);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.util.RandomAccess[] randomAccessArray43 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray44 = composite42.toArray(randomAccessArray43);
        comparators.Composite composite46 = composite42.addLong((long) 67);
        byte[] byteArray47 = composite46.serialize();
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray47);
        java.nio.ByteBuffer byteBuffer49 = compositeListSerializer0.toByteBuffer(objList48);
        comparators.hector.CompositeListSerializer compositeListSerializer50 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator56 = compositeType51.indexComparator;
        comparators.CompositeType compositeType57 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray58 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList59 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59, byteBufferArray58);
        java.lang.String str61 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator62 = compositeType51.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType57);
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.lang.String str68 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.util.List<java.util.List<java.lang.Object>> objListList69 = compositeListSerializer50.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList65);
        int int71 = compositeListSerializer50.computeInitialHashSize(9);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        java.util.List<java.lang.Object> objList78 = comparators.Composite.deserialize(byteArray76);
        byte[] byteArray79 = comparators.Composite.serialize(objList78);
        byte[] byteArray80 = compositeListSerializer50.toBytes(objList78);
        byte[] byteArray81 = compositeListSerializer0.toBytes(objList78);
        comparators.Composite composite82 = new comparators.Composite(objList78);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexInfoComparator56);
        org.junit.Assert.assertNotNull(compositeType57);
        org.junit.Assert.assertNotNull(byteBufferArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteBufferComparator62);
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(objListList69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 13 + "'", int71 == 13);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNull(byteArray81);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        comparators.Composite composite39 = new comparators.Composite();
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        int int54 = composite39.compareTo(composite49);
        byte[] byteArray55 = compositeSerializer0.toBytes(composite49);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.util.RandomAccess[] randomAccessArray66 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray67 = composite65.toArray(randomAccessArray66);
        comparators.Composite composite69 = composite65.addLong((long) 67);
        comparators.Composite composite71 = composite69.addBool(true);
        java.util.Iterator<java.lang.Object> objItor72 = composite69.iterator();
        java.nio.ByteBuffer byteBuffer73 = composite69.serializeToByteBuffer();
        java.nio.ByteBuffer byteBuffer74 = compositeSerializer0.toByteBuffer(composite69);
        int int76 = compositeSerializer0.computeInitialHashSize(107);
        comparators.Composite composite77 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray78 = compositeSerializer0.toBytes(composite77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(randomAccessArray66);
        org.junit.Assert.assertNotNull(randomAccessArray67);
        org.junit.Assert.assertNotNull(composite69);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(objItor72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 143 + "'", int76 == 143);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray38 = null;
        comparators.Composite composite39 = new comparators.Composite(byteArray38);
        boolean boolean40 = composite25.containsAll((java.util.Collection<java.lang.Object>) composite39);
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] {};
        java.lang.CharSequence[] charSequenceArray42 = composite39.toArray(charSequenceArray41);
        comparators.Composite composite43 = new comparators.Composite((java.lang.Object[]) charSequenceArray42);
        byte[] byteArray44 = composite43.serialize();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertNull(byteArray44);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 170;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        java.util.Iterator<java.lang.Object> objItor27 = composite9.iterator();
        int int28 = composite9.startOffset;
        java.io.DataOutput[] dataOutputArray29 = new java.io.DataOutput[] {};
        java.io.DataOutput[] dataOutputArray30 = composite9.toArray(dataOutputArray29);
        java.util.Iterator<java.lang.Object> objItor31 = composite9.iterator();
        comparators.Composite composite33 = composite9.addAscii("Placeholder(95)");
        java.util.stream.Stream<java.lang.Object> objStream34 = composite33.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objItor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dataOutputArray29);
        org.junit.Assert.assertNotNull(dataOutputArray30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(objStream34);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        int int13 = compositeListSerializer0.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer14 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType15.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType15.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.lang.String str32 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.List<java.util.List<java.lang.Object>> objListList33 = compositeListSerializer14.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet34 = compositeListSerializer0.toBytesSet(objListList33);
        comparators.hector.CompositeListSerializer compositeListSerializer35 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        byte[] byteArray46 = compositeListSerializer35.toBytes(objList42);
        int int48 = compositeListSerializer35.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer49 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType50.indexComparator;
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType50.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType56);
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.lang.String str67 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.List<java.util.List<java.lang.Object>> objListList68 = compositeListSerializer49.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet69 = compositeListSerializer35.toBytesSet(objListList68);
        java.util.List<java.nio.ByteBuffer> byteBufferList70 = compositeListSerializer0.toBytesList(objListList68);
        comparators.hector.CompositeListSerializer compositeListSerializer71 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        java.util.List<java.lang.Object> objList78 = comparators.Composite.deserialize(byteArray76);
        byte[] byteArray79 = comparators.Composite.serialize(objList78);
        java.util.stream.Stream<java.lang.Object> objStream80 = objList78.parallelStream();
        comparators.Composite composite81 = new comparators.Composite(objList78);
        byte[] byteArray82 = compositeListSerializer71.toBytes(objList78);
        byte[] byteArray83 = comparators.Composite.serialize(objList78);
        byte[] byteArray84 = compositeListSerializer0.toBytes(objList78);
        java.util.Spliterator<java.lang.Object> objSpliterator85 = objList78.spliterator();
        byte[] byteArray86 = comparators.Composite.serialize(objList78);
        byte[] byteArray87 = comparators.Composite.serialize(objList78);
        comparators.Composite composite88 = new comparators.Composite(objList78);
        java.io.ByteArrayOutputStream byteArrayOutputStream89 = composite88.byteStream;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteBufferComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objListList33);
        org.junit.Assert.assertNotNull(byteBufferSet34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 43 + "'", int48 == 43);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(indexInfoComparator55);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objListList68);
        org.junit.Assert.assertNotNull(byteBufferSet69);
        org.junit.Assert.assertNotNull(byteBufferList70);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNotNull(objSpliterator85);
        org.junit.Assert.assertNull(byteArray86);
        org.junit.Assert.assertNull(byteArray87);
        org.junit.Assert.assertNull(byteArrayOutputStream89);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        int int22 = compositeListSerializer1.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer23 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray25 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList26 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26, byteBufferArray25);
        java.lang.String str28 = compositeType24.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator29 = compositeType24.indexComparator;
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType24.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.lang.String str41 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.util.List<java.lang.Object>> objListList42 = compositeListSerializer23.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.nio.ByteBuffer> byteBufferList43 = compositeListSerializer1.toBytesList(objListList42);
        java.lang.String str44 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        org.apache.cassandra.db.IColumn[] iColumnArray50 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList51 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList51, iColumnArray50);
        java.lang.String str53 = compositeType45.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType45.getReverseComparator();
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        org.apache.cassandra.db.IColumn[] iColumnArray60 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList61 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList61, iColumnArray60);
        java.lang.String str63 = compositeType55.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList61);
        java.lang.String str64 = compositeType45.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList61);
        comparators.hector.CompositeListSerializer compositeListSerializer65 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType66 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray67 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList68 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68, byteBufferArray67);
        java.lang.String str70 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator71 = compositeType66.indexComparator;
        comparators.CompositeType compositeType72 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray73 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList74 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74, byteBufferArray73);
        java.lang.String str76 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator77 = compositeType66.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType72);
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.lang.String str83 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.List<java.util.List<java.lang.Object>> objListList84 = compositeListSerializer65.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList80);
        java.lang.String str85 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.lang.String str86 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator87 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator88 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator89 = compositeType0.indexComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteBufferArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(indexInfoComparator29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objListList42);
        org.junit.Assert.assertNotNull(byteBufferList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(iColumnArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(iColumnArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(compositeType66);
        org.junit.Assert.assertNotNull(byteBufferArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(indexInfoComparator71);
        org.junit.Assert.assertNotNull(compositeType72);
        org.junit.Assert.assertNotNull(byteBufferArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteBufferComparator77);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(objListList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(indexInfoComparator87);
        org.junit.Assert.assertNotNull(indexInfoComparator88);
        org.junit.Assert.assertNotNull(indexInfoComparator89);
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        compositeTypeIterator80.len = (short) 100;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator4 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType3);
        comparators.CompositeType compositeType5 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray6 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList7 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList7, byteBufferArray6);
        java.lang.String str9 = compositeType5.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList7);
        org.apache.cassandra.db.IColumn[] iColumnArray10 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList11 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList11, iColumnArray10);
        java.lang.String str13 = compositeType5.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList11);
        org.apache.cassandra.db.IColumn[] iColumnArray14 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList15 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList15, iColumnArray14);
        java.lang.String str17 = compositeType5.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList15);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator18 = compositeType5.indexComparator;
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray20 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList21 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21, byteBufferArray20);
        java.lang.String str23 = compositeType19.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator24 = compositeType19.indexComparator;
        comparators.CompositeType compositeType25 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray26 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList27 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27, byteBufferArray26);
        java.lang.String str29 = compositeType25.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator30 = compositeType19.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator31 = compositeType19.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType19.getReverseComparator();
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator38 = compositeType33.indexComparator;
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator44 = compositeType33.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType39);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.lang.String str50 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str56 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        comparators.CompositeType compositeType57 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray58 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList59 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59, byteBufferArray58);
        java.lang.String str61 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59);
        org.apache.cassandra.db.IColumn[] iColumnArray62 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList63 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList63, iColumnArray62);
        java.lang.String str65 = compositeType57.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList63);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator66 = compositeType57.getReverseComparator();
        comparators.CompositeType compositeType67 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray68 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList69 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69, byteBufferArray68);
        java.lang.String str71 = compositeType67.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69);
        org.apache.cassandra.db.IColumn[] iColumnArray72 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList73 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73, iColumnArray72);
        java.lang.String str75 = compositeType67.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73);
        java.lang.String str76 = compositeType57.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73);
        java.lang.String str77 = compositeType39.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73);
        java.lang.String str78 = compositeType19.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73);
        java.lang.String str79 = compositeType5.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73);
        java.lang.String str80 = compositeType3.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73);
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferComparator4);
        org.junit.Assert.assertNotNull(compositeType5);
        org.junit.Assert.assertNotNull(byteBufferArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(iColumnArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(iColumnArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(indexInfoComparator18);
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteBufferArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexInfoComparator24);
        org.junit.Assert.assertNotNull(compositeType25);
        org.junit.Assert.assertNotNull(byteBufferArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteBufferComparator30);
        org.junit.Assert.assertNotNull(indexInfoComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexInfoComparator38);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteBufferComparator44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(compositeType57);
        org.junit.Assert.assertNotNull(byteBufferArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(iColumnArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteBufferComparator66);
        org.junit.Assert.assertNotNull(compositeType67);
        org.junit.Assert.assertNotNull(byteBufferArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(iColumnArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        comparators.Composite composite82 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 4;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(composite82);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        byte[] byteArray40 = null;
        int int41 = comparators.Composite.compare(3, byteArray36, 7, byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(52, byteArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addLong((long) 21);
        java.lang.Object[] objArray16 = composite15.toArray();
        java.lang.Object obj17 = null;
        boolean boolean18 = composite15.equals(obj17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[21]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[21]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addBool(true);
        comparators.Composite composite19 = composite17.addUTF8("80,6");
        composite19.clear();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        int int45 = composite40.startOffset;
        int int46 = comparators.Composite.compare(composite30, composite40);
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.lang.Object[] objArray72 = composite71.toArray();
        int int73 = composite71.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream74 = composite71.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream75 = composite71.parallelStream();
        int int76 = composite71.startOffset;
        int int77 = composite57.compareTo(composite71);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        comparators.Composite composite84 = composite57.addBytes(byteArray82);
        java.nio.ByteBuffer byteBuffer85 = composite84.serializeToByteBuffer();
        compositeType47.validate(byteBuffer85);
        comparators.CompositeType compositeType87 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray88 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList89 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89, byteBufferArray88);
        java.lang.String str91 = compositeType87.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator92 = compositeType87.indexComparator;
        boolean boolean93 = comparators.Composite.isValidType((java.lang.Object) compositeType87);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator94 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType87);
        java.lang.Class<?> wildcardClass95 = compositeType87.getClass();
        java.lang.reflect.Type[] typeArray96 = new java.lang.reflect.Type[] { wildcardClass95 };
        java.lang.reflect.Type[] typeArray97 = composite40.toArray(typeArray96);
        java.lang.reflect.Type[] typeArray98 = composite19.toArray(typeArray96);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(composite19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(compositeType87);
        org.junit.Assert.assertNotNull(byteBufferArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(indexInfoComparator92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(typeArray96);
        org.junit.Assert.assertNotNull(typeArray97);
        org.junit.Assert.assertNotNull(typeArray98);
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        int int92 = compositeTypeIterator91.start;
        compositeTypeIterator91.start = 'a';
        int int95 = compositeTypeIterator91.start;
        byte[] byteArray96 = null;
        compositeTypeIterator91.bytes = byteArray96;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 97 + "'", int95 == 97);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        comparators.Composite composite18 = composite9.addUTF8("Placeholder(100)");
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        int int43 = composite38.startOffset;
        int int44 = comparators.Composite.compare(composite28, composite38);
        composite28.clear();
        byte[] byteArray46 = composite28.bytes;
        byte[] byteArray48 = null;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator49 = composite9.new CompositeTypeIterator(composite28, 8, byteArray48);
        java.io.ByteArrayOutputStream byteArrayOutputStream50 = composite28.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNull(byteArrayOutputStream50);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteBuffer38);
        comparators.Composite composite42 = new comparators.Composite(objList41);
        byte[] byteArray43 = null;
        composite42.bytes = byteArray43;
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.lang.Object[] objArray55 = composite54.toArray();
        int int56 = composite54.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream57 = null;
        composite54.byteStream = byteArrayOutputStream57;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        comparators.Composite composite74 = composite68.addBool(true);
        java.util.Iterator<java.lang.Object> objItor75 = composite68.iterator();
        int int76 = composite54.compareTo(composite68);
        boolean boolean77 = composite54.isEmpty();
        int int78 = comparators.Composite.compare(composite42, composite54);
        comparators.Composite composite80 = composite54.addBool(true);
        java.nio.ByteBuffer byteBuffer81 = composite54.serializeToByteBuffer();
        java.util.UUID uUID82 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite83 = composite54.addLexicalUUID(uUID82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(objItor75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(byteBuffer81);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        comparators.Composite composite19 = composite9.addLong(0L);
        comparators.Composite composite21 = composite19.addUTF8("Placeholder(6)");
        composite21.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(composite19);
        org.junit.Assert.assertNotNull(composite21);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        boolean boolean8 = comparators.Composite.validate((int) ' ', byteArray5, true);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray5);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList9.stream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNotNull(objStream10);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        compositeTypeIterator80.type = 14;
        comparators.Composite composite92 = compositeTypeIterator80.collection;
        int int93 = compositeTypeIterator80.start;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 67 + "'", int93 == 67);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        boolean boolean59 = comparators.Composite.validate(byteBuffer56);
        comparators.Composite composite60 = new comparators.Composite(byteBuffer56);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        java.util.Iterator<java.lang.Object> objItor27 = composite9.iterator();
        int int28 = composite9.startOffset;
        java.io.DataOutput[] dataOutputArray29 = new java.io.DataOutput[] {};
        java.io.DataOutput[] dataOutputArray30 = composite9.toArray(dataOutputArray29);
        java.util.Iterator<java.lang.Object> objItor31 = composite9.iterator();
        java.util.UUID uUID32 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite33 = composite9.addTimeUUID(uUID32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objItor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dataOutputArray29);
        org.junit.Assert.assertNotNull(dataOutputArray30);
        org.junit.Assert.assertNotNull(objItor31);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.Composite composite11 = new comparators.Composite();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        int int26 = composite11.compareTo(composite21);
        comparators.hector.CompositeListSerializer compositeListSerializer27 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.List<java.util.List<java.lang.Object>> objListList46 = compositeListSerializer27.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList42);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType47.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        java.lang.Object[] objArray51 = new java.lang.Object[] { compositeListSerializer27, compositeType49 };
        java.lang.Object[][] objArray52 = new java.lang.Object[][] { objArray51 };
        java.lang.Object[][] objArray53 = composite11.toArray(objArray52);
        java.lang.Object[][] objArray54 = composite9.toArray(objArray53);
        java.io.ByteArrayOutputStream byteArrayOutputStream55 = composite9.byteStream;
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream68 = null;
        composite65.byteStream = byteArrayOutputStream68;
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        comparators.Composite composite85 = composite79.addBool(true);
        java.util.Iterator<java.lang.Object> objItor86 = composite79.iterator();
        int int87 = composite65.compareTo(composite79);
        byte[] byteArray88 = composite79.bytes;
        comparators.Composite composite89 = composite9.addBytes(byteArray88);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objListList46);
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNull(byteArrayOutputStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(objItor86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(composite89);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        comparators.CompositeType compositeType16 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray17 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList18 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18, byteBufferArray17);
        java.lang.String str20 = compositeType16.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator21 = compositeType16.indexComparator;
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator27 = compositeType16.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType22);
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.lang.String str33 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        int int63 = composite58.startOffset;
        int int64 = composite44.compareTo(composite58);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        comparators.Composite composite71 = composite44.addBytes(byteArray69);
        java.nio.ByteBuffer byteBuffer72 = composite71.serializeToByteBuffer();
        compositeType34.validate(byteBuffer72);
        java.lang.String str74 = compositeType22.getString(byteBuffer72);
        boolean boolean75 = composite10.contains((java.lang.Object) str74);
        boolean boolean76 = composite10.isEmpty();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(compositeType16);
        org.junit.Assert.assertNotNull(byteBufferArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(indexInfoComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteBufferComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        java.lang.String str1 = placeholder0.toString();
        int int2 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(170)" + "'", str1, "Placeholder(170)");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite20 = composite18.addLong((long) '#');
        comparators.Composite composite22 = composite20.addLong((long) 8);
        boolean boolean23 = composite22.isEmpty();
        byte[] byteArray24 = composite22.bytes;
        comparators.Composite composite25 = new comparators.Composite(byteArray24);
        composite25.startOffset = 13;
        boolean boolean28 = composite25.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        int int7 = placeholder0.type;
        placeholder0.type = 185;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream26 = null;
        composite23.byteStream = byteArrayOutputStream26;
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        comparators.Composite composite43 = composite37.addBool(true);
        java.util.Iterator<java.lang.Object> objItor44 = composite37.iterator();
        int int45 = composite23.compareTo(composite37);
        boolean boolean46 = composite23.isEmpty();
        int int47 = composite23.startOffset;
        boolean boolean48 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite23);
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        org.apache.cassandra.db.IColumn[] iColumnArray54 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList55 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList55, iColumnArray54);
        java.lang.String str57 = compositeType49.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList55);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator63 = compositeType58.indexComparator;
        comparators.CompositeType compositeType64 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray65 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList66 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66, byteBufferArray65);
        java.lang.String str68 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator69 = compositeType58.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType64);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator70 = compositeType49.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType58);
        boolean boolean71 = composite23.equals((java.lang.Object) compositeType58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator72 = compositeType58.getReverseComparator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(objItor44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(iColumnArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(indexInfoComparator63);
        org.junit.Assert.assertNotNull(compositeType64);
        org.junit.Assert.assertNotNull(byteBufferArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteBufferComparator69);
        org.junit.Assert.assertNotNull(byteBufferComparator70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator72);
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        byte[] byteArray9 = comparators.Composite.serialize(objList7);
        byte[] byteArray10 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        java.util.List<java.lang.Object> objList17 = comparators.Composite.deserialize(byteArray15);
        byte[] byteArray18 = comparators.Composite.serialize(objList17);
        java.util.stream.Stream<java.lang.Object> objStream19 = objList17.parallelStream();
        comparators.Composite composite20 = new comparators.Composite(objList17);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        boolean boolean29 = comparators.Composite.validate((int) ' ', byteArray26, true);
        boolean boolean30 = composite20.contains((java.lang.Object) boolean29);
        java.util.stream.Stream<java.lang.Object> objStream31 = composite20.parallelStream();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        comparators.Composite composite47 = composite41.addBool(true);
        java.io.DataOutputStream dataOutputStream48 = composite41.out;
        composite20.out = dataOutputStream48;
        byte[] byteArray50 = composite20.serialize();
        java.io.DataOutputStream dataOutputStream51 = composite20.out;
        comparators.Composite composite53 = composite20.addUTF8("hi!");
        byte[] byteArray55 = null;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        int int69 = comparators.Composite.compare(byteArray60, byteArray67);
        int int70 = comparators.Composite.compare((int) (byte) 1, byteArray55, 10, byteArray60);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray78 = comparators.Composite.serialize(objList77);
        java.util.stream.Stream<java.lang.Object> objStream79 = objList77.parallelStream();
        comparators.Composite composite80 = new comparators.Composite(objList77);
        java.util.RandomAccess[] randomAccessArray81 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray82 = composite80.toArray(randomAccessArray81);
        comparators.Composite composite84 = composite80.addLong((long) 67);
        byte[] byteArray85 = composite84.serialize();
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray85);
        int int87 = comparators.Composite.compare(byteArray55, byteArray85);
        comparators.Composite composite88 = new comparators.Composite(byteArray85);
        composite20.bytes = byteArray85;
        java.util.List<java.lang.Object> objList90 = compositeListSerializer0.fromBytes(byteArray85);
        comparators.Composite composite91 = new comparators.Composite(byteArray85);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(objList17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(dataOutputStream48);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(dataOutputStream51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(randomAccessArray82);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(objList90);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream26 = null;
        composite23.byteStream = byteArrayOutputStream26;
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        comparators.Composite composite43 = composite37.addBool(true);
        java.util.Iterator<java.lang.Object> objItor44 = composite37.iterator();
        int int45 = composite23.compareTo(composite37);
        boolean boolean46 = composite23.isEmpty();
        int int47 = composite23.startOffset;
        boolean boolean48 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite23);
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        org.apache.cassandra.db.IColumn[] iColumnArray54 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList55 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList55, iColumnArray54);
        java.lang.String str57 = compositeType49.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList55);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator63 = compositeType58.indexComparator;
        comparators.CompositeType compositeType64 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray65 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList66 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66, byteBufferArray65);
        java.lang.String str68 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator69 = compositeType58.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType64);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator70 = compositeType49.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType58);
        boolean boolean71 = composite23.equals((java.lang.Object) compositeType58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator72 = compositeType58.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator73 = compositeType58.indexComparator;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(objItor44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(iColumnArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(indexInfoComparator63);
        org.junit.Assert.assertNotNull(compositeType64);
        org.junit.Assert.assertNotNull(byteBufferArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteBufferComparator69);
        org.junit.Assert.assertNotNull(byteBufferComparator70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator72);
        org.junit.Assert.assertNotNull(indexInfoComparator73);
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator53 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator54 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator56 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator57 = compositeType0.reversed();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(indexInfoComparator53);
        org.junit.Assert.assertNotNull(indexInfoComparator54);
        org.junit.Assert.assertNotNull(byteBufferComparator55);
        org.junit.Assert.assertNotNull(byteBufferComparator56);
        org.junit.Assert.assertNotNull(byteBufferComparator57);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.util.Iterator<java.lang.Object> objItor60 = composite59.iterator();
        comparators.Composite.Placeholder placeholder61 = comparators.Composite.MATCH_MAXIMUM;
        int int62 = placeholder61.type;
        placeholder61.type = 6;
        boolean boolean65 = composite59.contains((java.lang.Object) placeholder61);
        byte[] byteArray66 = composite59.bytes;
        java.nio.ByteBuffer byteBuffer67 = composite59.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objItor60);
        org.junit.Assert.assertNotNull(placeholder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 185 + "'", int62 == 185);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer67);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator13 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType0.indexReverseComparator;
        comparators.hector.CompositeSerializer compositeSerializer15 = new comparators.hector.CompositeSerializer();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        int int28 = composite25.startOffset;
        byte[] byteArray29 = compositeSerializer15.toBytes(composite25);
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.lang.Object[] objArray55 = composite54.toArray();
        int int56 = composite54.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream57 = composite54.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream58 = composite54.parallelStream();
        int int59 = composite54.startOffset;
        int int60 = composite40.compareTo(composite54);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        comparators.Composite composite67 = composite40.addBytes(byteArray65);
        java.nio.ByteBuffer byteBuffer68 = composite67.serializeToByteBuffer();
        compositeType30.validate(byteBuffer68);
        boolean boolean70 = comparators.Composite.validate(byteBuffer68);
        boolean boolean71 = comparators.Composite.validate(byteBuffer68);
        comparators.Composite composite72 = compositeSerializer15.fromByteBuffer(byteBuffer68);
        comparators.Composite composite73 = new comparators.Composite(byteBuffer68);
        boolean boolean74 = comparators.Composite.validate(byteBuffer68);
        compositeType0.validate(byteBuffer68);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(indexInfoComparator13);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(composite72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        java.lang.Object[] objArray30 = composite23.toArray();
        java.lang.String[] strArray34 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray38 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray42 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray46 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray50 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray54 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[][] strArray55 = new java.lang.String[][] { strArray34, strArray38, strArray42, strArray46, strArray50, strArray54 };
        java.lang.String[] strArray59 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray63 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray67 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray71 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray75 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[] strArray79 = new java.lang.String[] { "true,6,434d500103000000000000004300", "hi!", "US-ASCII" };
        java.lang.String[][] strArray80 = new java.lang.String[][] { strArray59, strArray63, strArray67, strArray71, strArray75, strArray79 };
        java.lang.String[][][] strArray81 = new java.lang.String[][][] { strArray55, strArray80 };
        java.lang.String[][][] strArray82 = composite23.toArray(strArray81);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = 13;
        int int85 = compositeTypeIterator80.offset;
        compositeTypeIterator80.offset = 170;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 13 + "'", int85 == 13);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = null;
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        int int49 = comparators.Composite.compare(byteArray40, byteArray47);
        int int50 = comparators.Composite.compare((int) (byte) 1, byteArray35, 10, byteArray40);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        int int63 = comparators.Composite.compare(byteArray54, byteArray61);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray61);
        int int65 = comparators.Composite.compare(byteArray40, byteArray61);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray61);
        boolean boolean68 = comparators.Composite.validate((int) (byte) 10, byteArray61, true);
        java.util.List<java.lang.Object> objList69 = compositeListSerializer0.fromBytes(byteArray61);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.util.RandomAccess[] randomAccessArray80 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray81 = composite79.toArray(randomAccessArray80);
        comparators.Composite composite83 = composite79.addLong((long) 67);
        comparators.Composite composite85 = composite83.addBool(true);
        comparators.Composite composite87 = composite83.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer88 = composite83.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList89 = comparators.Composite.deserialize(byteBuffer88);
        java.util.List<java.lang.Object> objList90 = compositeListSerializer0.fromByteBuffer(byteBuffer88);
        boolean boolean92 = comparators.Composite.validate(byteBuffer88, true);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(objList89);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType7.indexComparator;
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator18 = compositeType7.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType13);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType13.validate(byteBuffer56);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        org.apache.cassandra.db.IColumn[] iColumnArray63 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList64 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList64, iColumnArray63);
        java.lang.String str66 = compositeType58.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList64);
        org.apache.cassandra.db.IColumn[] iColumnArray67 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList68 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68, iColumnArray67);
        java.lang.String str70 = compositeType58.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str71 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str72 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.util.Collection<org.apache.cassandra.db.IColumn> iColumnCollection73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = compositeType0.getColumnsString(iColumnCollection73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteBufferComparator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(iColumnArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(iColumnArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        comparators.CompositeType compositeType4 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray5 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList6 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6, byteBufferArray5);
        java.lang.String str8 = compositeType4.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator9 = compositeType4.indexComparator;
        boolean boolean10 = comparators.Composite.isValidType((java.lang.Object) compositeType4);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType11.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType4.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType11);
        boolean boolean14 = placeholder0.equals((java.lang.Object) byteBufferComparator13);
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType15.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType15.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        org.apache.cassandra.db.IColumn[] iColumnArray32 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList33 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList33, iColumnArray32);
        java.lang.String str35 = compositeType27.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList33);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator36 = compositeType27.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator37 = byteBufferComparator26.thenComparing(byteBufferComparator36);
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        compositeType38.validate(byteBuffer76);
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType78.indexComparator;
        boolean boolean84 = comparators.Composite.isValidType((java.lang.Object) compositeType78);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator85 = compositeType38.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType78);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator86 = compositeType78.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator87 = byteBufferComparator36.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType78);
        boolean boolean88 = placeholder0.equals((java.lang.Object) compositeType78);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer90 = compositeType78.fromString("Placeholder(14)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertNotNull(compositeType4);
        org.junit.Assert.assertNotNull(byteBufferArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexInfoComparator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteBufferComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(iColumnArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteBufferComparator36);
        org.junit.Assert.assertNotNull(byteBufferComparator37);
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(indexInfoComparator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator85);
        org.junit.Assert.assertNotNull(indexInfoComparator86);
        org.junit.Assert.assertNotNull(byteBufferComparator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        java.util.stream.Stream<java.lang.Object> objStream75 = composite17.parallelStream();
        comparators.Composite composite77 = composite17.addUTF8("Placeholder(97)");
        java.lang.Object[] objArray78 = composite17.toArray();
        java.io.ByteArrayOutputStream byteArrayOutputStream79 = composite17.byteStream;
        comparators.Composite composite80 = composite17.addMatchMaximum();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[80, Placeholder(97)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[80, Placeholder(97)]");
        org.junit.Assert.assertNull(byteArrayOutputStream79);
        org.junit.Assert.assertNotNull(composite80);
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        boolean boolean40 = comparators.Composite.validate((int) ' ', byteArray37, true);
        boolean boolean41 = composite31.contains((java.lang.Object) boolean40);
        java.util.stream.Stream<java.lang.Object> objStream42 = composite31.parallelStream();
        composite31.startOffset = 8;
        comparators.Composite composite46 = composite31.addAscii("hi!");
        boolean boolean47 = comparators.Composite.isValidType((java.lang.Object) composite31);
        boolean boolean48 = composite31.isEmpty();
        byte[] byteArray51 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        int int65 = comparators.Composite.compare(byteArray56, byteArray63);
        int int66 = comparators.Composite.compare((int) (byte) 1, byteArray51, 10, byteArray56);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        java.util.List<java.lang.Object> objList74 = comparators.Composite.deserialize(byteArray72);
        boolean boolean75 = comparators.Composite.validate(0, byteArray72);
        byte[] byteArray76 = null;
        int int77 = comparators.Composite.compare(byteArray72, byteArray76);
        int int78 = comparators.Composite.compare(byteArray56, byteArray72);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator79 = composite9.new CompositeTypeIterator(composite31, 185, byteArray56);
        int int80 = compositeTypeIterator79.len;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        comparators.Composite composite14 = composite9.addAscii("true");
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite24.stream();
        byte[] byteArray33 = composite24.bytes;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite24.stream();
        comparators.Composite composite36 = composite24.addBool(true);
        boolean boolean37 = composite9.addAll((java.util.Collection<java.lang.Object>) composite36);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        java.lang.Object[] objArray22 = composite9.toArray();
        comparators.Composite composite23 = new comparators.Composite(objArray22);
        composite23.startOffset = '4';
        comparators.Composite composite27 = composite23.addAscii("");
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.util.RandomAccess[] randomAccessArray38 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray39 = composite37.toArray(randomAccessArray38);
        comparators.Composite composite41 = composite37.addLong((long) 67);
        comparators.Composite composite43 = composite41.addBool(true);
        comparators.Composite composite45 = composite41.addLong((long) 2);
        java.io.ByteArrayOutputStream byteArrayOutputStream46 = composite45.byteStream;
        composite27.byteStream = byteArrayOutputStream46;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(randomAccessArray38);
        org.junit.Assert.assertNotNull(randomAccessArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(byteArrayOutputStream46);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream46.toString(), "CMP\001\003\000\000\000\000\000\000\000C\002\001\003\000\000\000\000\000\000\000\002\000");
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        comparators.Composite composite39 = new comparators.Composite();
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        int int54 = composite39.compareTo(composite49);
        byte[] byteArray55 = compositeSerializer0.toBytes(composite49);
        int int57 = compositeSerializer0.computeInitialHashSize(29);
        int int59 = compositeSerializer0.computeInitialHashSize(21);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 39 + "'", int57 == 39);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 29 + "'", int59 == 29);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator3 = compositeType0.indexReverseComparator;
        boolean boolean4 = comparators.Composite.isValidType((java.lang.Object) indexInfoComparator3);
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(indexInfoComparator3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator21 = compositeType0.indexReverseComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(indexInfoComparator21);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        byte[] byteArray33 = compositeListSerializer22.toBytes(objList29);
        int int35 = compositeListSerializer22.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer36 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType37 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray38 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList39 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39, byteBufferArray38);
        java.lang.String str41 = compositeType37.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator42 = compositeType37.indexComparator;
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = compositeType37.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType43);
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.lang.String str54 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.List<java.util.List<java.lang.Object>> objListList55 = compositeListSerializer36.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet56 = compositeListSerializer22.toBytesSet(objListList55);
        java.util.List<java.nio.ByteBuffer> byteBufferList57 = compositeListSerializer0.toBytesList(objListList55);
        int int59 = compositeListSerializer0.computeInitialHashSize(97);
        int int61 = compositeListSerializer0.computeInitialHashSize(26);
        int int63 = compositeListSerializer0.computeInitialHashSize(77);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 43 + "'", int35 == 43);
        org.junit.Assert.assertNotNull(compositeType37);
        org.junit.Assert.assertNotNull(byteBufferArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(indexInfoComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteBufferComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objListList55);
        org.junit.Assert.assertNotNull(byteBufferSet56);
        org.junit.Assert.assertNotNull(byteBufferList57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 130 + "'", int59 == 130);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 103 + "'", int63 == 103);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray18 = composite17.bytes;
        comparators.Composite composite20 = composite17.addLong((long) 135);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(composite20);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator4 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType3.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator6 = compositeType3.reversed();
        comparators.hector.CompositeListSerializer compositeListSerializer7 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator13 = compositeType8.indexComparator;
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator19 = compositeType8.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType14);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.lang.String str25 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.List<java.util.List<java.lang.Object>> objListList26 = compositeListSerializer7.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList22);
        comparators.hector.CompositeListSerializer compositeListSerializer27 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.List<java.util.List<java.lang.Object>> objListList46 = compositeListSerializer27.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList42);
        int int48 = compositeListSerializer27.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer49 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType50.indexComparator;
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType50.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType56);
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.lang.String str67 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.List<java.util.List<java.lang.Object>> objListList68 = compositeListSerializer49.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList64);
        java.util.List<java.nio.ByteBuffer> byteBufferList69 = compositeListSerializer27.toBytesList(objListList68);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet70 = compositeListSerializer7.toBytesSet(objListList68);
        java.lang.String str71 = compositeType3.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferSet70);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer73 = compositeType3.fromString("6");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferComparator4);
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(byteBufferComparator6);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(indexInfoComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteBufferComparator19);
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(objListList26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objListList46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(indexInfoComparator55);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objListList68);
        org.junit.Assert.assertNotNull(byteBufferList69);
        org.junit.Assert.assertNotNull(byteBufferSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        comparators.Composite composite36 = composite30.addBool(true);
        java.io.DataOutputStream dataOutputStream37 = composite30.out;
        composite9.out = dataOutputStream37;
        byte[] byteArray39 = composite9.serialize();
        java.io.DataOutputStream dataOutputStream40 = composite9.out;
        comparators.Composite composite42 = composite9.addUTF8("hi!");
        boolean boolean43 = composite9.isEmpty();
        composite9.startOffset = 35;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(dataOutputStream37);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator4 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType3);
        comparators.CompositeType compositeType5 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray6 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList7 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList7, byteBufferArray6);
        java.lang.String str9 = compositeType5.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList7);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator10 = compositeType5.indexComparator;
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator16 = compositeType5.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType11);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        int int45 = composite40.startOffset;
        int int46 = composite26.compareTo(composite40);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        comparators.Composite composite53 = composite26.addBytes(byteArray51);
        java.nio.ByteBuffer byteBuffer54 = composite53.serializeToByteBuffer();
        compositeType11.validate(byteBuffer54);
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType56.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        org.apache.cassandra.db.IColumn[] iColumnArray65 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList66 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList66, iColumnArray65);
        java.lang.String str68 = compositeType56.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList66);
        java.lang.String str69 = compositeType11.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList66);
        java.lang.String str70 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator71 = compositeType0.reversed();
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferComparator4);
        org.junit.Assert.assertNotNull(compositeType5);
        org.junit.Assert.assertNotNull(byteBufferArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(indexInfoComparator10);
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteBufferComparator16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(iColumnArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteBufferComparator71);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        int int26 = composite25.size();
        boolean boolean27 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        boolean boolean46 = comparators.Composite.validate((int) ' ', byteArray43, true);
        boolean boolean47 = composite37.contains((java.lang.Object) boolean46);
        java.util.stream.Stream<java.lang.Object> objStream48 = composite37.parallelStream();
        boolean boolean49 = composite37.isEmpty();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        boolean boolean63 = composite37.containsAll((java.util.Collection<java.lang.Object>) composite59);
        comparators.Composite composite65 = composite37.addLong((long) (short) 1);
        int int66 = comparators.Composite.compare(composite9, composite65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray71);
        byte[] byteArray74 = comparators.Composite.serialize(objList73);
        java.util.stream.Stream<java.lang.Object> objStream75 = objList73.parallelStream();
        comparators.Composite composite76 = new comparators.Composite(objList73);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        boolean boolean85 = comparators.Composite.validate((int) ' ', byteArray82, true);
        boolean boolean86 = composite76.contains((java.lang.Object) boolean85);
        java.util.Spliterator<java.lang.Object> objSpliterator87 = composite76.spliterator();
        byte[] byteArray88 = composite76.bytes;
        comparators.Composite composite90 = composite76.addLong((long) 5);
        int int91 = composite90.size();
        boolean boolean92 = composite65.equals((java.lang.Object) composite90);
        comparators.Composite composite93 = composite65.addMatchMaximum();
        byte[] byteArray94 = composite93.bytes;
        java.util.List<java.lang.Object> objList95 = comparators.Composite.deserialize(byteArray94);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objSpliterator87);
        org.junit.Assert.assertNull(byteArray88);
        org.junit.Assert.assertNotNull(composite90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0]");
        org.junit.Assert.assertNotNull(objList95);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        byte[] byteArray0 = null;
        comparators.Composite composite1 = new comparators.Composite(byteArray0);
        java.util.Spliterator<java.lang.Object> objSpliterator2 = composite1.spliterator();
        org.junit.Assert.assertNotNull(objSpliterator2);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator14 = compositeType0.reversed();
        java.nio.ByteBuffer byteBuffer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = compositeType0.getString(byteBuffer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(byteBufferComparator14);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addLong((long) 21);
        java.lang.Object[] objArray16 = composite15.toArray();
        comparators.Composite composite17 = composite15.addMatchMaximum();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        comparators.Composite composite29 = new comparators.Composite();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite29.compareTo(composite39);
        comparators.hector.CompositeListSerializer compositeListSerializer45 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator51 = compositeType46.indexComparator;
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator57 = compositeType46.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType52);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.lang.String str63 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.List<java.util.List<java.lang.Object>> objListList64 = compositeListSerializer45.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList60);
        comparators.CompositeType compositeType65 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator66 = compositeType65.indexComparator;
        comparators.CompositeType compositeType67 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator68 = compositeType65.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType67);
        java.lang.Object[] objArray69 = new java.lang.Object[] { compositeListSerializer45, compositeType67 };
        java.lang.Object[][] objArray70 = new java.lang.Object[][] { objArray69 };
        java.lang.Object[][] objArray71 = composite29.toArray(objArray70);
        java.lang.Object[][] objArray72 = composite27.toArray(objArray71);
        comparators.Composite composite73 = new comparators.Composite((java.lang.Object[]) objArray71);
        java.util.Spliterator<java.lang.Object> objSpliterator74 = composite73.spliterator();
        java.lang.String str75 = composite73.toString();
        comparators.Composite composite77 = composite73.addLong((long) 341);
        int int78 = composite17.compareTo(composite73);
        byte[] byteArray79 = composite17.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[21]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[21]");
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(indexInfoComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteBufferComparator57);
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(objListList64);
        org.junit.Assert.assertNotNull(indexInfoComparator66);
        org.junit.Assert.assertNotNull(compositeType67);
        org.junit.Assert.assertNotNull(byteBufferComparator68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objSpliterator74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 21, 0, -1, 0]");
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite13.iterator();
        java.nio.ByteBuffer byteBuffer17 = composite13.serializeToByteBuffer();
        comparators.Composite composite18 = new comparators.Composite(byteBuffer17);
        java.lang.String str19 = composite18.toString();
        java.util.stream.Stream<java.lang.Object> objStream20 = composite18.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "67,true" + "'", str19, "67,true");
        org.junit.Assert.assertNotNull(objStream20);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        int int84 = compositeTypeIterator80.offset;
        compositeTypeIterator80.offset = 63;
        int int87 = compositeTypeIterator80.type;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        comparators.Composite composite18 = composite9.addLong((long) 0);
        int int19 = composite9.size();
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objSpliterator20);
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        org.apache.cassandra.db.IColumn[] iColumnArray59 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList60 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList60, iColumnArray59);
        java.lang.String str62 = compositeType6.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList60);
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator68 = compositeType63.indexComparator;
        boolean boolean69 = comparators.Composite.isValidType((java.lang.Object) compositeType63);
        comparators.CompositeType compositeType70 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator71 = compositeType70.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator72 = compositeType63.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType70);
        comparators.CompositeType compositeType73 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray74 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList75 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75, byteBufferArray74);
        java.lang.String str77 = compositeType73.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator78 = compositeType73.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator79 = compositeType70.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType73);
        org.apache.cassandra.db.IColumn[] iColumnArray80 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList81 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList81, iColumnArray80);
        java.lang.String str83 = compositeType70.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList81);
        java.lang.String str84 = compositeType6.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList81);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(iColumnArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(indexInfoComparator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator71);
        org.junit.Assert.assertNotNull(byteBufferComparator72);
        org.junit.Assert.assertNotNull(compositeType73);
        org.junit.Assert.assertNotNull(byteBufferArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(indexInfoComparator78);
        org.junit.Assert.assertNotNull(byteBufferComparator79);
        org.junit.Assert.assertNotNull(iColumnArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        comparators.Composite composite55 = composite49.addBool(true);
        java.util.Iterator<java.lang.Object> objItor56 = composite49.iterator();
        comparators.Composite composite58 = composite49.addReal((java.lang.Double) 100.0d);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        int int73 = composite68.startOffset;
        composite68.clear();
        boolean boolean75 = composite58.containsAll((java.util.Collection<java.lang.Object>) composite68);
        java.util.Iterator<java.lang.Object> objItor76 = composite58.iterator();
        boolean boolean77 = composite37.add((java.lang.Object) composite58);
        comparators.Composite composite79 = composite58.addBool(true);
        comparators.Composite composite80 = composite58.addMatchMinimum();
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        java.util.List<java.lang.Object> objList87 = comparators.Composite.deserialize(byteArray85);
        byte[] byteArray88 = comparators.Composite.serialize(objList87);
        java.util.stream.Stream<java.lang.Object> objStream89 = objList87.parallelStream();
        comparators.Composite composite90 = new comparators.Composite(objList87);
        java.lang.Object[] objArray91 = composite90.toArray();
        int int92 = composite90.startOffset;
        java.util.Spliterator<java.lang.Object> objSpliterator93 = composite90.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream94 = composite90.byteStream;
        boolean boolean95 = composite80.containsAll((java.util.Collection<java.lang.Object>) composite90);
        byte[] byteArray96 = composite90.bytes;
        composite90.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(objItor56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(objList87);
        org.junit.Assert.assertNull(byteArray88);
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objSpliterator93);
        org.junit.Assert.assertNull(byteArrayOutputStream94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNull(byteArray96);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray12 = comparators.Composite.serialize(objList7);
        comparators.Composite composite13 = new comparators.Composite(objList7);
        boolean boolean14 = composite13.isEmpty();
        boolean boolean15 = composite13.isEmpty();
        comparators.Composite composite17 = composite13.addBool(false);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite17.spliterator();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        int int27 = composite26.size();
        comparators.Composite composite29 = composite26.addUTF8("US-ASCII");
        java.util.Spliterator<java.lang.Object> objSpliterator30 = composite26.spliterator();
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        comparators.Composite composite38 = composite26.addBytes(byteArray35);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        comparators.Composite composite54 = composite48.addBool(true);
        comparators.Composite composite56 = composite54.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream57 = composite54.byteStream;
        composite26.byteStream = byteArrayOutputStream57;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteArrayOutputStream57);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream57.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite9.byteStream = byteArrayOutputStream15;
        java.util.Iterator<java.lang.Object> objItor17 = composite9.iterator();
        java.util.Iterator<java.lang.Object> objItor18 = composite9.iterator();
        comparators.Composite composite20 = composite9.addAscii("US-ASCII");
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        int int33 = comparators.Composite.compare(byteArray24, byteArray31);
        boolean boolean34 = comparators.Composite.isValidType((java.lang.Object) byteArray24);
        comparators.Composite composite35 = composite9.addBytes(byteArray24);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNotNull(objItor18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(composite35);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        compositeTypeIterator80.len = (short) 1;
        int int85 = compositeTypeIterator80.start;
        int int86 = compositeTypeIterator80.len;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType6.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType6.getReverseComparator();
        comparators.CompositeType compositeType14 = new comparators.CompositeType();
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer53);
        java.nio.ByteBuffer byteBuffer57 = null;
        int int58 = compositeType14.compare(byteBuffer53, byteBuffer57);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer53);
        comparators.Composite composite60 = new comparators.Composite(byteBuffer53);
        comparators.Composite composite61 = new comparators.Composite(byteBuffer53);
        boolean boolean62 = comparators.Composite.validate(byteBuffer53);
        boolean boolean64 = comparators.Composite.validate(byteBuffer53, true);
        boolean boolean66 = comparators.Composite.validate(byteBuffer53, false);
        boolean boolean67 = comparators.Composite.validate(byteBuffer53);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteBuffer53);
        boolean boolean69 = comparators.Composite.isValidType((java.lang.Object) byteBuffer53);
        java.lang.String str70 = compositeType6.getString(byteBuffer53);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite25.parallelStream();
        boolean boolean37 = composite25.isEmpty();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        boolean boolean51 = composite25.containsAll((java.util.Collection<java.lang.Object>) composite47);
        comparators.Composite composite53 = composite25.addLong((long) (short) 1);
        comparators.Composite composite55 = composite53.addBool(true);
        comparators.Composite composite57 = composite55.addBool(true);
        boolean boolean58 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite55);
        byte[] byteArray59 = composite55.serialize();
        composite55.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 0]");
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteBuffer40);
        comparators.Composite composite48 = new comparators.Composite(byteBuffer40);
        java.io.DataOutputStream dataOutputStream49 = composite48.out;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(dataOutputStream49);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        java.util.Iterator<java.lang.Object> objItor17 = composite9.iterator();
        byte[] byteArray18 = composite9.bytes;
        java.util.stream.Stream<java.lang.Object> objStream19 = composite9.parallelStream();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        int int32 = composite29.startOffset;
        java.lang.Object[] objArray33 = composite29.toArray();
        java.util.Spliterator<java.lang.Object> objSpliterator34 = composite29.spliterator();
        comparators.Composite composite36 = composite29.addBool(false);
        comparators.Composite composite38 = composite36.addBool(false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objSpliterator34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(composite38);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator14 = compositeType0.reversed();
        comparators.hector.CompositeListSerializer compositeListSerializer15 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType16 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray17 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList18 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18, byteBufferArray17);
        java.lang.String str20 = compositeType16.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator21 = compositeType16.indexComparator;
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator27 = compositeType16.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType22);
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.lang.String str33 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.List<java.util.List<java.lang.Object>> objListList34 = compositeListSerializer15.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList30);
        int int36 = compositeListSerializer15.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer37 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray39 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList40 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40, byteBufferArray39);
        java.lang.String str42 = compositeType38.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator43 = compositeType38.indexComparator;
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = compositeType38.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType44);
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.lang.String str55 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.List<java.util.List<java.lang.Object>> objListList56 = compositeListSerializer37.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList52);
        java.util.List<java.nio.ByteBuffer> byteBufferList57 = compositeListSerializer15.toBytesList(objListList56);
        java.lang.String str58 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(byteBufferComparator14);
        org.junit.Assert.assertNotNull(compositeType16);
        org.junit.Assert.assertNotNull(byteBufferArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(indexInfoComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteBufferComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(objListList34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(indexInfoComparator43);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteBufferComparator49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(objListList56);
        org.junit.Assert.assertNotNull(byteBufferList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        int int27 = composite9.size();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite9.parallelStream();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator63 = compositeType58.indexComparator;
        comparators.CompositeType compositeType64 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray65 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList66 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66, byteBufferArray65);
        java.lang.String str68 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator69 = compositeType58.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType64);
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray71 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList72 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72, byteBufferArray71);
        java.lang.String str74 = compositeType70.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.lang.String str75 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.util.AbstractList[] abstractListArray77 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray78 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray77;
        byteBufferListArray78[0] = byteBufferList54;
        byteBufferListArray78[1] = byteBufferList72;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray83 = composite38.toArray(byteBufferListArray78);
        java.util.stream.Stream<java.lang.Object> objStream84 = composite38.parallelStream();
        comparators.Composite composite86 = composite38.addUTF8("UTF-8");
        java.util.Iterator<java.lang.Object> objItor87 = composite86.iterator();
        boolean boolean88 = composite9.contains((java.lang.Object) composite86);
        java.io.DataOutputStream dataOutputStream89 = composite86.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(indexInfoComparator63);
        org.junit.Assert.assertNotNull(compositeType64);
        org.junit.Assert.assertNotNull(byteBufferArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteBufferComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(abstractListArray77);
        org.junit.Assert.assertNotNull(byteBufferListArray78);
        org.junit.Assert.assertNotNull(byteBufferListArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(objItor87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(dataOutputStream89);
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        int int86 = compositeTypeIterator80.offset;
        int int87 = compositeTypeIterator80.type;
        compositeTypeIterator80.offset = (byte) 100;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj90 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        int int13 = compositeListSerializer0.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer14 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType15.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType15.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.lang.String str32 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.List<java.util.List<java.lang.Object>> objListList33 = compositeListSerializer14.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList29);
        int int35 = compositeListSerializer14.computeInitialHashSize(9);
        int int37 = compositeListSerializer14.computeInitialHashSize(71);
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray49 = compositeListSerializer38.toBytes(objList45);
        int int51 = compositeListSerializer38.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer52 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType53 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray54 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList55 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55, byteBufferArray54);
        java.lang.String str57 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator58 = compositeType53.indexComparator;
        comparators.CompositeType compositeType59 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray60 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList61 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61, byteBufferArray60);
        java.lang.String str63 = compositeType59.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator64 = compositeType53.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType59);
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.lang.String str70 = compositeType59.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.List<java.util.List<java.lang.Object>> objListList71 = compositeListSerializer52.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList67);
        java.util.List<java.nio.ByteBuffer> byteBufferList72 = compositeListSerializer38.toBytesList(objListList71);
        java.util.List<java.nio.ByteBuffer> byteBufferList73 = compositeListSerializer14.toBytesList(objListList71);
        java.util.List<java.nio.ByteBuffer> byteBufferList74 = compositeListSerializer0.toBytesList(objListList71);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteBufferComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objListList33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 13 + "'", int35 == 13);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 95 + "'", int37 == 95);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 43 + "'", int51 == 43);
        org.junit.Assert.assertNotNull(compositeType53);
        org.junit.Assert.assertNotNull(byteBufferArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(indexInfoComparator58);
        org.junit.Assert.assertNotNull(compositeType59);
        org.junit.Assert.assertNotNull(byteBufferArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteBufferComparator64);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(objListList71);
        org.junit.Assert.assertNotNull(byteBufferList72);
        org.junit.Assert.assertNotNull(byteBufferList73);
        org.junit.Assert.assertNotNull(byteBufferList74);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        int int38 = compositeSerializer0.computeInitialHashSize(97);
        int int40 = compositeSerializer0.computeInitialHashSize(130);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream54 = composite50.parallelStream();
        int int55 = composite50.startOffset;
        comparators.hector.CompositeListSerializer compositeListSerializer56 = new comparators.hector.CompositeListSerializer();
        boolean boolean57 = composite50.contains((java.lang.Object) compositeListSerializer56);
        comparators.CompositeType compositeType58 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator59 = compositeType58.indexComparator;
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType58.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType60);
        comparators.hector.CompositeListSerializer compositeListSerializer62 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        byte[] byteArray73 = compositeListSerializer62.toBytes(objList69);
        int int75 = compositeListSerializer62.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer76 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType77 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray78 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList79 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79, byteBufferArray78);
        java.lang.String str81 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator82 = compositeType77.indexComparator;
        comparators.CompositeType compositeType83 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray84 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList85 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85, byteBufferArray84);
        java.lang.String str87 = compositeType83.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator88 = compositeType77.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType83);
        comparators.CompositeType compositeType89 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray90 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList91 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91, byteBufferArray90);
        java.lang.String str93 = compositeType89.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91);
        java.lang.String str94 = compositeType83.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<java.util.List<java.lang.Object>> objListList95 = compositeListSerializer76.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet96 = compositeListSerializer62.toBytesSet(objListList95);
        java.lang.String str97 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferSet96);
        java.util.List<java.util.List<java.lang.Object>> objListList98 = compositeListSerializer56.fromBytesSet(byteBufferSet96);
        java.util.List<comparators.Composite> compositeList99 = compositeSerializer0.fromBytesSet(byteBufferSet96);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 130 + "'", int38 == 130);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 174 + "'", int40 == 174);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator59);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 43 + "'", int75 == 43);
        org.junit.Assert.assertNotNull(compositeType77);
        org.junit.Assert.assertNotNull(byteBufferArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexInfoComparator82);
        org.junit.Assert.assertNotNull(compositeType83);
        org.junit.Assert.assertNotNull(byteBufferArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteBufferComparator88);
        org.junit.Assert.assertNotNull(compositeType89);
        org.junit.Assert.assertNotNull(byteBufferArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(objListList95);
        org.junit.Assert.assertNotNull(byteBufferSet96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(objListList98);
        org.junit.Assert.assertNotNull(compositeList99);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = (short) 0;
        boolean boolean85 = compositeTypeIterator80.hasNext();
        int int86 = compositeTypeIterator80.offset;
        int int87 = compositeTypeIterator80.type;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = (byte) 100;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.hector.CompositeListSerializer compositeListSerializer6 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        java.util.List<java.lang.Object> objList13 = comparators.Composite.deserialize(byteArray11);
        byte[] byteArray14 = comparators.Composite.serialize(objList13);
        java.util.stream.Stream<java.lang.Object> objStream15 = objList13.parallelStream();
        comparators.Composite composite16 = new comparators.Composite(objList13);
        byte[] byteArray17 = compositeListSerializer6.toBytes(objList13);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        byte[] byteArray26 = comparators.Composite.serialize(objList24);
        byte[] byteArray27 = compositeListSerializer6.toBytes(objList24);
        byte[] byteArray28 = null;
        java.util.List<java.lang.Object> objList29 = compositeListSerializer6.fromBytes(byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        boolean boolean38 = comparators.Composite.validate(0, byteArray35);
        java.util.List<java.lang.Object> objList39 = compositeListSerializer6.fromBytes(byteArray35);
        int int41 = compositeListSerializer6.computeInitialHashSize(15);
        comparators.CompositeType compositeType42 = new comparators.CompositeType();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.lang.Object[] objArray79 = composite78.toArray();
        int int80 = composite78.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream81 = composite78.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream82 = composite78.parallelStream();
        int int83 = composite78.startOffset;
        int int84 = composite64.compareTo(composite78);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray89 = new byte[] {};
        int int90 = comparators.Composite.compare(byteArray88, byteArray89);
        comparators.Composite composite91 = composite64.addBytes(byteArray89);
        java.nio.ByteBuffer byteBuffer92 = composite91.serializeToByteBuffer();
        compositeType49.validate(byteBuffer92);
        java.lang.String str94 = compositeType42.getString(byteBuffer92);
        java.util.List<java.lang.Object> objList95 = comparators.Composite.deserialize(byteBuffer92);
        java.nio.ByteBuffer byteBuffer96 = compositeListSerializer6.toByteBuffer(objList95);
        boolean boolean97 = placeholder0.equals((java.lang.Object) objList95);
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(objList13);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 21 + "'", int41 == 21);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(objList95);
        org.junit.Assert.assertNotNull(byteBuffer96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.stream();
        byte[] byteArray13 = composite9.bytes;
        comparators.Composite composite15 = composite9.addUTF8("Placeholder(0)");
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteBuffer53);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        comparators.Composite composite58 = composite9.addBytes(byteArray57);
        comparators.Composite composite60 = composite9.addBool(false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(composite60);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        java.lang.String str1 = placeholder0.toString();
        java.lang.String str2 = placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str4 = placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(100)" + "'", str1, "Placeholder(100)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Placeholder(100)" + "'", str2, "Placeholder(100)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(100)" + "'", str4, "Placeholder(100)");
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        int int82 = compositeTypeIterator80.type;
        compositeTypeIterator80.start = 19;
        compositeTypeIterator80.len = 8;
        int int87 = compositeTypeIterator80.start;
        byte[] byteArray88 = null;
        compositeTypeIterator80.bytes = byteArray88;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 19 + "'", int87 == 19);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        java.util.Iterator<java.lang.Object> objItor27 = composite9.iterator();
        int int28 = composite9.startOffset;
        java.io.DataOutput[] dataOutputArray29 = new java.io.DataOutput[] {};
        java.io.DataOutput[] dataOutputArray30 = composite9.toArray(dataOutputArray29);
        comparators.Composite composite31 = new comparators.Composite((java.lang.Object[]) dataOutputArray30);
        java.lang.Object[] objArray32 = composite31.toArray();
        comparators.hector.CompositeSerializer compositeSerializer33 = new comparators.hector.CompositeSerializer();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        int int46 = composite43.startOffset;
        byte[] byteArray47 = compositeSerializer33.toBytes(composite43);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        comparators.Composite composite63 = composite57.addBool(true);
        java.util.Iterator<java.lang.Object> objItor64 = composite57.iterator();
        comparators.Composite composite66 = composite57.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite68 = composite66.addLong((long) '#');
        byte[] byteArray69 = compositeSerializer33.toBytes(composite68);
        comparators.Composite composite71 = composite68.addReal((java.lang.Double) 1.0d);
        java.lang.Object[] objArray72 = composite71.toArray();
        java.lang.Object obj73 = null;
        boolean boolean74 = composite71.equals(obj73);
        comparators.Composite composite76 = composite71.addUTF8("UTF-8");
        comparators.Composite composite77 = new comparators.Composite();
        int int78 = composite77.size();
        boolean boolean79 = composite76.containsAll((java.util.Collection<java.lang.Object>) composite77);
        int int80 = composite31.compareTo(composite77);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objItor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dataOutputArray29);
        org.junit.Assert.assertNotNull(dataOutputArray30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(objItor64);
        org.junit.Assert.assertNotNull(composite66);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[true]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[true]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        int int41 = compositeListSerializer20.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.nio.ByteBuffer> byteBufferList62 = compositeListSerializer20.toBytesList(objListList61);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet63 = compositeListSerializer0.toBytesSet(objListList61);
        comparators.hector.CompositeListSerializer compositeListSerializer64 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator70 = compositeType65.indexComparator;
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator76 = compositeType65.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType71);
        comparators.CompositeType compositeType77 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray78 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList79 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79, byteBufferArray78);
        java.lang.String str81 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.lang.String str82 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.util.List<java.lang.Object>> objListList83 = compositeListSerializer64.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList79);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet84 = compositeListSerializer0.toBytesSet(objListList83);
        int int86 = compositeListSerializer0.computeInitialHashSize(71);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertNotNull(byteBufferList62);
        org.junit.Assert.assertNotNull(byteBufferSet63);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexInfoComparator70);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteBufferComparator76);
        org.junit.Assert.assertNotNull(compositeType77);
        org.junit.Assert.assertNotNull(byteBufferArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(objListList83);
        org.junit.Assert.assertNotNull(byteBufferSet84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 95 + "'", int86 == 95);
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer8 = compositeType0.fromString("Placeholder(6)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        byte[] byteArray27 = composite9.bytes;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite9.stream();
        comparators.Composite composite30 = composite9.addUTF8("434d500109000000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        comparators.Composite composite41 = composite39.addBool(true);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.util.RandomAccess[] randomAccessArray52 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray53 = composite51.toArray(randomAccessArray52);
        comparators.Composite composite55 = composite51.addLong((long) 67);
        comparators.Composite composite57 = composite55.addBool(true);
        java.io.DataOutputStream dataOutputStream58 = composite57.out;
        composite41.out = dataOutputStream58;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertNotNull(randomAccessArray53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(dataOutputStream58);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        java.util.List<java.lang.Object> objList10 = comparators.Composite.deserialize(byteArray8);
        byte[] byteArray11 = comparators.Composite.serialize(objList10);
        java.util.stream.Stream<java.lang.Object> objStream12 = objList10.parallelStream();
        comparators.Composite composite13 = new comparators.Composite(objList10);
        java.lang.Object[] objArray14 = composite13.toArray();
        int int15 = composite13.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream16 = composite13.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream17 = composite13.parallelStream();
        int int18 = composite13.startOffset;
        int int19 = composite13.startOffset;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        boolean boolean41 = composite13.containsAll((java.util.Collection<java.lang.Object>) composite29);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray42 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray43 = composite13.toArray(compositeListSerializerArray42);
        boolean boolean44 = placeholder0.equals((java.lang.Object) composite13);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.util.RandomAccess[] randomAccessArray55 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray56 = composite54.toArray(randomAccessArray55);
        comparators.Composite composite58 = composite54.addUTF8("UTF-8");
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        boolean boolean78 = comparators.Composite.validate((int) ' ', byteArray75, true);
        boolean boolean79 = composite69.contains((java.lang.Object) boolean78);
        java.util.stream.Stream<java.lang.Object> objStream80 = composite69.parallelStream();
        composite69.startOffset = 8;
        comparators.Composite composite84 = composite69.addAscii("hi!");
        comparators.Composite composite86 = composite69.addLong((long) 4);
        int int87 = composite86.size();
        java.lang.Object[] objArray88 = composite86.toArray();
        byte[] byteArray89 = comparators.Composite.serialize(objArray88);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator90 = composite13.new CompositeTypeIterator(composite54, (int) (byte) 1, byteArray89);
        java.io.DataOutputStream dataOutputStream91 = composite54.out;
        comparators.Composite composite93 = composite54.addAscii("80,6");
        composite54.startOffset = '4';
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(objList10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray42);
        org.junit.Assert.assertNotNull(compositeListSerializerArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(randomAccessArray55);
        org.junit.Assert.assertNotNull(randomAccessArray56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(dataOutputStream91);
        org.junit.Assert.assertNotNull(composite93);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = composite36.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteBuffer37);
        boolean boolean39 = comparators.Composite.validate(byteBuffer37);
        comparators.Composite composite40 = new comparators.Composite(byteBuffer37);
        boolean boolean42 = comparators.Composite.validate(byteBuffer37, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.util.Iterator<java.lang.Object> objItor17 = composite10.iterator();
        java.util.stream.Stream<java.lang.Object> objStream18 = composite10.stream();
        byte[] byteArray19 = composite10.bytes;
        boolean boolean20 = comparators.Composite.validate(77, byteArray19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        comparators.Composite composite10 = new comparators.Composite(objList6);
        byte[] byteArray11 = composite10.serialize();
        comparators.Composite composite13 = composite10.addLong(10L);
        comparators.Composite composite15 = composite10.addAscii("Placeholder(255)");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        boolean boolean69 = composite32.contains((java.lang.Object) composite57);
        boolean boolean70 = composite24.addAll((java.util.Collection<java.lang.Object>) composite32);
        int int71 = composite32.startOffset;
        boolean boolean72 = composite13.add((java.lang.Object) composite32);
        comparators.Composite composite74 = composite32.addUTF8("434d500103000000000000004300");
        int int75 = composite32.startOffset;
        composite32.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        compositeTypeIterator80.offset = (byte) -1;
        compositeTypeIterator80.len = 97;
        compositeTypeIterator80.start = (short) 10;
        int int96 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = compositeTypeIterator80.hasNext();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        comparators.Composite composite55 = composite49.addBool(true);
        java.util.Iterator<java.lang.Object> objItor56 = composite49.iterator();
        comparators.Composite composite58 = composite49.addReal((java.lang.Double) 100.0d);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        int int73 = composite68.startOffset;
        composite68.clear();
        boolean boolean75 = composite58.containsAll((java.util.Collection<java.lang.Object>) composite68);
        java.util.Iterator<java.lang.Object> objItor76 = composite58.iterator();
        boolean boolean77 = composite37.add((java.lang.Object) composite58);
        comparators.Composite composite79 = composite58.addBool(true);
        java.io.ByteArrayOutputStream byteArrayOutputStream80 = composite58.byteStream;
        comparators.Composite composite82 = composite58.addReal((java.lang.Double) 10.0d);
        composite82.startOffset = (short) 10;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(objItor56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteArrayOutputStream80);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream80.toString(), "CMP\001\002\001\000\004@Y\000\000\000\000\000\000\000\002\001\004@$\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(composite82);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        comparators.Composite composite1 = new comparators.Composite();
        java.lang.Object[] objArray2 = composite1.toArray();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite12.byteStream = byteArrayOutputStream15;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        int int34 = composite12.compareTo(composite26);
        java.lang.Object[][][] objArray35 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray36 = composite12.toArray(objArray35);
        java.util.Spliterator<java.lang.Object> objSpliterator37 = composite12.spliterator();
        int int38 = composite1.compareTo(composite12);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        comparators.Composite composite62 = composite48.addLong((long) 5);
        int int63 = composite62.size();
        boolean boolean64 = composite12.containsAll((java.util.Collection<java.lang.Object>) composite62);
        comparators.Composite composite65 = composite62.addMatchMinimum();
        byte[] byteArray66 = composite62.serialize();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize(1, byteArray66);
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(objSpliterator37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 5, 0, 1, 0]");
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        comparators.Composite composite78 = composite17.addUTF8("");
        comparators.Composite composite80 = composite17.addBool(true);
        composite17.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(composite80);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite9.stream();
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.util.RandomAccess[] randomAccessArray47 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray48 = composite46.toArray(randomAccessArray47);
        comparators.Composite composite50 = composite46.addLong((long) 67);
        byte[] byteArray51 = composite50.serialize();
        comparators.Composite composite53 = composite50.addAscii("Placeholder(58)");
        boolean boolean54 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite50);
        int int55 = composite9.startOffset;
        comparators.Composite composite57 = composite9.addLong((long) 47);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(randomAccessArray47);
        org.junit.Assert.assertNotNull(randomAccessArray48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(composite57);
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.io.DataOutputStream dataOutputStream18 = composite17.out;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        int int43 = composite38.startOffset;
        int int44 = comparators.Composite.compare(composite28, composite38);
        byte[] byteArray45 = composite28.bytes;
        composite28.clear();
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        java.lang.Object[] objArray57 = composite56.toArray();
        int int58 = composite56.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream59 = composite56.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream60 = composite56.parallelStream();
        int int61 = composite56.startOffset;
        composite56.clear();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        java.lang.Object[] objArray73 = composite72.toArray();
        int int74 = composite72.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream75 = null;
        composite72.byteStream = byteArrayOutputStream75;
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray81 = new byte[] {};
        int int82 = comparators.Composite.compare(byteArray80, byteArray81);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteArray81);
        byte[] byteArray84 = comparators.Composite.serialize(objList83);
        java.util.stream.Stream<java.lang.Object> objStream85 = objList83.parallelStream();
        comparators.Composite composite86 = new comparators.Composite(objList83);
        java.lang.Object[] objArray87 = composite86.toArray();
        int int88 = composite86.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream89 = composite86.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream90 = composite86.parallelStream();
        comparators.Composite composite92 = composite86.addBool(true);
        java.util.Iterator<java.lang.Object> objItor93 = composite86.iterator();
        int int94 = composite72.compareTo(composite86);
        boolean boolean95 = composite56.addAll((java.util.Collection<java.lang.Object>) composite72);
        comparators.Composite composite97 = composite56.addUTF8("");
        int int98 = composite28.compareTo(composite97);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = composite17.retainAll((java.util.Collection<java.lang.Object>) composite97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertNotNull(objStream90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(objItor93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(composite97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 58;
        int int88 = compositeTypeIterator80.start;
        int int89 = compositeTypeIterator80.type;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 67 + "'", int88 == 67);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        byte[] byteArray12 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray10);
        byte[] byteArray13 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray10);
        comparators.Composite composite14 = new comparators.Composite((java.lang.Object[]) randomAccessArray10);
        comparators.Composite composite15 = new comparators.Composite();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite15.compareTo(composite25);
        int int31 = composite15.startOffset;
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        comparators.Composite composite47 = composite41.addBool(true);
        java.util.Iterator<java.lang.Object> objItor48 = composite41.iterator();
        comparators.Composite composite49 = new comparators.Composite();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        int int64 = composite49.compareTo(composite59);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        boolean boolean83 = comparators.Composite.validate((int) ' ', byteArray80, true);
        boolean boolean84 = composite74.contains((java.lang.Object) boolean83);
        java.util.stream.Stream<java.lang.Object> objStream85 = composite74.parallelStream();
        boolean boolean86 = composite49.contains((java.lang.Object) composite74);
        boolean boolean87 = composite41.addAll((java.util.Collection<java.lang.Object>) composite49);
        int int88 = composite49.startOffset;
        java.lang.String str89 = composite49.toString();
        int int90 = comparators.Composite.compare(composite15, composite49);
        java.lang.String str91 = composite49.toString();
        comparators.Composite composite93 = composite49.addUTF8("Placeholder(255)");
        java.util.stream.Stream<java.lang.Object> objStream94 = composite93.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = composite14.remove((java.lang.Object) objStream94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(objItor48);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(objStream94);
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray19 = composite10.serialize();
        boolean boolean20 = comparators.Composite.isValidType((java.lang.Object) composite10);
        byte[] byteArray21 = composite10.bytes;
        comparators.Composite composite22 = composite10.addMatchMinimum();
        int int23 = composite22.size();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        java.util.stream.Stream<java.lang.Object> objStream55 = composite9.parallelStream();
        comparators.Composite composite57 = composite9.addUTF8("UTF-8");
        comparators.Composite composite59 = composite57.addLong((-1L));
        byte[] byteArray60 = composite59.serialize();
        java.util.UUID uUID61 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite62 = composite59.addTimeUUID(uUID61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(composite59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[67, 77, 80, 1, 8, 0, 5, 85, 84, 70, 45, 56, 3, -1, -1, -1, -1, -1, -1, -1, -1, 0]");
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.size();
        java.util.Spliterator<java.lang.Object> objSpliterator41 = composite9.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream42 = composite9.byteStream;
        comparators.Composite composite44 = composite9.addLong((long) (short) 100);
        java.io.DataOutputStream dataOutputStream45 = composite44.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objSpliterator41);
        org.junit.Assert.assertNull(byteArrayOutputStream42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(dataOutputStream45);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        comparators.Composite composite84 = compositeTypeIterator80.collection;
        int int85 = composite84.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        int int27 = composite26.size();
        java.lang.Object[] objArray28 = composite26.toArray();
        byte[] byteArray29 = comparators.Composite.serialize(objArray28);
        byte[] byteArray30 = comparators.Composite.serialize(objArray28);
        java.nio.ByteBuffer byteBuffer31 = comparators.Composite.serializeToByteBuffer(objArray28);
        java.nio.ByteBuffer byteBuffer32 = comparators.Composite.serializeToByteBuffer(objArray28);
        java.nio.ByteBuffer byteBuffer33 = comparators.Composite.serializeToByteBuffer(objArray28);
        boolean boolean34 = comparators.Composite.validate(byteBuffer33);
        boolean boolean35 = comparators.Composite.validate(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator23 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator24 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType0.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(indexInfoComparator23);
        org.junit.Assert.assertNotNull(indexInfoComparator24);
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(byteBufferComparator26);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator4 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType3);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator5 = compositeType3.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType3.indexComparator;
        comparators.hector.CompositeListSerializer compositeListSerializer7 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        byte[] byteArray18 = compositeListSerializer7.toBytes(objList14);
        int int20 = compositeListSerializer7.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer21 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator33 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType28);
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.lang.String str39 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.List<java.util.List<java.lang.Object>> objListList40 = compositeListSerializer21.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet41 = compositeListSerializer7.toBytesSet(objListList40);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator47 = compositeType42.indexComparator;
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray49 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList50 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50, byteBufferArray49);
        java.lang.String str52 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator53 = compositeType42.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType48);
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray55 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList56 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56, byteBufferArray55);
        java.lang.String str58 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        java.lang.String str59 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.lang.String str65 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.List<java.util.List<java.lang.Object>> objListList66 = compositeListSerializer7.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList62);
        java.lang.String str67 = compositeType3.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator68 = compositeType3.indexComparator;
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferComparator4);
        org.junit.Assert.assertNotNull(byteBufferComparator5);
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 43 + "'", int20 == 43);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteBufferComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(objListList40);
        org.junit.Assert.assertNotNull(byteBufferSet41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(indexInfoComparator47);
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteBufferArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteBufferComparator53);
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteBufferArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(objListList66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(indexInfoComparator68);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        byte[] byteArray77 = composite76.serialize();
        comparators.Composite composite78 = new comparators.Composite(byteArray77);
        java.lang.Object obj79 = null;
        boolean boolean80 = composite78.add(obj79);
        java.io.ByteArrayOutputStream byteArrayOutputStream81 = composite78.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(byteArrayOutputStream81);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        java.io.DataOutputStream dataOutputStream21 = composite9.out;
        java.lang.String str22 = composite9.toString();
        java.util.Iterator<java.lang.Object> objItor23 = composite9.iterator();
        java.util.UUID uUID24 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite25 = composite9.addLexicalUUID(uUID24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(dataOutputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objItor23);
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        int int2 = placeholder0.type;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str4 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(-1)" + "'", str4, "Placeholder(-1)");
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream18 = composite15.byteStream;
        java.util.stream.Stream<java.lang.Object> objStream19 = composite15.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        int int33 = comparators.Composite.compare(byteArray24, byteArray31);
        boolean boolean35 = comparators.Composite.validate(0, byteArray31, false);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray31);
        composite15.bytes = byteArray31;
        comparators.Composite composite39 = composite15.addAscii("UTF-8");
        java.lang.String str40 = composite15.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArrayOutputStream18);
        org.junit.Assert.assertEquals(byteArrayOutputStream18.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\007\000\005UTF-8\000");
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "true,6,UTF-8" + "'", str40, "true,6,UTF-8");
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        boolean boolean9 = comparators.Composite.validate((int) ' ', byteArray6, true);
        boolean boolean10 = comparators.Composite.validate(100, byteArray6);
        java.util.List<java.lang.Object> objList11 = comparators.Composite.deserialize(byteArray6);
        comparators.Composite composite12 = new comparators.Composite(objList11);
        java.util.UUID uUID13 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite14 = composite12.addTimeUUID(uUID13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objList11);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = (byte) 100;
        placeholder0.type = (short) 100;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        boolean boolean26 = comparators.Composite.validate((int) ' ', byteArray23, true);
        boolean boolean27 = composite17.contains((java.lang.Object) boolean26);
        java.util.stream.Stream<java.lang.Object> objStream28 = composite17.parallelStream();
        composite17.startOffset = 8;
        comparators.Composite composite32 = composite17.addAscii("hi!");
        java.lang.String str33 = composite17.toString();
        composite17.startOffset = 2;
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        boolean boolean45 = comparators.Composite.validate((int) ' ', byteArray42, true);
        boolean boolean46 = comparators.Composite.validate(100, byteArray42);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.util.RandomAccess[] randomAccessArray64 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray65 = composite63.toArray(randomAccessArray64);
        comparators.Composite composite67 = composite63.addLong((long) 67);
        byte[] byteArray68 = composite67.serialize();
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray68);
        int int70 = comparators.Composite.compare(byteArray51, byteArray68);
        int int71 = comparators.Composite.compare(byteArray42, byteArray68);
        composite17.bytes = byteArray42;
        comparators.Composite composite73 = new comparators.Composite(byteArray42);
        boolean boolean74 = placeholder0.equals((java.lang.Object) composite73);
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(randomAccessArray64);
        org.junit.Assert.assertNotNull(randomAccessArray65);
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        java.util.Spliterator<java.lang.Object> objSpliterator14 = composite9.spliterator();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream29 = null;
        composite26.byteStream = byteArrayOutputStream29;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        comparators.Composite composite46 = composite40.addBool(true);
        java.util.Iterator<java.lang.Object> objItor47 = composite40.iterator();
        int int48 = composite26.compareTo(composite40);
        java.lang.Object[][][] objArray49 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray50 = composite26.toArray(objArray49);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.util.RandomAccess[] randomAccessArray61 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray62 = composite60.toArray(randomAccessArray61);
        comparators.Composite composite64 = composite60.addLong((long) 67);
        byte[] byteArray65 = composite64.serialize();
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray65);
        comparators.Composite composite67 = composite26.addBytes(byteArray65);
        boolean boolean68 = comparators.Composite.validate(13, byteArray65);
        comparators.Composite composite69 = new comparators.Composite(byteArray65);
        boolean boolean70 = comparators.Composite.validate(100, byteArray65);
        composite9.bytes = byteArray65;
        comparators.Composite composite72 = new comparators.Composite(byteArray65);
        comparators.Composite composite73 = new comparators.Composite(byteArray65);
        java.util.logging.Logger[] loggerArray74 = new java.util.logging.Logger[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.util.logging.Logger[] loggerArray75 = composite73.toArray(loggerArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objSpliterator14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(objItor47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(randomAccessArray61);
        org.junit.Assert.assertNotNull(randomAccessArray62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(loggerArray74);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        composite18.startOffset = 114;
        java.lang.String str21 = composite18.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        byte[] byteArray33 = compositeListSerializer22.toBytes(objList29);
        int int35 = compositeListSerializer22.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer36 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType37 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray38 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList39 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39, byteBufferArray38);
        java.lang.String str41 = compositeType37.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator42 = compositeType37.indexComparator;
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = compositeType37.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType43);
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.lang.String str54 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.List<java.util.List<java.lang.Object>> objListList55 = compositeListSerializer36.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet56 = compositeListSerializer22.toBytesSet(objListList55);
        java.util.List<java.nio.ByteBuffer> byteBufferList57 = compositeListSerializer0.toBytesList(objListList55);
        int int59 = compositeListSerializer0.computeInitialHashSize(97);
        int int61 = compositeListSerializer0.computeInitialHashSize(71);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.util.RandomAccess[] randomAccessArray72 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray73 = composite71.toArray(randomAccessArray72);
        comparators.Composite composite75 = composite71.addLong((long) 67);
        byte[] byteArray76 = composite75.serialize();
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite composite78 = new comparators.Composite(objList77);
        java.nio.ByteBuffer byteBuffer79 = compositeListSerializer0.toByteBuffer(objList77);
        java.nio.ByteBuffer byteBuffer80 = comparators.Composite.serializeToByteBuffer(objList77);
        comparators.Composite composite81 = new comparators.Composite(objList77);
        int int82 = composite81.startOffset;
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 43 + "'", int35 == 43);
        org.junit.Assert.assertNotNull(compositeType37);
        org.junit.Assert.assertNotNull(byteBufferArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(indexInfoComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteBufferComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objListList55);
        org.junit.Assert.assertNotNull(byteBufferSet56);
        org.junit.Assert.assertNotNull(byteBufferList57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 130 + "'", int59 == 130);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 95 + "'", int61 == 95);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(randomAccessArray72);
        org.junit.Assert.assertNotNull(randomAccessArray73);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        comparators.Composite composite18 = composite9.addUTF8("Placeholder(100)");
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.util.RandomAccess[] randomAccessArray29 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray30 = composite28.toArray(randomAccessArray29);
        comparators.Composite composite32 = composite28.addUTF8("UTF-8");
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream46 = null;
        composite43.byteStream = byteArrayOutputStream46;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        comparators.Composite composite63 = composite57.addBool(true);
        java.util.Iterator<java.lang.Object> objItor64 = composite57.iterator();
        int int65 = composite43.compareTo(composite57);
        byte[] byteArray66 = composite57.bytes;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator67 = composite18.new CompositeTypeIterator(composite28, 455, byteArray66);
        java.util.Iterator<java.lang.Object> objItor68 = composite18.iterator();
        comparators.Composite composite70 = composite18.addBool(false);
        int int71 = composite70.size();
        comparators.Composite composite73 = composite70.addBool(false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(objItor64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objItor68);
        org.junit.Assert.assertNotNull(composite70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(composite73);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        compositeTypeIterator80.offset = (byte) -1;
        compositeTypeIterator80.len = 97;
        compositeTypeIterator80.start = (short) 10;
        int int96 = compositeTypeIterator80.type;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean45 = comparators.Composite.validate(1, byteArray43);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.nio.ByteBuffer byteBuffer48 = comparators.Composite.serializeToByteBuffer(objList46);
        comparators.Composite composite49 = new comparators.Composite(objList46);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer48);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        boolean boolean19 = comparators.Composite.validate((int) ' ', byteArray16, true);
        boolean boolean20 = composite10.contains((java.lang.Object) boolean19);
        java.util.Spliterator<java.lang.Object> objSpliterator21 = composite10.spliterator();
        comparators.Composite composite23 = composite10.addUTF8("Placeholder(100)");
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        int int37 = comparators.Composite.compare(byteArray28, byteArray35);
        boolean boolean39 = comparators.Composite.validate(0, byteArray35, false);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray35);
        composite23.bytes = byteArray35;
        comparators.Composite composite42 = new comparators.Composite(byteArray35);
        boolean boolean44 = comparators.Composite.validate(174, byteArray35, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objSpliterator21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        boolean boolean9 = comparators.Composite.validate((int) ' ', byteArray6, true);
        boolean boolean10 = comparators.Composite.validate(100, byteArray6);
        java.util.List<java.lang.Object> objList11 = comparators.Composite.deserialize(byteArray6);
        comparators.Composite composite12 = new comparators.Composite(byteArray6);
        java.util.stream.Stream<java.lang.Object> objStream13 = composite12.parallelStream();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objList11);
        org.junit.Assert.assertNotNull(objStream13);
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        java.lang.String str4 = placeholder0.toString();
        comparators.hector.CompositeSerializer compositeSerializer5 = new comparators.hector.CompositeSerializer();
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray10 = new byte[] {};
        int int11 = comparators.Composite.compare(byteArray9, byteArray10);
        java.util.List<java.lang.Object> objList12 = comparators.Composite.deserialize(byteArray10);
        byte[] byteArray13 = comparators.Composite.serialize(objList12);
        java.util.stream.Stream<java.lang.Object> objStream14 = objList12.parallelStream();
        comparators.Composite composite15 = new comparators.Composite(objList12);
        java.lang.Object[] objArray16 = composite15.toArray();
        int int17 = composite15.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream18 = composite15.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream19 = composite15.parallelStream();
        comparators.Composite composite21 = composite15.addBool(true);
        java.io.DataOutputStream dataOutputStream22 = composite15.out;
        byte[] byteArray23 = compositeSerializer5.toBytes(composite15);
        boolean boolean24 = placeholder0.equals((java.lang.Object) composite15);
        java.lang.String str25 = composite15.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 100 + "'", int1 == 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(6)" + "'", str4, "Placeholder(6)");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(objList12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(dataOutputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "true" + "'", str25, "true");
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        int int82 = compositeTypeIterator80.type;
        compositeTypeIterator80.start = 19;
        compositeTypeIterator80.len = 8;
        int int87 = compositeTypeIterator80.start;
        int int88 = compositeTypeIterator80.type;
        comparators.Composite composite89 = compositeTypeIterator80.collection;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 19 + "'", int87 == 19);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(composite89);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray13);
        byte[] byteArray16 = comparators.Composite.serialize(objList15);
        java.util.stream.Stream<java.lang.Object> objStream17 = objList15.parallelStream();
        comparators.Composite composite18 = new comparators.Composite(objList15);
        java.util.RandomAccess[] randomAccessArray19 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray20 = composite18.toArray(randomAccessArray19);
        comparators.Composite composite22 = composite18.addLong((long) 67);
        byte[] byteArray23 = composite22.serialize();
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray23);
        int int25 = comparators.Composite.compare(byteArray6, byteArray23);
        comparators.hector.CompositeSerializer compositeSerializer26 = new comparators.hector.CompositeSerializer();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        comparators.Composite composite42 = composite36.addBool(true);
        java.io.DataOutputStream dataOutputStream43 = composite36.out;
        byte[] byteArray44 = compositeSerializer26.toBytes(composite36);
        int int45 = comparators.Composite.compare(byteArray23, byteArray44);
        boolean boolean46 = comparators.Composite.validate(1, byteArray44);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize((int) (byte) 0, byteArray48);
        java.nio.ByteBuffer byteBuffer50 = comparators.Composite.serializeToByteBuffer(objList49);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(randomAccessArray20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(dataOutputStream43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNotNull(byteBuffer50);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        boolean boolean49 = comparators.Composite.validate(byteBuffer39, true);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteBuffer39);
        comparators.Composite composite51 = new comparators.Composite(objList50);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objList50);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        comparators.hector.CompositeSerializer compositeSerializer30 = new comparators.hector.CompositeSerializer();
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        comparators.Composite composite46 = composite40.addBool(true);
        java.io.DataOutputStream dataOutputStream47 = composite40.out;
        byte[] byteArray48 = compositeSerializer30.toBytes(composite40);
        byte[] byteArray51 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        int int65 = comparators.Composite.compare(byteArray56, byteArray63);
        int int66 = comparators.Composite.compare((int) (byte) 1, byteArray51, 10, byteArray56);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        int int79 = comparators.Composite.compare(byteArray70, byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        int int81 = comparators.Composite.compare(byteArray56, byteArray77);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator83 = composite23.new CompositeTypeIterator(composite40, 5, byteArray77);
        compositeTypeIterator83.offset = 13;
        int int86 = compositeTypeIterator83.offset;
        int int87 = compositeTypeIterator83.start;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(dataOutputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 13 + "'", int86 == 13);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        comparators.Composite composite17 = composite9.addBool(false);
        comparators.Composite composite19 = composite9.addBool(false);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(composite19);
        org.junit.Assert.assertNotNull(objStream20);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        comparators.CompositeType compositeType16 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray17 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList18 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18, byteBufferArray17);
        java.lang.String str20 = compositeType16.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator21 = compositeType16.indexComparator;
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator27 = compositeType16.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType22);
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.lang.String str33 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        int int63 = composite58.startOffset;
        int int64 = composite44.compareTo(composite58);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        comparators.Composite composite71 = composite44.addBytes(byteArray69);
        java.nio.ByteBuffer byteBuffer72 = composite71.serializeToByteBuffer();
        compositeType34.validate(byteBuffer72);
        java.lang.String str74 = compositeType22.getString(byteBuffer72);
        boolean boolean75 = composite10.contains((java.lang.Object) str74);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        java.util.stream.Stream<java.lang.Object> objStream84 = objList82.parallelStream();
        comparators.Composite composite85 = new comparators.Composite(objList82);
        java.lang.Object[] objArray86 = composite85.toArray();
        int int87 = composite85.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream88 = null;
        composite85.byteStream = byteArrayOutputStream88;
        composite85.startOffset = (byte) 1;
        int int92 = comparators.Composite.compare(composite10, composite85);
        java.lang.String[][] strArray93 = new java.lang.String[][] {};
        java.lang.String[][] strArray94 = composite85.toArray(strArray93);
        comparators.Composite composite95 = new comparators.Composite((java.lang.Object[]) strArray93);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(compositeType16);
        org.junit.Assert.assertNotNull(byteBufferArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(indexInfoComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteBufferComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite25.parallelStream();
        boolean boolean37 = composite25.isEmpty();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        boolean boolean51 = composite25.containsAll((java.util.Collection<java.lang.Object>) composite47);
        comparators.Composite composite53 = composite25.addLong((long) (short) 1);
        comparators.Composite composite55 = composite53.addBool(true);
        comparators.Composite composite57 = composite55.addBool(true);
        boolean boolean58 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite55);
        byte[] byteArray59 = composite55.serialize();
        java.lang.Object obj60 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = composite55.remove(obj60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 0]");
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator33 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator36 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType0.getReverseComparator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(byteBufferComparator33);
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(indexInfoComparator36);
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        comparators.Composite.Placeholder placeholder2 = comparators.Composite.MATCH_MAXIMUM;
        placeholder2.type = (short) 1;
        java.lang.String str5 = placeholder2.toString();
        boolean boolean7 = placeholder2.equals((java.lang.Object) 10L);
        boolean boolean8 = placeholder0.equals((java.lang.Object) boolean7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray13);
        byte[] byteArray16 = comparators.Composite.serialize(objList15);
        java.util.stream.Stream<java.lang.Object> objStream17 = objList15.parallelStream();
        comparators.Composite composite18 = new comparators.Composite(objList15);
        java.lang.Object[] objArray19 = composite18.toArray();
        int int20 = composite18.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream21 = null;
        composite18.byteStream = byteArrayOutputStream21;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        int int34 = composite32.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream35 = composite32.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream36 = composite32.parallelStream();
        comparators.Composite composite38 = composite32.addBool(true);
        java.util.Iterator<java.lang.Object> objItor39 = composite32.iterator();
        int int40 = composite18.compareTo(composite32);
        java.lang.Object[][][] objArray41 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray42 = composite18.toArray(objArray41);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.util.RandomAccess[] randomAccessArray53 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray54 = composite52.toArray(randomAccessArray53);
        comparators.Composite composite56 = composite52.addLong((long) 67);
        byte[] byteArray57 = composite56.serialize();
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray57);
        comparators.Composite composite59 = composite18.addBytes(byteArray57);
        java.util.Spliterator<java.lang.Object> objSpliterator60 = composite18.spliterator();
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize(byteArray65);
        byte[] byteArray68 = comparators.Composite.serialize(objList67);
        java.util.stream.Stream<java.lang.Object> objStream69 = objList67.parallelStream();
        comparators.Composite composite70 = new comparators.Composite(objList67);
        java.lang.Object[] objArray71 = composite70.toArray();
        int int72 = composite70.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream73 = composite70.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream74 = composite70.parallelStream();
        comparators.Composite composite76 = composite70.addBool(true);
        comparators.Composite composite78 = composite76.addLong((long) 6);
        java.io.DataOutputStream dataOutputStream79 = composite76.out;
        composite18.out = dataOutputStream79;
        boolean boolean81 = placeholder0.equals((java.lang.Object) dataOutputStream79);
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertNotNull(placeholder2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Placeholder(1)" + "'", str5, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(objItor39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(randomAccessArray53);
        org.junit.Assert.assertNotNull(randomAccessArray54);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNotNull(composite59);
        org.junit.Assert.assertNotNull(objSpliterator60);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(objList67);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(dataOutputStream79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        boolean boolean62 = composite9.equals((java.lang.Object) objList61);
        java.io.DataOutputStream dataOutputStream63 = composite9.out;
        java.io.ByteArrayOutputStream byteArrayOutputStream64 = composite9.byteStream;
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        int int75 = composite74.size();
        composite74.clear();
        int int77 = composite74.startOffset;
        java.lang.String str78 = composite74.toString();
        boolean boolean79 = composite9.addAll((java.util.Collection<java.lang.Object>) composite74);
        int int80 = composite9.startOffset;
        java.util.UUID uUID81 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite82 = composite9.addTimeUUID(uUID81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(dataOutputStream63);
        org.junit.Assert.assertNull(byteArrayOutputStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        org.apache.cassandra.db.IColumn[] iColumnArray50 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList51 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList51, iColumnArray50);
        java.lang.String str53 = compositeType45.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList51);
        java.lang.String str54 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType0.getReverseComparator();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        int int84 = composite79.startOffset;
        int int85 = composite65.compareTo(composite79);
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray90 = new byte[] {};
        int int91 = comparators.Composite.compare(byteArray89, byteArray90);
        comparators.Composite composite92 = composite65.addBytes(byteArray90);
        java.nio.ByteBuffer byteBuffer93 = composite92.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteBuffer93);
        java.util.List<java.lang.Object> objList95 = comparators.Composite.deserialize(byteBuffer93);
        java.lang.String str96 = compositeType0.getString(byteBuffer93);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(iColumnArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteBufferComparator55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNotNull(objList95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        boolean boolean32 = comparators.Composite.validate(0, byteArray29);
        java.util.List<java.lang.Object> objList33 = compositeListSerializer0.fromBytes(byteArray29);
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator39 = compositeType34.indexComparator;
        boolean boolean40 = comparators.Composite.isValidType((java.lang.Object) compositeType34);
        org.apache.cassandra.db.IColumn[] iColumnArray41 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList42 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList42, iColumnArray41);
        java.lang.String str44 = compositeType34.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList42);
        comparators.CompositeType compositeType45 = new comparators.CompositeType();
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        java.lang.Object[] objArray57 = composite56.toArray();
        int int58 = composite56.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream59 = composite56.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream60 = composite56.parallelStream();
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize(byteArray65);
        byte[] byteArray68 = comparators.Composite.serialize(objList67);
        java.util.stream.Stream<java.lang.Object> objStream69 = objList67.parallelStream();
        comparators.Composite composite70 = new comparators.Composite(objList67);
        java.lang.Object[] objArray71 = composite70.toArray();
        int int72 = composite70.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream73 = composite70.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream74 = composite70.parallelStream();
        int int75 = composite70.startOffset;
        int int76 = composite56.compareTo(composite70);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray81 = new byte[] {};
        int int82 = comparators.Composite.compare(byteArray80, byteArray81);
        comparators.Composite composite83 = composite56.addBytes(byteArray81);
        java.nio.ByteBuffer byteBuffer84 = composite83.serializeToByteBuffer();
        compositeType46.validate(byteBuffer84);
        boolean boolean86 = comparators.Composite.validate(byteBuffer84);
        comparators.Composite composite87 = new comparators.Composite(byteBuffer84);
        java.nio.ByteBuffer byteBuffer88 = null;
        int int89 = compositeType45.compare(byteBuffer84, byteBuffer88);
        comparators.Composite composite90 = new comparators.Composite(byteBuffer84);
        comparators.Composite composite91 = new comparators.Composite(byteBuffer84);
        java.lang.String str92 = compositeType34.getString(byteBuffer84);
        java.util.List<java.lang.Object> objList93 = compositeListSerializer0.fromByteBuffer(byteBuffer84);
        java.util.Spliterator<java.lang.Object> objSpliterator94 = objList93.spliterator();
        java.nio.ByteBuffer byteBuffer95 = comparators.Composite.serializeToByteBuffer(objList93);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(indexInfoComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(iColumnArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(objList67);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(objList93);
        org.junit.Assert.assertNotNull(objSpliterator94);
        org.junit.Assert.assertNotNull(byteBuffer95);
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addUTF8("UTF-8");
        int int14 = composite13.size();
        comparators.Composite composite16 = composite13.addBool(false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(composite16);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        boolean boolean11 = comparators.Composite.validate((int) ' ', byteArray8, true);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        boolean boolean21 = comparators.Composite.validate((int) (short) 100, byteArray17, false);
        int int22 = comparators.Composite.compare(byteArray8, byteArray17);
        boolean boolean24 = comparators.Composite.validate((int) '#', byteArray8, true);
        boolean boolean26 = comparators.Composite.validate(0, byteArray8, true);
        boolean boolean28 = comparators.Composite.validate(311, byteArray8, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        boolean boolean92 = compositeTypeIterator91.hasNext();
        byte[] byteArray93 = compositeTypeIterator91.bytes;
        comparators.Composite composite94 = compositeTypeIterator91.collection;
        comparators.Composite composite95 = compositeTypeIterator91.collection;
        comparators.Composite composite96 = compositeTypeIterator91.collection;
        int int97 = compositeTypeIterator91.offset;
        byte[] byteArray98 = compositeTypeIterator91.bytes;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj99 = compositeTypeIterator91.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertNotNull(composite95);
        org.junit.Assert.assertNotNull(composite96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 101 + "'", int97 == 101);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[]");
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        java.lang.String str4 = placeholder0.toString();
        placeholder0.type = 77;
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        java.util.List<java.lang.Object> objList13 = comparators.Composite.deserialize(byteArray11);
        byte[] byteArray14 = comparators.Composite.serialize(objList13);
        java.util.stream.Stream<java.lang.Object> objStream15 = objList13.parallelStream();
        comparators.Composite composite16 = new comparators.Composite(objList13);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        boolean boolean25 = comparators.Composite.validate((int) ' ', byteArray22, true);
        boolean boolean26 = composite16.contains((java.lang.Object) boolean25);
        java.util.stream.Stream<java.lang.Object> objStream27 = composite16.parallelStream();
        composite16.startOffset = 8;
        comparators.Composite composite31 = composite16.addAscii("hi!");
        comparators.Composite composite33 = composite16.addLong((long) 4);
        int int34 = composite33.size();
        boolean boolean35 = placeholder0.equals((java.lang.Object) composite33);
        java.lang.String str36 = placeholder0.toString();
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(6)" + "'", str4, "Placeholder(6)");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(objList13);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Placeholder(77)" + "'", str36, "Placeholder(77)");
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 1;
        int int84 = compositeTypeIterator80.start;
        int int85 = compositeTypeIterator80.type;
        int int86 = compositeTypeIterator80.start;
        int int87 = compositeTypeIterator80.offset;
        compositeTypeIterator80.len = (short) 100;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        composite25.startOffset = 1;
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        comparators.Composite composite54 = composite48.addBool(true);
        java.io.DataOutputStream dataOutputStream55 = composite48.out;
        composite25.out = dataOutputStream55;
        composite0.out = dataOutputStream55;
        comparators.Composite composite59 = composite0.addAscii("434d500103000000000000004300");
        java.util.UUID uUID60 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite61 = composite0.addTimeUUID(uUID60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(dataOutputStream55);
        org.junit.Assert.assertNotNull(composite59);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        composite9.startOffset = (byte) 10;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite12 = new comparators.Composite((java.lang.Object[]) randomAccessArray11);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator18 = compositeType13.indexComparator;
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray20 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList21 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21, byteBufferArray20);
        java.lang.String str23 = compositeType19.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator24 = compositeType13.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator25 = compositeType19.reversed();
        boolean boolean26 = composite12.contains((java.lang.Object) byteBufferComparator25);
        java.util.UUID uUID27 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite28 = composite12.addLexicalUUID(uUID27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(indexInfoComparator18);
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteBufferArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteBufferComparator24);
        org.junit.Assert.assertNotNull(byteBufferComparator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        int int2 = compositeSerializer0.computeInitialHashSize(43);
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        int int17 = composite12.startOffset;
        comparators.hector.CompositeListSerializer compositeListSerializer18 = new comparators.hector.CompositeListSerializer();
        boolean boolean19 = composite12.contains((java.lang.Object) compositeListSerializer18);
        comparators.CompositeType compositeType20 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator21 = compositeType20.indexComparator;
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator23 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType22);
        comparators.hector.CompositeListSerializer compositeListSerializer24 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        byte[] byteArray32 = comparators.Composite.serialize(objList31);
        java.util.stream.Stream<java.lang.Object> objStream33 = objList31.parallelStream();
        comparators.Composite composite34 = new comparators.Composite(objList31);
        byte[] byteArray35 = compositeListSerializer24.toBytes(objList31);
        int int37 = compositeListSerializer24.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator44 = compositeType39.indexComparator;
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType39.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType45);
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str56 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.List<java.util.List<java.lang.Object>> objListList57 = compositeListSerializer38.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList53);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet58 = compositeListSerializer24.toBytesSet(objListList57);
        java.lang.String str59 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferSet58);
        java.util.List<java.util.List<java.lang.Object>> objListList60 = compositeListSerializer18.fromBytesSet(byteBufferSet58);
        java.util.List<comparators.Composite> compositeList61 = compositeSerializer0.fromBytesSet(byteBufferSet58);
        byte[] byteArray62 = null;
        comparators.Composite composite63 = compositeSerializer0.fromBytes(byteArray62);
        int int65 = compositeSerializer0.computeInitialHashSize((int) '#');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 58 + "'", int2 == 58);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferComparator23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 43 + "'", int37 == 43);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(indexInfoComparator44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objListList57);
        org.junit.Assert.assertNotNull(byteBufferSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(objListList60);
        org.junit.Assert.assertNotNull(compositeList61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 47 + "'", int65 == 47);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray19 = composite10.serialize();
        boolean boolean20 = comparators.Composite.isValidType((java.lang.Object) composite10);
        byte[] byteArray21 = composite10.bytes;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        boolean boolean30 = comparators.Composite.validate((int) ' ', byteArray27, true);
        comparators.Composite composite31 = composite10.addBytes(byteArray27);
        comparators.Composite composite33 = composite10.addAscii("Placeholder(70)");
        java.util.UUID uUID34 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite35 = composite33.addTimeUUID(uUID34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(composite33);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        java.nio.ByteBuffer byteBuffer27 = composite26.serializeToByteBuffer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        boolean boolean35 = comparators.Composite.isValidType((java.lang.Object) compositeType29);
        comparators.CompositeType compositeType36 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType36.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType36);
        comparators.CompositeType compositeType39 = new comparators.CompositeType();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream54 = composite50.parallelStream();
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        int int69 = composite64.startOffset;
        int int70 = composite50.compareTo(composite64);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        comparators.Composite composite77 = composite50.addBytes(byteArray75);
        java.nio.ByteBuffer byteBuffer78 = composite77.serializeToByteBuffer();
        compositeType40.validate(byteBuffer78);
        boolean boolean80 = comparators.Composite.validate(byteBuffer78);
        comparators.Composite composite81 = new comparators.Composite(byteBuffer78);
        java.nio.ByteBuffer byteBuffer82 = null;
        int int83 = compositeType39.compare(byteBuffer78, byteBuffer82);
        comparators.Composite composite84 = new comparators.Composite(byteBuffer78);
        comparators.Composite composite85 = new comparators.Composite(byteBuffer78);
        java.lang.String str86 = compositeType29.getString(byteBuffer78);
        compositeType28.validate(byteBuffer78);
        int int88 = comparators.Composite.compare(byteBuffer27, byteBuffer78);
        comparators.Composite composite89 = new comparators.Composite(byteBuffer27);
        boolean boolean91 = comparators.Composite.validate(byteBuffer27, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        boolean boolean48 = comparators.Composite.validate(byteBuffer39);
        boolean boolean50 = comparators.Composite.validate(byteBuffer39, true);
        boolean boolean52 = comparators.Composite.validate(byteBuffer39, false);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer39);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addUTF8("UTF-8");
        comparators.Composite composite15 = composite9.addBool(true);
        java.lang.Object obj16 = null;
        boolean boolean17 = composite15.equals(obj16);
        composite15.startOffset = 70;
        comparators.Composite composite21 = composite15.addLong((long) 7);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(composite21);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType6.reversed();
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        int int42 = composite37.startOffset;
        int int43 = composite23.compareTo(composite37);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        comparators.Composite composite50 = composite23.addBytes(byteArray48);
        java.nio.ByteBuffer byteBuffer51 = composite50.serializeToByteBuffer();
        compositeType13.validate(byteBuffer51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteBuffer51);
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.lang.Object[] objArray79 = composite78.toArray();
        int int80 = composite78.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream81 = composite78.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream82 = composite78.parallelStream();
        int int83 = composite78.startOffset;
        int int84 = composite64.compareTo(composite78);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray89 = new byte[] {};
        int int90 = comparators.Composite.compare(byteArray88, byteArray89);
        comparators.Composite composite91 = composite64.addBytes(byteArray89);
        java.nio.ByteBuffer byteBuffer92 = composite91.serializeToByteBuffer();
        compositeType54.validate(byteBuffer92);
        int int94 = comparators.Composite.compare(byteBuffer51, byteBuffer92);
        java.lang.String str95 = compositeType6.getString(byteBuffer92);
        comparators.Composite composite96 = new comparators.Composite(byteBuffer92);
        comparators.Composite composite97 = new comparators.Composite(byteBuffer92);
        java.lang.String str98 = composite97.toString();
        java.nio.ByteBuffer byteBuffer99 = composite97.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertNotNull(byteBuffer99);
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        java.util.Iterator<java.lang.Object> objItor39 = composite33.iterator();
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite33.spliterator();
        comparators.Composite composite42 = composite33.addBool(false);
        comparators.Composite composite44 = composite42.addAscii("Placeholder(10)");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objItor39);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(composite44);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        composite9.startOffset = 1;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        int int34 = composite32.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream35 = composite32.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream36 = composite32.parallelStream();
        comparators.Composite composite38 = composite32.addBool(true);
        java.io.DataOutputStream dataOutputStream39 = composite32.out;
        composite9.out = dataOutputStream39;
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream54 = composite50.parallelStream();
        int int55 = composite50.startOffset;
        int int56 = composite50.startOffset;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        boolean boolean75 = comparators.Composite.validate((int) ' ', byteArray72, true);
        boolean boolean76 = composite66.contains((java.lang.Object) boolean75);
        java.util.Spliterator<java.lang.Object> objSpliterator77 = composite66.spliterator();
        boolean boolean78 = composite50.containsAll((java.util.Collection<java.lang.Object>) composite66);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray79 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray80 = composite50.toArray(compositeListSerializerArray79);
        comparators.Composite composite82 = composite50.addLong((long) (short) 100);
        boolean boolean83 = composite9.contains((java.lang.Object) composite82);
        comparators.Composite composite85 = composite82.addAscii("100");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(dataOutputStream39);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray79);
        org.junit.Assert.assertNotNull(compositeListSerializerArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(composite85);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        comparators.hector.CompositeListSerializer compositeListSerializer40 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator46 = compositeType41.indexComparator;
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator52 = compositeType41.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType47);
        comparators.CompositeType compositeType53 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray54 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList55 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55, byteBufferArray54);
        java.lang.String str57 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.lang.String str58 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.util.List<java.util.List<java.lang.Object>> objListList59 = compositeListSerializer40.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList55);
        int int61 = compositeListSerializer40.computeInitialHashSize(9);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray72 = compositeListSerializer40.toBytes(objList68);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray77);
        byte[] byteArray80 = comparators.Composite.serialize(objList79);
        java.util.stream.Stream<java.lang.Object> objStream81 = objList79.parallelStream();
        comparators.Composite composite82 = new comparators.Composite(objList79);
        java.util.RandomAccess[] randomAccessArray83 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray84 = composite82.toArray(randomAccessArray83);
        comparators.Composite composite86 = composite82.addLong((long) 67);
        byte[] byteArray87 = composite86.serialize();
        java.util.List<java.lang.Object> objList88 = comparators.Composite.deserialize(byteArray87);
        java.nio.ByteBuffer byteBuffer89 = compositeListSerializer40.toByteBuffer(objList88);
        comparators.Composite composite90 = new comparators.Composite(byteBuffer89);
        boolean boolean91 = composite37.containsAll((java.util.Collection<java.lang.Object>) composite90);
        composite90.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(indexInfoComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteBufferComparator52);
        org.junit.Assert.assertNotNull(compositeType53);
        org.junit.Assert.assertNotNull(byteBufferArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objListList59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 13 + "'", int61 == 13);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(randomAccessArray83);
        org.junit.Assert.assertNotNull(randomAccessArray84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray19 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList20 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20, byteBufferArray19);
        java.lang.String str22 = compositeType18.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        org.apache.cassandra.db.IColumn[] iColumnArray23 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList24 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList24, iColumnArray23);
        java.lang.String str26 = compositeType18.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList24);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator27 = compositeType18.getReverseComparator();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        org.apache.cassandra.db.IColumn[] iColumnArray33 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList34 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList34, iColumnArray33);
        java.lang.String str36 = compositeType28.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList34);
        java.lang.String str37 = compositeType18.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList34);
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator44 = compositeType39.indexComparator;
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType39.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType45);
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str56 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.List<java.util.List<java.lang.Object>> objListList57 = compositeListSerializer38.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str58 = compositeType18.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str59 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        boolean boolean78 = comparators.Composite.validate((int) ' ', byteArray75, true);
        boolean boolean79 = composite69.contains((java.lang.Object) boolean78);
        java.util.stream.Stream<java.lang.Object> objStream80 = composite69.parallelStream();
        composite69.startOffset = 8;
        comparators.Composite composite84 = composite69.addAscii("hi!");
        comparators.Composite composite86 = composite69.addLong((long) 4);
        int int87 = composite86.size();
        java.lang.Object[] objArray88 = composite86.toArray();
        byte[] byteArray89 = comparators.Composite.serialize(objArray88);
        byte[] byteArray90 = comparators.Composite.serialize(objArray88);
        java.nio.ByteBuffer byteBuffer91 = comparators.Composite.serializeToByteBuffer(objArray88);
        boolean boolean93 = comparators.Composite.validate(byteBuffer91, false);
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteBuffer91);
        java.nio.ByteBuffer byteBuffer95 = comparators.Composite.serializeToByteBuffer(objList94);
        java.lang.String str96 = compositeType6.getString(byteBuffer95);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteBufferArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(iColumnArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteBufferComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(iColumnArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(indexInfoComparator44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objListList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNotNull(byteBuffer95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "hi!,4" + "'", str96, "hi!,4");
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 3;
        int int84 = compositeTypeIterator80.start;
        int int85 = compositeTypeIterator80.len;
        compositeTypeIterator80.len = 29;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        int int15 = comparators.Composite.compare(byteArray6, byteArray13);
        int int16 = comparators.Composite.compare((int) (byte) 1, byteArray1, 10, byteArray6);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.util.RandomAccess[] randomAccessArray27 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray28 = composite26.toArray(randomAccessArray27);
        comparators.Composite composite30 = composite26.addLong((long) 67);
        byte[] byteArray31 = composite30.serialize();
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray31);
        int int33 = comparators.Composite.compare(byteArray1, byteArray31);
        comparators.Composite composite34 = new comparators.Composite(byteArray31);
        java.lang.Object obj35 = null;
        boolean boolean36 = composite34.equals(obj35);
        java.lang.CharSequence[][] charSequenceArray37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence[][] charSequenceArray38 = composite34.toArray(charSequenceArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(randomAccessArray27);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        compositeTypeIterator80.start = 35;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        int int28 = comparators.Composite.compare(byteArray19, byteArray26);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray26);
        composite11.bytes = byteArray26;
        boolean boolean31 = comparators.Composite.validate(1, byteArray26);
        boolean boolean32 = comparators.Composite.validate(455, byteArray26);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        comparators.Composite composite34 = composite25.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer35 = compositeSerializer0.toByteBuffer(composite34);
        int int37 = compositeSerializer0.computeInitialHashSize(0);
        int int39 = compositeSerializer0.computeInitialHashSize(67);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        boolean boolean58 = comparators.Composite.validate((int) ' ', byteArray55, true);
        boolean boolean59 = composite49.contains((java.lang.Object) boolean58);
        java.util.Spliterator<java.lang.Object> objSpliterator60 = composite49.spliterator();
        byte[] byteArray61 = composite49.bytes;
        comparators.Composite composite63 = composite49.addLong((long) 5);
        byte[] byteArray64 = compositeSerializer0.toBytes(composite49);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objSpliterator60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 5, 0]");
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator33 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator36 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator38 = compositeType0.indexComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(byteBufferComparator33);
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(indexInfoComparator36);
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(indexInfoComparator38);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        int int88 = compositeTypeIterator80.type;
        compositeTypeIterator80.start = 14;
        int int91 = compositeTypeIterator80.type;
        compositeTypeIterator80.offset = 47;
        int int94 = compositeTypeIterator80.type;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.nio.ByteBuffer> byteBufferList42 = compositeListSerializer0.toBytesList(objListList41);
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType44 = new comparators.CompositeType();
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        java.lang.Object[] objArray70 = composite69.toArray();
        int int71 = composite69.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream73 = composite69.parallelStream();
        int int74 = composite69.startOffset;
        int int75 = composite55.compareTo(composite69);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        comparators.Composite composite82 = composite55.addBytes(byteArray80);
        java.nio.ByteBuffer byteBuffer83 = composite82.serializeToByteBuffer();
        compositeType45.validate(byteBuffer83);
        boolean boolean85 = comparators.Composite.validate(byteBuffer83);
        comparators.Composite composite86 = new comparators.Composite(byteBuffer83);
        java.nio.ByteBuffer byteBuffer87 = null;
        int int88 = compositeType44.compare(byteBuffer83, byteBuffer87);
        compositeType43.validate(byteBuffer83);
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteBuffer83);
        java.nio.ByteBuffer byteBuffer91 = compositeListSerializer0.toByteBuffer(objList90);
        comparators.Composite composite92 = new comparators.Composite(objList90);
        java.util.stream.Stream<java.lang.Object> objStream93 = objList90.parallelStream();
        java.nio.ByteBuffer byteBuffer94 = comparators.Composite.serializeToByteBuffer(objList90);
        java.nio.ByteBuffer byteBuffer95 = comparators.Composite.serializeToByteBuffer(objList90);
        boolean boolean96 = comparators.Composite.validate(byteBuffer95);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(byteBufferList42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(objStream93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(byteBuffer95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        java.util.Spliterator<java.lang.Object> objSpliterator46 = composite45.spliterator();
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        java.util.RandomAccess[] randomAccessArray57 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray58 = composite56.toArray(randomAccessArray57);
        comparators.Composite composite60 = composite56.addLong((long) 67);
        comparators.Composite composite62 = composite60.addBool(true);
        int int63 = comparators.Composite.compare(composite45, composite60);
        java.util.Spliterator<java.lang.Object> objSpliterator64 = composite45.spliterator();
        java.lang.Class<?> wildcardClass65 = composite45.getClass();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objSpliterator46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(randomAccessArray57);
        org.junit.Assert.assertNotNull(randomAccessArray58);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objSpliterator64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexReverseComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator11 = compositeType6.indexComparator;
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator17 = compositeType6.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType12);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray19 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList20 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20, byteBufferArray19);
        java.lang.String str22 = compositeType18.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        java.lang.String str23 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        byte[] byteArray32 = comparators.Composite.serialize(objList31);
        java.util.stream.Stream<java.lang.Object> objStream33 = objList31.parallelStream();
        comparators.Composite composite34 = new comparators.Composite(objList31);
        java.lang.Object[] objArray35 = composite34.toArray();
        int int36 = composite34.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream37 = composite34.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream38 = composite34.parallelStream();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        int int53 = composite48.startOffset;
        int int54 = composite34.compareTo(composite48);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        comparators.Composite composite61 = composite34.addBytes(byteArray59);
        java.nio.ByteBuffer byteBuffer62 = composite61.serializeToByteBuffer();
        compositeType24.validate(byteBuffer62);
        java.lang.String str64 = compositeType12.getString(byteBuffer62);
        comparators.Composite composite65 = new comparators.Composite(byteBuffer62);
        compositeType0.validate(byteBuffer62);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator67 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator68 = compositeType0.getReverseComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer70 = compositeType0.fromString("67,true,2,32");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(indexInfoComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteBufferComparator17);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteBufferArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(indexInfoComparator67);
        org.junit.Assert.assertNotNull(byteBufferComparator68);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        int int26 = composite25.size();
        boolean boolean27 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray28 = composite9.bytes;
        comparators.Composite.Placeholder placeholder29 = comparators.Composite.MATCH_MINIMUM;
        comparators.Composite.MATCH_MAXIMUM = placeholder29;
        placeholder29.type = 'a';
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        boolean boolean42 = comparators.Composite.validate(0, byteArray39);
        boolean boolean44 = comparators.Composite.validate((int) 'a', byteArray39, true);
        boolean boolean45 = placeholder29.equals((java.lang.Object) byteArray39);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray39);
        comparators.Composite composite47 = composite9.addBytes(byteArray39);
        composite9.clear();
        int int49 = composite9.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(placeholder29);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        java.util.stream.Stream<java.lang.Object> objStream75 = composite17.parallelStream();
        comparators.Composite composite77 = composite17.addUTF8("Placeholder(97)");
        java.lang.Object[] objArray78 = composite17.toArray();
        java.nio.ByteBuffer byteBuffer79 = comparators.Composite.serializeToByteBuffer(objArray78);
        boolean boolean80 = comparators.Composite.validate(byteBuffer79);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[80, Placeholder(97)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[80, Placeholder(97)]");
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        comparators.Composite composite36 = composite30.addBool(true);
        java.io.DataOutputStream dataOutputStream37 = composite30.out;
        composite9.out = dataOutputStream37;
        java.util.UUID uUID39 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite40 = composite9.addTimeUUID(uUID39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(dataOutputStream37);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        boolean boolean40 = comparators.Composite.validate((int) ' ', byteArray37, true);
        boolean boolean41 = composite31.contains((java.lang.Object) boolean40);
        java.util.stream.Stream<java.lang.Object> objStream42 = composite31.parallelStream();
        composite31.startOffset = 8;
        comparators.Composite composite46 = composite31.addAscii("hi!");
        boolean boolean47 = comparators.Composite.isValidType((java.lang.Object) composite31);
        boolean boolean48 = composite31.isEmpty();
        byte[] byteArray51 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        int int65 = comparators.Composite.compare(byteArray56, byteArray63);
        int int66 = comparators.Composite.compare((int) (byte) 1, byteArray51, 10, byteArray56);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        java.util.List<java.lang.Object> objList74 = comparators.Composite.deserialize(byteArray72);
        boolean boolean75 = comparators.Composite.validate(0, byteArray72);
        byte[] byteArray76 = null;
        int int77 = comparators.Composite.compare(byteArray72, byteArray76);
        int int78 = comparators.Composite.compare(byteArray56, byteArray72);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator79 = composite9.new CompositeTypeIterator(composite31, 185, byteArray56);
        int int80 = compositeTypeIterator79.start;
        boolean boolean81 = compositeTypeIterator79.hasNext();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 185 + "'", int80 == 185);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        java.util.stream.Stream<java.lang.Object> objStream55 = composite9.parallelStream();
        comparators.Composite composite57 = composite9.addUTF8("UTF-8");
        comparators.Composite composite59 = composite57.addLong((-1L));
        java.util.stream.Stream<java.lang.Object> objStream60 = composite59.parallelStream();
        java.lang.Object[] objArray61 = composite59.toArray();
        int int62 = composite59.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(composite59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[UTF-8, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[UTF-8, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        int int50 = composite45.startOffset;
        composite45.clear();
        boolean boolean52 = composite9.equals((java.lang.Object) composite45);
        byte[] byteArray53 = composite9.bytes;
        int int54 = composite9.size();
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        byte[] byteArray67 = composite64.bytes;
        java.io.DataOutputStream dataOutputStream68 = null;
        composite64.out = dataOutputStream68;
        java.io.ByteArrayOutputStream byteArrayOutputStream70 = null;
        composite64.byteStream = byteArrayOutputStream70;
        java.util.Iterator<java.lang.Object> objItor72 = composite64.iterator();
        java.util.Iterator<java.lang.Object> objItor73 = composite64.iterator();
        comparators.Composite composite75 = composite64.addAscii("US-ASCII");
        int int76 = composite75.startOffset;
        boolean boolean77 = composite9.addAll((java.util.Collection<java.lang.Object>) composite75);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objItor72);
        org.junit.Assert.assertNotNull(objItor73);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        java.lang.Object[] objArray16 = composite9.toArray();
        byte[] byteArray17 = comparators.Composite.serialize(objArray16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNull(byteArray17);
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        comparators.Composite composite40 = new comparators.Composite();
        comparators.Composite composite42 = composite40.addUTF8("Placeholder(58)");
        comparators.Composite composite44 = composite42.addLong((long) (-1));
        boolean boolean45 = composite9.equals((java.lang.Object) composite44);
        byte[] byteArray46 = composite9.bytes;
        java.util.UUID uUID47 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite48 = composite9.addLexicalUUID(uUID47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(byteArray46);
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        int int36 = composite18.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream37 = composite18.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(objStream37);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        comparators.hector.CompositeSerializer compositeSerializer16 = new comparators.hector.CompositeSerializer();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.io.DataOutputStream dataOutputStream33 = composite26.out;
        byte[] byteArray34 = compositeSerializer16.toBytes(composite26);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        comparators.Composite composite50 = composite44.addBool(true);
        comparators.Composite composite52 = composite50.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream53 = composite50.byteStream;
        java.nio.ByteBuffer byteBuffer54 = compositeSerializer16.toByteBuffer(composite50);
        boolean boolean55 = composite10.equals((java.lang.Object) compositeSerializer16);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        int int68 = composite65.startOffset;
        java.lang.Object[] objArray69 = composite65.toArray();
        comparators.Composite composite71 = composite65.addLong((long) (byte) -1);
        int int72 = composite71.startOffset;
        composite71.startOffset = 47;
        java.nio.ByteBuffer byteBuffer75 = compositeSerializer16.toByteBuffer(composite71);
        int int77 = compositeSerializer16.computeInitialHashSize(455);
        int int79 = compositeSerializer16.computeInitialHashSize(181);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(dataOutputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteArrayOutputStream53);
        org.junit.Assert.assertEquals(byteArrayOutputStream53.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 607 + "'", int77 == 607);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 242 + "'", int79 == 242);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.util.Iterator<java.lang.Object> objItor60 = composite59.iterator();
        comparators.Composite.Placeholder placeholder61 = comparators.Composite.MATCH_MAXIMUM;
        int int62 = placeholder61.type;
        placeholder61.type = 6;
        boolean boolean65 = composite59.contains((java.lang.Object) placeholder61);
        comparators.Composite.MATCH_MINIMUM = placeholder61;
        java.lang.String str67 = placeholder61.toString();
        int int68 = placeholder61.type;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objItor60);
        org.junit.Assert.assertNotNull(placeholder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Placeholder(6)" + "'", str67, "Placeholder(6)");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        comparators.Composite composite36 = composite30.addBool(true);
        java.io.DataOutputStream dataOutputStream37 = composite30.out;
        composite9.out = dataOutputStream37;
        byte[] byteArray39 = composite9.serialize();
        comparators.Composite composite41 = composite9.addAscii("Placeholder(77)");
        java.util.Spliterator<java.lang.Object> objSpliterator42 = composite41.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(dataOutputStream37);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(objSpliterator42);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        boolean boolean69 = composite32.contains((java.lang.Object) composite57);
        boolean boolean70 = composite24.addAll((java.util.Collection<java.lang.Object>) composite32);
        int int71 = composite32.startOffset;
        boolean boolean72 = composite13.add((java.lang.Object) composite32);
        comparators.Composite composite74 = composite13.addAscii("Placeholder(-5)");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(composite74);
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteBuffer38);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteBuffer38);
        boolean boolean43 = comparators.Composite.isValidType((java.lang.Object) objList42);
        java.nio.ByteBuffer byteBuffer44 = comparators.Composite.serializeToByteBuffer(objList42);
        boolean boolean45 = comparators.Composite.validate(byteBuffer44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteBuffer44);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objList46);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite9.parallelStream();
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = composite9.byteStream;
        comparators.Composite composite17 = composite9.addAscii("Placeholder(-1)");
        java.util.stream.Stream<java.lang.Object> objStream18 = composite9.parallelStream();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        boolean boolean34 = composite28.isEmpty();
        java.lang.String str35 = composite28.toString();
        comparators.Composite composite37 = composite28.addUTF8("Placeholder(100)");
        comparators.Composite composite39 = composite37.addUTF8("hi!");
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        boolean boolean58 = comparators.Composite.validate((int) ' ', byteArray55, true);
        boolean boolean59 = composite49.contains((java.lang.Object) boolean58);
        java.util.stream.Stream<java.lang.Object> objStream60 = composite49.parallelStream();
        composite49.startOffset = 8;
        comparators.Composite composite64 = composite49.addAscii("hi!");
        comparators.Composite composite66 = composite49.addLong((long) 4);
        int int67 = composite66.size();
        java.lang.Object[] objArray68 = composite66.toArray();
        byte[] byteArray69 = comparators.Composite.serialize(objArray68);
        byte[] byteArray70 = comparators.Composite.serialize(objArray68);
        composite37.bytes = byteArray70;
        composite37.startOffset = 14;
        int int74 = composite9.compareTo(composite37);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNull(byteArrayOutputStream15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(composite66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        comparators.Composite composite23 = composite9.addAscii("hi!");
        java.util.stream.Stream<java.lang.Object> objStream24 = composite9.stream();
        java.io.DataOutputStream dataOutputStream25 = composite9.out;
        comparators.Composite composite27 = composite9.addAscii("true,6");
        byte[] byteArray28 = composite9.serialize();
        composite9.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(dataOutputStream25);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 7, 0, 6, 116, 114, 117, 101, 44, 54, 0]");
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        int int86 = compositeTypeIterator80.type;
        compositeTypeIterator80.offset = (byte) 1;
        compositeTypeIterator80.type = (short) 10;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.util.RandomAccess[] randomAccessArray44 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray45 = composite43.toArray(randomAccessArray44);
        comparators.Composite composite47 = composite43.addLong((long) 67);
        byte[] byteArray48 = composite47.serialize();
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray48);
        comparators.Composite composite50 = composite9.addBytes(byteArray48);
        java.lang.String str51 = composite50.toString();
        comparators.Composite composite53 = composite50.addBool(true);
        composite53.startOffset = 121;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(randomAccessArray45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "434d500103000000000000004300" + "'", str51, "434d500103000000000000004300");
        org.junit.Assert.assertNotNull(composite53);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        byte[] byteArray77 = composite76.serialize();
        comparators.Composite composite78 = new comparators.Composite(byteArray77);
        java.lang.Object obj79 = null;
        boolean boolean80 = composite78.add(obj79);
        java.util.Spliterator<java.lang.Object> objSpliterator81 = composite78.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objSpliterator81);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        comparators.Composite composite78 = composite17.addUTF8("");
        comparators.Composite composite80 = composite17.addBool(true);
        composite80.startOffset = 179;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(composite80);
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.util.RandomAccess[] randomAccessArray31 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray32 = composite30.toArray(randomAccessArray31);
        comparators.Composite composite34 = composite30.addLong((long) 67);
        byte[] byteArray35 = composite34.serialize();
        boolean boolean36 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite34);
        composite34.startOffset = (byte) 10;
        java.util.UUID uUID39 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite40 = composite34.addTimeUUID(uUID39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(randomAccessArray32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = placeholder0.equals((java.lang.Object) str65);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str68 = placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        placeholder0.type = 47;
        int int72 = placeholder0.type;
        java.lang.String str73 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Placeholder(6)" + "'", str68, "Placeholder(6)");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 47 + "'", int72 == 47);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Placeholder(47)" + "'", str73, "Placeholder(47)");
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        org.apache.cassandra.db.IColumn[] iColumnArray38 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList39 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39, iColumnArray38);
        java.lang.String str41 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType33.getReverseComparator();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        org.apache.cassandra.db.IColumn[] iColumnArray48 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList49 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49, iColumnArray48);
        java.lang.String str51 = compositeType43.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str52 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str53 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType0.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(iColumnArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(iColumnArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(byteBufferComparator55);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = placeholder0.equals((java.lang.Object) str65);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str68 = placeholder0.toString();
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.util.RandomAccess[] randomAccessArray79 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray80 = composite78.toArray(randomAccessArray79);
        java.util.stream.Stream<java.lang.Object> objStream81 = composite78.stream();
        byte[] byteArray82 = composite78.bytes;
        comparators.Composite composite84 = composite78.addUTF8("Placeholder(0)");
        java.util.Spliterator<java.lang.Object> objSpliterator85 = composite84.spliterator();
        java.util.Spliterator<java.lang.Object> objSpliterator86 = composite84.spliterator();
        boolean boolean87 = placeholder0.equals((java.lang.Object) objSpliterator86);
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Placeholder(47)" + "'", str68, "Placeholder(47)");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(randomAccessArray79);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(objSpliterator85);
        org.junit.Assert.assertNotNull(objSpliterator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        int int31 = composite28.startOffset;
        java.lang.Object[] objArray32 = composite28.toArray();
        java.util.Spliterator<java.lang.Object> objSpliterator33 = composite28.spliterator();
        comparators.Composite composite35 = composite28.addBool(false);
        comparators.Composite composite37 = composite35.addBool(false);
        boolean boolean38 = composite18.contains((java.lang.Object) composite35);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        byte[] byteArray61 = composite48.bytes;
        int int62 = composite35.compareTo(composite48);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objSpliterator33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        comparators.Composite composite86 = compositeTypeIterator80.collection;
        int int87 = compositeTypeIterator80.offset;
        int int88 = compositeTypeIterator80.len;
        compositeTypeIterator80.len = 255;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 67 + "'", int87 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = placeholder0.equals((java.lang.Object) str65);
        placeholder0.type = 8;
        comparators.CompositeType compositeType69 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray70 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList71 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71, byteBufferArray70);
        java.lang.String str73 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator74 = compositeType69.indexComparator;
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray76 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList77 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77, byteBufferArray76);
        java.lang.String str79 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator80 = compositeType69.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType75);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator81 = compositeType69.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator82 = compositeType69.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType69.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator84 = compositeType69.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator85 = compositeType69.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator86 = compositeType69.reversed();
        boolean boolean87 = placeholder0.equals((java.lang.Object) byteBufferComparator86);
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        int int89 = placeholder0.type;
        int int90 = placeholder0.type;
        int int91 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(compositeType69);
        org.junit.Assert.assertNotNull(byteBufferArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(indexInfoComparator74);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteBufferComparator80);
        org.junit.Assert.assertNotNull(indexInfoComparator81);
        org.junit.Assert.assertNotNull(byteBufferComparator82);
        org.junit.Assert.assertNotNull(indexInfoComparator83);
        org.junit.Assert.assertNotNull(byteBufferComparator84);
        org.junit.Assert.assertNotNull(indexInfoComparator85);
        org.junit.Assert.assertNotNull(byteBufferComparator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 8 + "'", int91 == 8);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        int int23 = compositeListSerializer0.computeInitialHashSize((int) (byte) -1);
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray25 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList26 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26, byteBufferArray25);
        java.lang.String str28 = compositeType24.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator29 = compositeType24.indexComparator;
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType24.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.lang.String str41 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        org.apache.cassandra.db.IColumn[] iColumnArray47 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList48 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList48, iColumnArray47);
        java.lang.String str50 = compositeType42.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType42.getReverseComparator();
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        java.lang.String str61 = compositeType42.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        comparators.hector.CompositeListSerializer compositeListSerializer62 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator68 = compositeType63.indexComparator;
        comparators.CompositeType compositeType69 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray70 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList71 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71, byteBufferArray70);
        java.lang.String str73 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator74 = compositeType63.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType69);
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray76 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList77 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77, byteBufferArray76);
        java.lang.String str79 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.lang.String str80 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.util.List<java.util.List<java.lang.Object>> objListList81 = compositeListSerializer62.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList77);
        java.lang.String str82 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.lang.String str83 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.util.List<java.util.List<java.lang.Object>> objListList84 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList77);
        java.util.List<java.lang.Object> objList85 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray86 = compositeListSerializer0.toBytes(objList85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteBufferArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(indexInfoComparator29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(iColumnArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(indexInfoComparator68);
        org.junit.Assert.assertNotNull(compositeType69);
        org.junit.Assert.assertNotNull(byteBufferArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteBufferComparator74);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(objListList81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(objListList84);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.offset = (byte) -1;
        compositeTypeIterator80.offset = (-1);
        int int88 = compositeTypeIterator80.offset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        comparators.Composite composite55 = composite49.addBool(true);
        java.util.Iterator<java.lang.Object> objItor56 = composite49.iterator();
        comparators.Composite composite58 = composite49.addReal((java.lang.Double) 100.0d);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        int int73 = composite68.startOffset;
        composite68.clear();
        boolean boolean75 = composite58.containsAll((java.util.Collection<java.lang.Object>) composite68);
        java.util.Iterator<java.lang.Object> objItor76 = composite58.iterator();
        boolean boolean77 = composite37.add((java.lang.Object) composite58);
        comparators.Composite composite79 = composite58.addBool(true);
        comparators.Composite composite80 = composite58.addMatchMinimum();
        int int81 = composite58.size();
        comparators.Composite composite83 = composite58.addReal((java.lang.Double) 1.0d);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(objItor56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(composite83);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        int int7 = placeholder0.type;
        java.lang.String str8 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Placeholder(1)" + "'", str8, "Placeholder(1)");
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        int int10 = composite9.size();
        byte[] byteArray11 = composite9.bytes;
        comparators.hector.CompositeSerializer compositeSerializer12 = new comparators.hector.CompositeSerializer();
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        comparators.Composite composite28 = composite22.addBool(true);
        java.io.DataOutputStream dataOutputStream29 = composite22.out;
        byte[] byteArray30 = compositeSerializer12.toBytes(composite22);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        comparators.Composite composite46 = composite40.addBool(true);
        comparators.Composite composite48 = composite46.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream49 = composite46.byteStream;
        java.nio.ByteBuffer byteBuffer50 = compositeSerializer12.toByteBuffer(composite46);
        int int51 = comparators.Composite.compare(composite9, composite46);
        java.io.DataOutputStream dataOutputStream52 = composite9.out;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite9.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(composite28);
        org.junit.Assert.assertNotNull(dataOutputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteArrayOutputStream49);
        org.junit.Assert.assertEquals(byteArrayOutputStream49.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(dataOutputStream52);
        org.junit.Assert.assertNotNull(objStream53);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.io.DataOutputStream dataOutputStream16 = composite9.out;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        boolean boolean35 = comparators.Composite.validate((int) ' ', byteArray32, true);
        boolean boolean36 = composite26.contains((java.lang.Object) boolean35);
        java.util.stream.Stream<java.lang.Object> objStream37 = composite26.parallelStream();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        comparators.Composite composite53 = composite47.addBool(true);
        java.io.DataOutputStream dataOutputStream54 = composite47.out;
        composite26.out = dataOutputStream54;
        byte[] byteArray56 = composite26.serialize();
        java.io.DataOutputStream dataOutputStream57 = composite26.out;
        composite9.out = dataOutputStream57;
        java.io.ByteArrayOutputStream byteArrayOutputStream59 = composite9.byteStream;
        comparators.Composite composite61 = composite9.addBool(false);
        int int62 = composite9.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(dataOutputStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(dataOutputStream54);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(dataOutputStream57);
        org.junit.Assert.assertNotNull(byteArrayOutputStream59);
        org.junit.Assert.assertEquals(byteArrayOutputStream59.toString(), "CMP\001\002\001");
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        boolean boolean62 = composite9.equals((java.lang.Object) objList61);
        java.io.DataOutputStream dataOutputStream63 = composite9.out;
        java.io.DataOutputStream dataOutputStream64 = composite9.out;
        java.io.ByteArrayOutputStream byteArrayOutputStream65 = composite9.byteStream;
        java.lang.Object[] objArray66 = composite9.toArray();
        comparators.Composite composite67 = new comparators.Composite(objArray66);
        byte[] byteArray68 = comparators.Composite.serialize(objArray66);
        comparators.Composite composite69 = new comparators.Composite(objArray66);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(dataOutputStream63);
        org.junit.Assert.assertNull(dataOutputStream64);
        org.junit.Assert.assertNull(byteArrayOutputStream65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNull(byteArray68);
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.stream();
        byte[] byteArray13 = composite9.bytes;
        comparators.Composite composite15 = composite9.addUTF8("Placeholder(0)");
        composite9.startOffset = 174;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(composite15);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        int int23 = compositeListSerializer0.computeInitialHashSize(71);
        comparators.hector.CompositeListSerializer compositeListSerializer24 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        byte[] byteArray32 = comparators.Composite.serialize(objList31);
        java.util.stream.Stream<java.lang.Object> objStream33 = objList31.parallelStream();
        comparators.Composite composite34 = new comparators.Composite(objList31);
        byte[] byteArray35 = compositeListSerializer24.toBytes(objList31);
        int int37 = compositeListSerializer24.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator44 = compositeType39.indexComparator;
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType39.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType45);
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str56 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.List<java.util.List<java.lang.Object>> objListList57 = compositeListSerializer38.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList53);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet58 = compositeListSerializer24.toBytesSet(objListList57);
        comparators.CompositeType compositeType59 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray60 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList61 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61, byteBufferArray60);
        java.lang.String str63 = compositeType59.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator64 = compositeType59.indexComparator;
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator70 = compositeType59.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType65);
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.lang.String str76 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        comparators.CompositeType compositeType77 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray78 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList79 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79, byteBufferArray78);
        java.lang.String str81 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.lang.String str82 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.util.List<java.lang.Object>> objListList83 = compositeListSerializer24.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.nio.ByteBuffer> byteBufferList84 = compositeListSerializer0.toBytesList(objListList83);
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray90 = new byte[] {};
        int int91 = comparators.Composite.compare(byteArray89, byteArray90);
        java.util.List<java.lang.Object> objList92 = comparators.Composite.deserialize(byteArray90);
        java.util.List<java.lang.Object> objList93 = comparators.Composite.deserialize(byteArray90);
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteArray90);
        boolean boolean95 = comparators.Composite.validate(227, byteArray90);
        java.util.List<java.lang.Object> objList96 = compositeListSerializer0.fromBytes(byteArray90);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 95 + "'", int23 == 95);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 43 + "'", int37 == 43);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(indexInfoComparator44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objListList57);
        org.junit.Assert.assertNotNull(byteBufferSet58);
        org.junit.Assert.assertNotNull(compositeType59);
        org.junit.Assert.assertNotNull(byteBufferArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(indexInfoComparator64);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteBufferComparator70);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(compositeType77);
        org.junit.Assert.assertNotNull(byteBufferArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(objListList83);
        org.junit.Assert.assertNotNull(byteBufferList84);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(objList92);
        org.junit.Assert.assertNotNull(objList93);
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(objList96);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        java.util.Iterator<java.lang.Object> objItor39 = composite33.iterator();
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite33.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream41 = composite33.byteStream;
        composite33.startOffset = 0;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer44 = composite33.serializeToByteBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objItor39);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(byteArrayOutputStream41);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 0, (byte) 100, (byte) -1, (byte) 0, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray13);
        byte[] byteArray16 = comparators.Composite.serialize(objList15);
        java.util.stream.Stream<java.lang.Object> objStream17 = objList15.parallelStream();
        comparators.Composite composite18 = new comparators.Composite(objList15);
        java.lang.Object[] objArray19 = composite18.toArray();
        int int20 = composite18.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream21 = composite18.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream22 = composite18.parallelStream();
        comparators.Composite composite24 = composite18.addBool(true);
        java.util.Iterator<java.lang.Object> objItor25 = composite18.iterator();
        comparators.Composite composite26 = new comparators.Composite();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite26.compareTo(composite36);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        boolean boolean60 = comparators.Composite.validate((int) ' ', byteArray57, true);
        boolean boolean61 = composite51.contains((java.lang.Object) boolean60);
        java.util.stream.Stream<java.lang.Object> objStream62 = composite51.parallelStream();
        boolean boolean63 = composite26.contains((java.lang.Object) composite51);
        boolean boolean64 = composite18.addAll((java.util.Collection<java.lang.Object>) composite26);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        int int80 = composite74.startOffset;
        int int81 = composite26.compareTo(composite74);
        comparators.Composite composite83 = composite26.addLong((long) 80);
        java.util.stream.Stream<java.lang.Object> objStream84 = composite26.parallelStream();
        byte[] byteArray85 = composite26.serialize();
        // The following exception was thrown during execution in test generation
        try {
            int int86 = comparators.Composite.compare(18, byteArray7, 21, byteArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 0, 100, -1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(objItor25);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 80, 0]");
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        boolean boolean92 = compositeTypeIterator91.hasNext();
        byte[] byteArray93 = compositeTypeIterator91.bytes;
        comparators.Composite composite94 = compositeTypeIterator91.collection;
        comparators.Composite composite95 = compositeTypeIterator91.collection;
        byte[] byteArray96 = composite95.serialize();
        composite95.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertNotNull(composite95);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator1 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator2 = compositeType0.reversed();
        java.nio.ByteBuffer byteBuffer3 = null;
        comparators.hector.CompositeSerializer compositeSerializer4 = new comparators.hector.CompositeSerializer();
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray9 = new byte[] {};
        int int10 = comparators.Composite.compare(byteArray8, byteArray9);
        java.util.List<java.lang.Object> objList11 = comparators.Composite.deserialize(byteArray9);
        byte[] byteArray12 = comparators.Composite.serialize(objList11);
        java.util.stream.Stream<java.lang.Object> objStream13 = objList11.parallelStream();
        comparators.Composite composite14 = new comparators.Composite(objList11);
        java.lang.Object[] objArray15 = composite14.toArray();
        int int16 = composite14.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream17 = composite14.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream18 = composite14.parallelStream();
        comparators.Composite composite20 = composite14.addBool(true);
        java.io.DataOutputStream dataOutputStream21 = composite14.out;
        byte[] byteArray22 = compositeSerializer4.toBytes(composite14);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        int int34 = composite32.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream35 = composite32.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream36 = composite32.parallelStream();
        comparators.Composite composite38 = composite32.addBool(true);
        comparators.Composite composite40 = composite38.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream41 = composite38.byteStream;
        java.nio.ByteBuffer byteBuffer42 = compositeSerializer4.toByteBuffer(composite38);
        boolean boolean44 = comparators.Composite.validate(byteBuffer42, false);
        int int45 = compositeType0.compare(byteBuffer3, byteBuffer42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator46 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = byteBufferComparator47.reversed();
        org.junit.Assert.assertNotNull(indexInfoComparator1);
        org.junit.Assert.assertNotNull(byteBufferComparator2);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(objList11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(dataOutputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertNotNull(byteArrayOutputStream41);
        org.junit.Assert.assertEquals(byteArrayOutputStream41.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(indexInfoComparator46);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
        org.junit.Assert.assertNotNull(byteBufferComparator48);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer53);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer53);
        boolean boolean58 = composite9.addAll((java.util.Collection<java.lang.Object>) composite57);
        comparators.Composite composite60 = composite9.addAscii("Placeholder(100)");
        comparators.Composite composite62 = composite9.addAscii("US-ASCII");
        java.lang.String str63 = composite9.toString();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite9.parallelStream();
        java.nio.ByteBuffer byteBuffer65 = composite9.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + ",Placeholder(100),US-ASCII" + "'", str63, ",Placeholder(100),US-ASCII");
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteBuffer65);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator35 = compositeType30.indexComparator;
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType30.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType36);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.lang.String str47 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray49 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList50 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50, byteBufferArray49);
        java.lang.String str52 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator53 = compositeType48.indexComparator;
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray55 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList56 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56, byteBufferArray55);
        java.lang.String str58 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator59 = compositeType48.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType54);
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.lang.String str65 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.AbstractList[] abstractListArray67 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray68 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray67;
        byteBufferListArray68[0] = byteBufferList44;
        byteBufferListArray68[1] = byteBufferList62;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray73 = composite28.toArray(byteBufferListArray68);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray78);
        boolean boolean81 = composite28.equals((java.lang.Object) objList80);
        java.io.DataOutputStream dataOutputStream82 = composite28.out;
        byte[] byteArray83 = compositeSerializer0.toBytes(composite28);
        int int85 = compositeSerializer0.computeInitialHashSize(15);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexInfoComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteBufferArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(indexInfoComparator53);
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteBufferArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteBufferComparator59);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(abstractListArray67);
        org.junit.Assert.assertNotNull(byteBufferListArray68);
        org.junit.Assert.assertNotNull(byteBufferListArray73);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(dataOutputStream82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 21 + "'", int85 == 21);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        int int25 = compositeListSerializer0.computeInitialHashSize(77);
        byte[] byteArray26 = null;
        java.util.List<java.lang.Object> objList27 = compositeListSerializer0.fromBytes(byteArray26);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        int int42 = comparators.Composite.compare(byteArray33, byteArray40);
        boolean boolean44 = comparators.Composite.validate(0, byteArray40, false);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize((int) (short) 0, byteArray40);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.util.RandomAccess[] randomAccessArray64 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray65 = composite63.toArray(randomAccessArray64);
        comparators.Composite composite67 = composite63.addLong((long) 67);
        byte[] byteArray68 = composite67.serialize();
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray68);
        int int70 = comparators.Composite.compare(byteArray51, byteArray68);
        comparators.hector.CompositeSerializer compositeSerializer71 = new comparators.hector.CompositeSerializer();
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        java.util.List<java.lang.Object> objList78 = comparators.Composite.deserialize(byteArray76);
        byte[] byteArray79 = comparators.Composite.serialize(objList78);
        java.util.stream.Stream<java.lang.Object> objStream80 = objList78.parallelStream();
        comparators.Composite composite81 = new comparators.Composite(objList78);
        java.lang.Object[] objArray82 = composite81.toArray();
        int int83 = composite81.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream84 = composite81.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream85 = composite81.parallelStream();
        comparators.Composite composite87 = composite81.addBool(true);
        java.io.DataOutputStream dataOutputStream88 = composite81.out;
        byte[] byteArray89 = compositeSerializer71.toBytes(composite81);
        int int90 = comparators.Composite.compare(byteArray68, byteArray89);
        boolean boolean92 = comparators.Composite.validate(67, byteArray89, true);
        int int93 = comparators.Composite.compare(byteArray40, byteArray89);
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteArray89);
        java.util.List<java.lang.Object> objList95 = compositeListSerializer0.fromBytes(byteArray89);
        comparators.Composite composite96 = new comparators.Composite(objList95);
        comparators.Composite composite97 = new comparators.Composite(objList95);
        comparators.Composite composite98 = new comparators.Composite(objList95);
        comparators.Composite composite99 = new comparators.Composite(objList95);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 103 + "'", int25 == 103);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(randomAccessArray64);
        org.junit.Assert.assertNotNull(randomAccessArray65);
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(dataOutputStream88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNotNull(objList95);
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.startOffset;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        boolean boolean49 = comparators.Composite.validate(0, byteArray46);
        byte[] byteArray50 = null;
        int int51 = comparators.Composite.compare(byteArray46, byteArray50);
        comparators.Composite composite52 = new comparators.Composite(byteArray50);
        byte[] byteArray54 = null;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        boolean boolean64 = comparators.Composite.validate((int) ' ', byteArray61, true);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        boolean boolean74 = comparators.Composite.validate((int) (short) 100, byteArray70, false);
        int int75 = comparators.Composite.compare(byteArray61, byteArray70);
        int int76 = comparators.Composite.compare((int) (short) 1, byteArray54, (int) (byte) 10, byteArray70);
        comparators.Composite composite77 = composite52.addBytes(byteArray70);
        comparators.Composite composite78 = composite9.addBytes(byteArray70);
        java.lang.String str79 = composite9.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.util.RandomAccess[] randomAccessArray72 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray73 = composite71.toArray(randomAccessArray72);
        comparators.Composite composite75 = composite71.addLong((long) 67);
        byte[] byteArray76 = composite75.serialize();
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite composite78 = new comparators.Composite(byteArray76);
        comparators.Composite composite79 = compositeSerializer0.fromBytes(byteArray76);
        int int81 = compositeSerializer0.computeInitialHashSize((int) (byte) 10);
        int int83 = compositeSerializer0.computeInitialHashSize((int) (short) 1);
        int int85 = compositeSerializer0.computeInitialHashSize(6);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(randomAccessArray72);
        org.junit.Assert.assertNotNull(randomAccessArray73);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 14 + "'", int81 == 14);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.nio.ByteBuffer> byteBufferList42 = compositeListSerializer0.toBytesList(objListList41);
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType44 = new comparators.CompositeType();
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        java.lang.Object[] objArray70 = composite69.toArray();
        int int71 = composite69.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream73 = composite69.parallelStream();
        int int74 = composite69.startOffset;
        int int75 = composite55.compareTo(composite69);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        comparators.Composite composite82 = composite55.addBytes(byteArray80);
        java.nio.ByteBuffer byteBuffer83 = composite82.serializeToByteBuffer();
        compositeType45.validate(byteBuffer83);
        boolean boolean85 = comparators.Composite.validate(byteBuffer83);
        comparators.Composite composite86 = new comparators.Composite(byteBuffer83);
        java.nio.ByteBuffer byteBuffer87 = null;
        int int88 = compositeType44.compare(byteBuffer83, byteBuffer87);
        compositeType43.validate(byteBuffer83);
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteBuffer83);
        java.nio.ByteBuffer byteBuffer91 = compositeListSerializer0.toByteBuffer(objList90);
        comparators.Composite composite92 = new comparators.Composite(objList90);
        comparators.Composite composite94 = composite92.addUTF8("Placeholder(77)");
        comparators.Composite composite96 = composite94.addUTF8("0");
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(byteBufferList42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertNotNull(composite96);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        byte[] byteArray22 = composite9.bytes;
        boolean boolean23 = composite9.isEmpty();
        comparators.hector.CompositeSerializer compositeSerializer24 = new comparators.hector.CompositeSerializer();
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        byte[] byteArray32 = comparators.Composite.serialize(objList31);
        java.util.stream.Stream<java.lang.Object> objStream33 = objList31.parallelStream();
        comparators.Composite composite34 = new comparators.Composite(objList31);
        java.lang.Object[] objArray35 = composite34.toArray();
        int int36 = composite34.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream37 = composite34.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream38 = composite34.parallelStream();
        comparators.Composite composite40 = composite34.addBool(true);
        java.io.DataOutputStream dataOutputStream41 = composite34.out;
        byte[] byteArray42 = compositeSerializer24.toBytes(composite34);
        boolean boolean43 = composite34.isEmpty();
        java.lang.Object obj44 = null;
        boolean boolean45 = composite34.equals(obj44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = comparators.Composite.validate((int) (short) 0, byteArray54);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(0, byteArray54);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator60 = composite9.new CompositeTypeIterator(composite34, 5, byteArray54);
        java.util.Spliterator<java.lang.Object> objSpliterator61 = composite34.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertNotNull(dataOutputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNotNull(objSpliterator61);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addLong((long) 67);
        byte[] byteArray38 = composite37.serialize();
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray38);
        comparators.Composite composite40 = new comparators.Composite(objList39);
        byte[] byteArray41 = compositeListSerializer0.toBytes(objList39);
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.util.UUID uUID43 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite44 = composite42.addTimeUUID(uUID43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.size();
        java.util.Spliterator<java.lang.Object> objSpliterator41 = composite9.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream42 = composite9.byteStream;
        comparators.Composite composite44 = composite9.addLong((long) (short) 100);
        java.io.DataOutputStream dataOutputStream45 = composite9.out;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        int int60 = composite55.startOffset;
        int int61 = composite55.startOffset;
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        boolean boolean80 = comparators.Composite.validate((int) ' ', byteArray77, true);
        boolean boolean81 = composite71.contains((java.lang.Object) boolean80);
        java.util.Spliterator<java.lang.Object> objSpliterator82 = composite71.spliterator();
        boolean boolean83 = composite55.containsAll((java.util.Collection<java.lang.Object>) composite71);
        byte[] byteArray84 = null;
        comparators.Composite composite85 = new comparators.Composite(byteArray84);
        boolean boolean86 = composite71.containsAll((java.util.Collection<java.lang.Object>) composite85);
        java.lang.CharSequence[] charSequenceArray87 = new java.lang.CharSequence[] {};
        java.lang.CharSequence[] charSequenceArray88 = composite85.toArray(charSequenceArray87);
        java.lang.Object[] objArray89 = composite85.toArray();
        java.io.ByteArrayOutputStream byteArrayOutputStream90 = composite85.byteStream;
        int int91 = comparators.Composite.compare(composite9, composite85);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objSpliterator41);
        org.junit.Assert.assertNull(byteArrayOutputStream42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(dataOutputStream45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objSpliterator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(charSequenceArray87);
        org.junit.Assert.assertNotNull(charSequenceArray88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNull(byteArrayOutputStream90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        comparators.Composite composite88 = compositeTypeIterator80.collection;
        compositeTypeIterator80.type = 607;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(composite88);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        comparators.hector.CompositeListSerializer compositeListSerializer48 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator54 = compositeType49.indexComparator;
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator60 = compositeType49.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType55);
        comparators.CompositeType compositeType61 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray62 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList63 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63, byteBufferArray62);
        java.lang.String str65 = compositeType61.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.lang.String str66 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.util.List<java.util.List<java.lang.Object>> objListList67 = compositeListSerializer48.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList63);
        comparators.CompositeType compositeType68 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator69 = compositeType68.indexComparator;
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator71 = compositeType68.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType70);
        java.lang.Object[] objArray72 = new java.lang.Object[] { compositeListSerializer48, compositeType70 };
        java.lang.Object[][] objArray73 = new java.lang.Object[][] { objArray72 };
        java.lang.Object[][] objArray74 = composite32.toArray(objArray73);
        java.lang.Object[][] objArray75 = composite30.toArray(objArray74);
        boolean boolean76 = composite9.addAll((java.util.Collection<java.lang.Object>) composite30);
        composite9.startOffset = (byte) 10;
        comparators.Composite composite80 = composite9.addAscii("Placeholder(0)");
        byte[] byteArray81 = composite9.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(indexInfoComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteBufferComparator60);
        org.junit.Assert.assertNotNull(compositeType61);
        org.junit.Assert.assertNotNull(byteBufferArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objListList67);
        org.junit.Assert.assertNotNull(indexInfoComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferComparator71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNull(byteArray81);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        int int50 = composite45.startOffset;
        composite45.clear();
        boolean boolean52 = composite9.equals((java.lang.Object) composite45);
        byte[] byteArray53 = composite9.bytes;
        composite9.startOffset = 67;
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        int int84 = composite79.startOffset;
        int int85 = composite65.compareTo(composite79);
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray90 = new byte[] {};
        int int91 = comparators.Composite.compare(byteArray89, byteArray90);
        comparators.Composite composite92 = composite65.addBytes(byteArray90);
        java.nio.ByteBuffer byteBuffer93 = composite92.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteBuffer93);
        java.util.List<java.lang.Object> objList95 = comparators.Composite.deserialize(byteBuffer93);
        boolean boolean96 = composite9.containsAll((java.util.Collection<java.lang.Object>) objList95);
        java.util.Iterator<java.lang.Object> objItor97 = composite9.iterator();
        java.lang.Object[] objArray98 = composite9.toArray();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNotNull(objList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(objItor97);
        org.junit.Assert.assertNotNull(objArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray98), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray98), "[]");
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite13.iterator();
        java.nio.ByteBuffer byteBuffer17 = composite13.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteBuffer17);
        comparators.Composite composite19 = new comparators.Composite(byteBuffer17);
        java.lang.Object[] objArray20 = composite19.toArray();
        byte[] byteArray21 = comparators.Composite.serialize(objArray20);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[67, true]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[67, true]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 2, 1, 0]");
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        comparators.Composite composite18 = composite9.addUTF8("Placeholder(100)");
        java.io.DataOutputStream dataOutputStream19 = composite9.out;
        comparators.Composite composite21 = composite9.addBool(false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(dataOutputStream19);
        org.junit.Assert.assertNotNull(composite21);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite10.startOffset;
        composite10.clear();
        comparators.Composite composite18 = composite10.addBool(false);
        byte[] byteArray19 = composite18.serialize();
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize((int) '4', byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 0, 0]");
        org.junit.Assert.assertNotNull(objList20);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) compositeType22);
        comparators.CompositeType compositeType29 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator30 = compositeType29.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType32.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType40 = new comparators.CompositeType();
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        boolean boolean81 = comparators.Composite.validate(byteBuffer79);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer79);
        java.nio.ByteBuffer byteBuffer83 = null;
        int int84 = compositeType40.compare(byteBuffer79, byteBuffer83);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator85 = compositeType40.getReverseComparator();
        org.apache.cassandra.db.IColumn[] iColumnArray86 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList87 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList87, iColumnArray86);
        java.lang.String str89 = compositeType40.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList87);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator90 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator91 = compositeType40.getReverseComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer93 = compositeType40.fromString("1,true");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator30);
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(byteBufferComparator85);
        org.junit.Assert.assertNotNull(iColumnArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteBufferComparator90);
        org.junit.Assert.assertNotNull(byteBufferComparator91);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        boolean boolean10 = comparators.Composite.validate((int) (short) 100, byteArray6, false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList11 = comparators.Composite.deserialize((-6), byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        comparators.hector.CompositeSerializer compositeSerializer1 = new comparators.hector.CompositeSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        comparators.Composite composite17 = composite11.addBool(true);
        java.io.DataOutputStream dataOutputStream18 = composite11.out;
        byte[] byteArray19 = compositeSerializer1.toBytes(composite11);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        comparators.Composite composite35 = composite29.addBool(true);
        comparators.Composite composite37 = composite35.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream38 = composite35.byteStream;
        java.nio.ByteBuffer byteBuffer39 = compositeSerializer1.toByteBuffer(composite35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.lang.Object[] objArray64 = composite63.toArray();
        int int65 = composite63.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream66 = composite63.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream67 = composite63.parallelStream();
        int int68 = composite63.startOffset;
        int int69 = composite49.compareTo(composite63);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.util.RandomAccess[] randomAccessArray80 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray81 = composite79.toArray(randomAccessArray80);
        comparators.Composite composite83 = composite79.addLong((long) 67);
        byte[] byteArray84 = composite83.serialize();
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray84);
        comparators.Composite composite86 = new comparators.Composite(byteArray84);
        boolean boolean87 = composite63.equals((java.lang.Object) byteArray84);
        comparators.Composite composite88 = compositeSerializer1.fromBytes(byteArray84);
        comparators.CompositeType compositeType89 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray90 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList91 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91, byteBufferArray90);
        java.lang.String str93 = compositeType89.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList94 = compositeSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList95 = compositeSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        int int97 = compositeSerializer0.computeInitialHashSize(67);
        int int99 = compositeSerializer0.computeInitialHashSize(4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArrayOutputStream38);
        org.junit.Assert.assertEquals(byteArrayOutputStream38.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(compositeType89);
        org.junit.Assert.assertNotNull(byteBufferArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(compositeList94);
        org.junit.Assert.assertNotNull(compositeList95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 90 + "'", int97 == 90);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 6 + "'", int99 == 6);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        comparators.Composite composite89 = null;
        compositeTypeIterator80.collection = composite89;
        compositeTypeIterator80.type = 15;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        boolean boolean92 = compositeTypeIterator91.hasNext();
        byte[] byteArray93 = compositeTypeIterator91.bytes;
        comparators.Composite composite94 = compositeTypeIterator91.collection;
        compositeTypeIterator91.offset = (byte) 100;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(composite94);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        comparators.CompositeType compositeType7 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator8 = compositeType7.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator15 = compositeType10.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator16 = compositeType7.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType10);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator17 = compositeType10.indexReverseComparator;
        comparators.hector.CompositeSerializer compositeSerializer18 = new comparators.hector.CompositeSerializer();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        int int31 = comparators.Composite.compare(byteArray22, byteArray29);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray29);
        comparators.Composite composite33 = compositeSerializer18.fromBytes(byteArray29);
        int int35 = compositeSerializer18.computeInitialHashSize(1);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.util.RandomAccess[] randomAccessArray46 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray47 = composite45.toArray(randomAccessArray46);
        comparators.Composite composite49 = composite45.addLong((long) 67);
        comparators.Composite composite51 = composite49.addBool(true);
        comparators.Composite composite53 = composite49.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer54 = composite49.serializeToByteBuffer();
        comparators.Composite composite55 = compositeSerializer18.fromByteBuffer(byteBuffer54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteBuffer54);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer54);
        boolean boolean58 = comparators.Composite.validate(byteBuffer54);
        compositeType10.validate(byteBuffer54);
        comparators.CompositeType compositeType60 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType60.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator62 = compositeType60.indexComparator;
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        org.apache.cassandra.db.IColumn[] iColumnArray68 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList69 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList69, iColumnArray68);
        java.lang.String str71 = compositeType63.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList69);
        org.apache.cassandra.db.IColumn[] iColumnArray72 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList73 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73, iColumnArray72);
        java.lang.String str75 = compositeType63.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73);
        java.lang.String str76 = compositeType60.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73);
        java.lang.String str77 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList73);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator8);
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(indexInfoComparator15);
        org.junit.Assert.assertNotNull(byteBufferComparator16);
        org.junit.Assert.assertNotNull(indexInfoComparator17);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(randomAccessArray46);
        org.junit.Assert.assertNotNull(randomAccessArray47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(indexInfoComparator62);
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(iColumnArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(iColumnArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        boolean boolean10 = comparators.Composite.validate((int) ' ', byteArray7, true);
        boolean boolean11 = comparators.Composite.validate(100, byteArray7);
        java.util.List<java.lang.Object> objList12 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        boolean boolean21 = comparators.Composite.validate(90, byteArray18);
        int int22 = comparators.Composite.compare(byteArray7, byteArray18);
        boolean boolean23 = comparators.Composite.validate(58, byteArray7);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objList12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) byteArray18);
        comparators.Composite composite29 = composite9.addBytes(byteArray18);
        comparators.Composite composite31 = composite29.addUTF8("true,6,434d500103000000000000004300");
        java.lang.Object[] objArray32 = composite29.toArray();
        java.lang.String str33 = composite29.toString();
        comparators.Composite composite35 = composite29.addBool(true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[[10, 10, -1], true,6,434d500103000000000000004300]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0a0aff,true,6,434d500103000000000000004300" + "'", str33, "0a0aff,true,6,434d500103000000000000004300");
        org.junit.Assert.assertNotNull(composite35);
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        int int27 = composite26.size();
        java.lang.Object[] objArray28 = composite26.toArray();
        byte[] byteArray29 = comparators.Composite.serialize(objArray28);
        byte[] byteArray30 = comparators.Composite.serialize(objArray28);
        java.nio.ByteBuffer byteBuffer31 = comparators.Composite.serializeToByteBuffer(objArray28);
        java.nio.ByteBuffer byteBuffer32 = comparators.Composite.serializeToByteBuffer(objArray28);
        byte[] byteArray33 = comparators.Composite.serialize(objArray28);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = placeholder0.equals((java.lang.Object) str65);
        placeholder0.type = 8;
        comparators.CompositeType compositeType69 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray70 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList71 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71, byteBufferArray70);
        java.lang.String str73 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator74 = compositeType69.indexComparator;
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray76 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList77 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77, byteBufferArray76);
        java.lang.String str79 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator80 = compositeType69.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType75);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator81 = compositeType69.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator82 = compositeType69.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType69.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator84 = compositeType69.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator85 = compositeType69.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator86 = compositeType69.reversed();
        boolean boolean87 = placeholder0.equals((java.lang.Object) byteBufferComparator86);
        java.lang.String str88 = placeholder0.toString();
        java.lang.String str89 = placeholder0.toString();
        placeholder0.type = 0;
        int int92 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(compositeType69);
        org.junit.Assert.assertNotNull(byteBufferArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(indexInfoComparator74);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteBufferComparator80);
        org.junit.Assert.assertNotNull(indexInfoComparator81);
        org.junit.Assert.assertNotNull(byteBufferComparator82);
        org.junit.Assert.assertNotNull(indexInfoComparator83);
        org.junit.Assert.assertNotNull(byteBufferComparator84);
        org.junit.Assert.assertNotNull(indexInfoComparator85);
        org.junit.Assert.assertNotNull(byteBufferComparator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Placeholder(8)" + "'", str88, "Placeholder(8)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Placeholder(8)" + "'", str89, "Placeholder(8)");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean45 = comparators.Composite.validate(1, byteArray43);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray47);
        java.nio.ByteBuffer byteBuffer49 = comparators.Composite.serializeToByteBuffer(objList48);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteBuffer49);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addLong((long) 5);
        comparators.Composite composite25 = composite23.addLong((long) 255);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(composite25);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        int int55 = composite53.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream56 = composite53.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream57 = composite53.parallelStream();
        int int58 = composite53.startOffset;
        int int59 = composite39.compareTo(composite53);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        comparators.Composite composite66 = composite39.addBytes(byteArray64);
        java.nio.ByteBuffer byteBuffer67 = composite66.serializeToByteBuffer();
        compositeType29.validate(byteBuffer67);
        boolean boolean69 = comparators.Composite.validate(byteBuffer67);
        comparators.Composite composite70 = new comparators.Composite(byteBuffer67);
        comparators.Composite composite71 = new comparators.Composite(byteBuffer67);
        boolean boolean72 = composite23.addAll((java.util.Collection<java.lang.Object>) composite71);
        comparators.Composite composite74 = composite23.addAscii("Placeholder(100)");
        comparators.Composite composite76 = composite23.addAscii("US-ASCII");
        int int77 = composite23.size();
        boolean boolean78 = composite9.contains((java.lang.Object) composite23);
        comparators.Composite composite79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int80 = comparators.Composite.compare(composite23, composite79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(composite66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        comparators.CompositeType compositeType5 = comparators.CompositeType.instance;
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray10 = new byte[] {};
        int int11 = comparators.Composite.compare(byteArray9, byteArray10);
        java.util.List<java.lang.Object> objList12 = comparators.Composite.deserialize(byteArray10);
        byte[] byteArray13 = comparators.Composite.serialize(objList12);
        java.util.stream.Stream<java.lang.Object> objStream14 = objList12.parallelStream();
        comparators.Composite composite15 = new comparators.Composite(objList12);
        java.lang.Object[] objArray16 = composite15.toArray();
        int int17 = composite15.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream18 = composite15.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream19 = composite15.parallelStream();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        int int34 = composite29.startOffset;
        int int35 = composite15.compareTo(composite29);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        comparators.Composite composite42 = composite15.addBytes(byteArray40);
        java.nio.ByteBuffer byteBuffer43 = composite42.serializeToByteBuffer();
        compositeType5.validate(byteBuffer43);
        boolean boolean45 = comparators.Composite.validate(byteBuffer43);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer43);
        compositeType0.validate(byteBuffer43);
        boolean boolean48 = comparators.Composite.validate(byteBuffer43);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(compositeType5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(objList12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        int int13 = compositeListSerializer0.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer14 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType15.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType15.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.lang.String str32 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.List<java.util.List<java.lang.Object>> objListList33 = compositeListSerializer14.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet34 = compositeListSerializer0.toBytesSet(objListList33);
        comparators.hector.CompositeListSerializer compositeListSerializer35 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        byte[] byteArray46 = compositeListSerializer35.toBytes(objList42);
        int int48 = compositeListSerializer35.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer49 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType50.indexComparator;
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType50.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType56);
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.lang.String str67 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.List<java.util.List<java.lang.Object>> objListList68 = compositeListSerializer49.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet69 = compositeListSerializer35.toBytesSet(objListList68);
        java.util.List<java.nio.ByteBuffer> byteBufferList70 = compositeListSerializer0.toBytesList(objListList68);
        comparators.hector.CompositeListSerializer compositeListSerializer71 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        java.util.List<java.lang.Object> objList78 = comparators.Composite.deserialize(byteArray76);
        byte[] byteArray79 = comparators.Composite.serialize(objList78);
        java.util.stream.Stream<java.lang.Object> objStream80 = objList78.parallelStream();
        comparators.Composite composite81 = new comparators.Composite(objList78);
        byte[] byteArray82 = compositeListSerializer71.toBytes(objList78);
        byte[] byteArray83 = comparators.Composite.serialize(objList78);
        byte[] byteArray84 = compositeListSerializer0.toBytes(objList78);
        java.util.stream.Stream<java.lang.Object> objStream85 = objList78.parallelStream();
        comparators.Composite composite86 = new comparators.Composite(objList78);
        comparators.Composite composite87 = new comparators.Composite(objList78);
        byte[] byteArray88 = comparators.Composite.serialize(objList78);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteBufferComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objListList33);
        org.junit.Assert.assertNotNull(byteBufferSet34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 43 + "'", int48 == 43);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(indexInfoComparator55);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objListList68);
        org.junit.Assert.assertNotNull(byteBufferSet69);
        org.junit.Assert.assertNotNull(byteBufferList70);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNull(byteArray88);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        byte[] byteArray12 = compositeListSerializer1.toBytes(objList8);
        comparators.CompositeType compositeType13 = new comparators.CompositeType();
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        int int43 = composite38.startOffset;
        int int44 = composite24.compareTo(composite38);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        comparators.Composite composite51 = composite24.addBytes(byteArray49);
        java.nio.ByteBuffer byteBuffer52 = composite51.serializeToByteBuffer();
        compositeType14.validate(byteBuffer52);
        boolean boolean54 = comparators.Composite.validate(byteBuffer52);
        comparators.Composite composite55 = new comparators.Composite(byteBuffer52);
        java.nio.ByteBuffer byteBuffer56 = null;
        int int57 = compositeType13.compare(byteBuffer52, byteBuffer56);
        comparators.Composite composite58 = new comparators.Composite(byteBuffer52);
        java.util.List<java.lang.Object> objList59 = compositeListSerializer1.fromByteBuffer(byteBuffer52);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteBuffer52);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray61);
        boolean boolean63 = comparators.Composite.validate(47, byteArray61);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        java.lang.String str1 = placeholder0.toString();
        java.lang.String str2 = placeholder0.toString();
        java.lang.String str3 = placeholder0.toString();
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(0)" + "'", str1, "Placeholder(0)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Placeholder(0)" + "'", str2, "Placeholder(0)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(0)" + "'", str3, "Placeholder(0)");
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addLong((long) 21);
        java.lang.Object[] objArray16 = composite15.toArray();
        comparators.Composite composite17 = composite15.addMatchMaximum();
        java.io.DataOutputStream dataOutputStream18 = composite15.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[21]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[21]");
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        int int16 = composite9.startOffset;
        comparators.CompositeType compositeType17 = new comparators.CompositeType();
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        boolean boolean58 = comparators.Composite.validate(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = null;
        int int61 = compositeType17.compare(byteBuffer56, byteBuffer60);
        comparators.Composite composite62 = new comparators.Composite(byteBuffer56);
        comparators.Composite composite63 = new comparators.Composite(byteBuffer56);
        boolean boolean64 = composite9.equals((java.lang.Object) composite63);
        java.io.DataOutputStream dataOutputStream65 = composite9.out;
        comparators.Composite composite66 = composite9.addMatchMinimum();
        java.lang.Object[] objArray67 = composite9.toArray();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(dataOutputStream65);
        org.junit.Assert.assertNotNull(composite66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[true]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[true]");
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite20 = composite18.addLong((long) '#');
        comparators.Composite.Placeholder placeholder21 = comparators.Composite.MATCH_MAXIMUM;
        int int22 = placeholder21.type;
        placeholder21.type = 6;
        placeholder21.type = 90;
        boolean boolean27 = composite20.add((java.lang.Object) 90);
        int int28 = composite20.startOffset;
        byte[] byteArray29 = composite20.serialize();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(placeholder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 3, 0, 0, 0, 0, 0, 0, 0, 90, 0]");
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator33 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator36 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType0.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(byteBufferComparator33);
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(indexInfoComparator36);
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite20 = composite18.addLong((long) '#');
        comparators.Composite composite22 = composite20.addLong((long) 8);
        comparators.Composite composite23 = composite22.addMatchMinimum();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        boolean boolean42 = comparators.Composite.validate((int) ' ', byteArray39, true);
        boolean boolean43 = composite33.contains((java.lang.Object) boolean42);
        java.util.stream.Stream<java.lang.Object> objStream44 = composite33.parallelStream();
        composite33.startOffset = 8;
        comparators.Composite composite48 = composite33.addAscii("hi!");
        java.lang.String str49 = composite33.toString();
        int int50 = composite33.size();
        comparators.Composite composite51 = composite33.addMatchMinimum();
        composite33.startOffset = (short) 1;
        int int54 = comparators.Composite.compare(composite22, composite33);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean45 = comparators.Composite.validate(1, byteArray43);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.nio.ByteBuffer byteBuffer48 = comparators.Composite.serializeToByteBuffer(objList46);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList46.parallelStream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(objStream49);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        java.lang.String str36 = composite28.toString();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite28.stream();
        java.lang.Object[] objArray38 = composite28.toArray();
        java.io.ByteArrayOutputStream byteArrayOutputStream39 = composite28.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNull(byteArrayOutputStream39);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        placeholder0.type = (short) 100;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str7 = placeholder0.toString();
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.lang.String str26 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.lang.String str32 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        org.apache.cassandra.db.IColumn[] iColumnArray38 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList39 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39, iColumnArray38);
        java.lang.String str41 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType33.getReverseComparator();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        org.apache.cassandra.db.IColumn[] iColumnArray48 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList49 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49, iColumnArray48);
        java.lang.String str51 = compositeType43.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str52 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str53 = compositeType15.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator54 = compositeType15.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType15.indexReverseComparator;
        boolean boolean56 = placeholder0.equals((java.lang.Object) indexInfoComparator55);
        placeholder0.type = 77;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(100)" + "'", str7, "Placeholder(100)");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(iColumnArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(iColumnArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(indexInfoComparator54);
        org.junit.Assert.assertNotNull(indexInfoComparator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 242;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        int int92 = compositeTypeIterator91.start;
        byte[] byteArray93 = compositeTypeIterator91.bytes;
        comparators.Composite composite94 = compositeTypeIterator91.collection;
        byte[] byteArray95 = composite94.serialize();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        int int27 = composite26.size();
        comparators.Composite composite29 = composite26.addUTF8("US-ASCII");
        java.util.Spliterator<java.lang.Object> objSpliterator30 = composite26.spliterator();
        java.nio.ByteBuffer byteBuffer31 = composite26.serializeToByteBuffer();
        comparators.Composite composite32 = new comparators.Composite(byteBuffer31);
        boolean boolean34 = comparators.Composite.validate(byteBuffer31, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objSpliterator30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType0.indexReverseComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(indexInfoComparator6);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        java.io.DataOutputStream dataOutputStream21 = composite9.out;
        java.lang.String str22 = composite9.toString();
        java.util.Iterator<java.lang.Object> objItor23 = composite9.iterator();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addUTF8("UTF-8");
        boolean boolean38 = composite9.contains((java.lang.Object) composite33);
        composite33.clear();
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        int int54 = composite49.startOffset;
        boolean boolean55 = composite49.isEmpty();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        int int66 = composite65.size();
        boolean boolean67 = composite49.containsAll((java.util.Collection<java.lang.Object>) composite65);
        byte[] byteArray68 = composite49.bytes;
        byte[] byteArray69 = composite49.bytes;
        boolean boolean70 = composite33.containsAll((java.util.Collection<java.lang.Object>) composite49);
        boolean boolean71 = composite33.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(dataOutputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objItor23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        java.util.stream.Stream<java.lang.Object> objStream40 = composite39.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        int int55 = comparators.Composite.compare(byteArray46, byteArray53);
        boolean boolean57 = comparators.Composite.validate(0, byteArray53, false);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize((int) (short) 0, byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = composite39.remove((java.lang.Object) byteArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objList58);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        boolean boolean9 = comparators.Composite.validate((int) ' ', byteArray6, true);
        boolean boolean10 = comparators.Composite.validate(100, byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        java.util.List<java.lang.Object> objList17 = comparators.Composite.deserialize(byteArray15);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        byte[] byteArray32 = composite31.serialize();
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray32);
        int int34 = comparators.Composite.compare(byteArray15, byteArray32);
        int int35 = comparators.Composite.compare(byteArray6, byteArray32);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray32);
        comparators.Composite composite37 = new comparators.Composite(objList36);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(objList17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(objList36);
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        comparators.hector.CompositeSerializer compositeSerializer31 = new comparators.hector.CompositeSerializer();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        comparators.Composite composite47 = composite41.addBool(true);
        java.io.DataOutputStream dataOutputStream48 = composite41.out;
        byte[] byteArray49 = compositeSerializer31.toBytes(composite41);
        byte[] byteArray52 = null;
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        int int66 = comparators.Composite.compare(byteArray57, byteArray64);
        int int67 = comparators.Composite.compare((int) (byte) 1, byteArray52, 10, byteArray57);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        int int80 = comparators.Composite.compare(byteArray71, byteArray78);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray78);
        int int82 = comparators.Composite.compare(byteArray57, byteArray78);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteArray78);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator84 = composite24.new CompositeTypeIterator(composite41, 5, byteArray78);
        byte[] byteArray85 = compositeTypeIterator84.bytes;
        comparators.Composite composite86 = new comparators.Composite(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList87 = comparators.Composite.deserialize(127, byteArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(dataOutputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite9.stream();
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.util.RandomAccess[] randomAccessArray47 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray48 = composite46.toArray(randomAccessArray47);
        comparators.Composite composite50 = composite46.addLong((long) 67);
        byte[] byteArray51 = composite50.serialize();
        comparators.Composite composite53 = composite50.addAscii("Placeholder(58)");
        boolean boolean54 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite50);
        java.lang.String str55 = composite50.toString();
        java.io.ByteArrayOutputStream byteArrayOutputStream56 = composite50.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(randomAccessArray47);
        org.junit.Assert.assertNotNull(randomAccessArray48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "67" + "'", str55, "67");
        org.junit.Assert.assertNull(byteArrayOutputStream56);
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        int int46 = composite41.startOffset;
        int int47 = composite27.compareTo(composite41);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        comparators.Composite composite54 = composite27.addBytes(byteArray52);
        java.nio.ByteBuffer byteBuffer55 = composite54.serializeToByteBuffer();
        compositeType17.validate(byteBuffer55);
        boolean boolean57 = comparators.Composite.validate(byteBuffer55);
        comparators.Composite composite58 = new comparators.Composite(byteBuffer55);
        compositeType12.validate(byteBuffer55);
        compositeType0.validate(byteBuffer55);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType0.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteBufferComparator61);
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        comparators.Composite composite0 = new comparators.Composite();
        java.lang.Object[] objArray1 = composite0.toArray();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream14 = null;
        composite11.byteStream = byteArrayOutputStream14;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        int int33 = composite11.compareTo(composite25);
        java.lang.Object[][][] objArray34 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray35 = composite11.toArray(objArray34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite11.spliterator();
        int int37 = composite0.compareTo(composite11);
        comparators.Composite composite38 = new comparators.Composite();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        int int53 = composite38.compareTo(composite48);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        boolean boolean72 = comparators.Composite.validate((int) ' ', byteArray69, true);
        boolean boolean73 = composite63.contains((java.lang.Object) boolean72);
        java.util.Spliterator<java.lang.Object> objSpliterator74 = composite63.spliterator();
        composite63.startOffset = 1;
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray81 = new byte[] {};
        int int82 = comparators.Composite.compare(byteArray80, byteArray81);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteArray81);
        byte[] byteArray84 = comparators.Composite.serialize(objList83);
        java.util.stream.Stream<java.lang.Object> objStream85 = objList83.parallelStream();
        comparators.Composite composite86 = new comparators.Composite(objList83);
        java.lang.Object[] objArray87 = composite86.toArray();
        int int88 = composite86.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream89 = composite86.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream90 = composite86.parallelStream();
        comparators.Composite composite92 = composite86.addBool(true);
        java.io.DataOutputStream dataOutputStream93 = composite86.out;
        composite63.out = dataOutputStream93;
        composite38.out = dataOutputStream93;
        composite11.out = dataOutputStream93;
        boolean boolean97 = composite11.isEmpty();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objSpliterator74);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertNotNull(objStream90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(dataOutputStream93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        boolean boolean69 = composite32.contains((java.lang.Object) composite57);
        boolean boolean70 = composite24.addAll((java.util.Collection<java.lang.Object>) composite32);
        int int71 = composite32.startOffset;
        boolean boolean72 = composite13.add((java.lang.Object) composite32);
        java.lang.Object[] objArray73 = composite13.toArray();
        java.util.stream.Stream<java.lang.Object> objStream74 = composite13.stream();
        boolean boolean75 = composite13.isEmpty();
        byte[] byteArray76 = composite13.bytes;
        comparators.Composite composite77 = composite13.addMatchMinimum();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[67]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[67]");
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite77);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        int int16 = composite15.size();
        java.lang.Object[] objArray17 = composite15.toArray();
        byte[] byteArray18 = comparators.Composite.serialize(objArray17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 8, 0, 0, 0]");
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        int int27 = composite26.size();
        java.lang.Object[] objArray28 = composite26.toArray();
        byte[] byteArray29 = comparators.Composite.serialize(objArray28);
        byte[] byteArray30 = comparators.Composite.serialize(objArray28);
        java.nio.ByteBuffer byteBuffer31 = comparators.Composite.serializeToByteBuffer(objArray28);
        java.nio.ByteBuffer byteBuffer32 = comparators.Composite.serializeToByteBuffer(objArray28);
        java.nio.ByteBuffer byteBuffer33 = comparators.Composite.serializeToByteBuffer(objArray28);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(objList34);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite9.byteStream = byteArrayOutputStream15;
        composite9.clear();
        java.util.stream.Stream<java.lang.Object> objStream18 = composite9.stream();
        java.util.UUID uUID19 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite20 = composite9.addTimeUUID(uUID19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objStream18);
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        int int43 = composite38.startOffset;
        int int44 = composite24.compareTo(composite38);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        comparators.Composite composite51 = composite24.addBytes(byteArray49);
        java.nio.ByteBuffer byteBuffer52 = composite51.serializeToByteBuffer();
        compositeType14.validate(byteBuffer52);
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray55 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList56 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56, byteBufferArray55);
        java.lang.String str58 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator59 = compositeType54.indexComparator;
        boolean boolean60 = comparators.Composite.isValidType((java.lang.Object) compositeType54);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType14.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType54);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator62 = byteBufferComparator61.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator63 = compositeType0.thenComparing(byteBufferComparator62);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator64 = compositeType0.indexComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteBufferArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(indexInfoComparator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(byteBufferComparator62);
        org.junit.Assert.assertNotNull(byteBufferComparator63);
        org.junit.Assert.assertNotNull(indexInfoComparator64);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator18 = compositeType6.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator19 = compositeType6.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType6.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        org.apache.cassandra.db.IColumn[] iColumnArray26 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList27 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList27, iColumnArray26);
        java.lang.String str29 = compositeType21.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList27);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator30 = compositeType21.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator31 = compositeType21.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator32 = compositeType21.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator33 = compositeType6.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType21.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = byteBufferComparator34.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteBufferComparator18);
        org.junit.Assert.assertNotNull(indexInfoComparator19);
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(iColumnArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteBufferComparator30);
        org.junit.Assert.assertNotNull(indexInfoComparator31);
        org.junit.Assert.assertNotNull(indexInfoComparator32);
        org.junit.Assert.assertNotNull(byteBufferComparator33);
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(byteBufferComparator35);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        byte[] byteArray30 = comparators.Composite.serialize(objList28);
        byte[] byteArray31 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        byte[] byteArray41 = compositeListSerializer0.toBytes(objList38);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite52.compareTo(composite66);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        comparators.Composite composite79 = composite52.addBytes(byteArray77);
        java.nio.ByteBuffer byteBuffer80 = composite79.serializeToByteBuffer();
        compositeType42.validate(byteBuffer80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteBuffer80);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteBuffer80);
        java.nio.ByteBuffer byteBuffer84 = compositeListSerializer0.toByteBuffer(objList83);
        java.util.stream.Stream<java.lang.Object> objStream85 = objList83.parallelStream();
        comparators.Composite composite86 = new comparators.Composite(objList83);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(objStream85);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        boolean boolean4 = comparators.Composite.isValidType((java.lang.Object) placeholder0);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        int int7 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        java.lang.String str25 = composite9.toString();
        comparators.Composite composite26 = composite9.addMatchMaximum();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(composite26);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite10.startOffset;
        composite10.clear();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        int int44 = comparators.Composite.compare(byteArray35, byteArray42);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray42);
        composite27.bytes = byteArray42;
        boolean boolean47 = comparators.Composite.validate(1, byteArray42);
        composite10.bytes = byteArray42;
        comparators.Composite composite49 = compositeSerializer0.fromBytes(byteArray42);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        composite59.startOffset = 8;
        comparators.Composite composite74 = composite59.addAscii("hi!");
        java.lang.String str75 = composite59.toString();
        byte[] byteArray76 = composite59.bytes;
        java.nio.ByteBuffer byteBuffer77 = compositeSerializer0.toByteBuffer(composite59);
        int int79 = compositeSerializer0.computeInitialHashSize(127);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<comparators.Composite> compositeList81 = compositeSerializer0.fromBytesSet(byteBufferSet80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 0]");
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 170 + "'", int79 == 170);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        comparators.hector.CompositeSerializer compositeSerializer13 = new comparators.hector.CompositeSerializer();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.io.DataOutputStream dataOutputStream30 = composite23.out;
        byte[] byteArray31 = compositeSerializer13.toBytes(composite23);
        comparators.hector.CompositeSerializer compositeSerializer32 = new comparators.hector.CompositeSerializer();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        int int45 = comparators.Composite.compare(byteArray36, byteArray43);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray43);
        comparators.Composite composite47 = compositeSerializer32.fromBytes(byteArray43);
        int int49 = compositeSerializer32.computeInitialHashSize(1);
        comparators.hector.CompositeListSerializer compositeListSerializer50 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator56 = compositeType51.indexComparator;
        comparators.CompositeType compositeType57 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray58 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList59 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59, byteBufferArray58);
        java.lang.String str61 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator62 = compositeType51.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType57);
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.lang.String str68 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.util.List<java.util.List<java.lang.Object>> objListList69 = compositeListSerializer50.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList65);
        int int71 = compositeListSerializer50.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer72 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType73 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray74 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList75 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75, byteBufferArray74);
        java.lang.String str77 = compositeType73.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator78 = compositeType73.indexComparator;
        comparators.CompositeType compositeType79 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray80 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList81 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList81, byteBufferArray80);
        java.lang.String str83 = compositeType79.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList81);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator84 = compositeType73.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType79);
        comparators.CompositeType compositeType85 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray86 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList87 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList87, byteBufferArray86);
        java.lang.String str89 = compositeType85.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList87);
        java.lang.String str90 = compositeType79.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList87);
        java.util.List<java.util.List<java.lang.Object>> objListList91 = compositeListSerializer72.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList87);
        java.util.List<java.nio.ByteBuffer> byteBufferList92 = compositeListSerializer50.toBytesList(objListList91);
        java.util.List<comparators.Composite> compositeList93 = compositeSerializer32.fromBytesList(byteBufferList92);
        java.util.List<java.nio.ByteBuffer> byteBufferList94 = compositeSerializer13.toBytesList(compositeList93);
        java.lang.String str95 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList94);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator96 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator97 = compositeType0.indexReverseComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(dataOutputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexInfoComparator56);
        org.junit.Assert.assertNotNull(compositeType57);
        org.junit.Assert.assertNotNull(byteBufferArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteBufferComparator62);
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(objListList69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
        org.junit.Assert.assertNotNull(compositeType73);
        org.junit.Assert.assertNotNull(byteBufferArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(indexInfoComparator78);
        org.junit.Assert.assertNotNull(compositeType79);
        org.junit.Assert.assertNotNull(byteBufferArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteBufferComparator84);
        org.junit.Assert.assertNotNull(compositeType85);
        org.junit.Assert.assertNotNull(byteBufferArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(objListList91);
        org.junit.Assert.assertNotNull(byteBufferList92);
        org.junit.Assert.assertNotNull(compositeList93);
        org.junit.Assert.assertNotNull(byteBufferList94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(indexInfoComparator96);
        org.junit.Assert.assertNotNull(indexInfoComparator97);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        java.util.List<java.lang.Object> objList10 = comparators.Composite.deserialize(byteArray8);
        byte[] byteArray11 = comparators.Composite.serialize(objList10);
        java.util.stream.Stream<java.lang.Object> objStream12 = objList10.parallelStream();
        comparators.Composite composite13 = new comparators.Composite(objList10);
        java.lang.Object[] objArray14 = composite13.toArray();
        int int15 = composite13.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream16 = composite13.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream17 = composite13.parallelStream();
        int int18 = composite13.startOffset;
        int int19 = composite13.startOffset;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        boolean boolean41 = composite13.containsAll((java.util.Collection<java.lang.Object>) composite29);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray42 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray43 = composite13.toArray(compositeListSerializerArray42);
        boolean boolean44 = placeholder0.equals((java.lang.Object) composite13);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.util.RandomAccess[] randomAccessArray55 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray56 = composite54.toArray(randomAccessArray55);
        comparators.Composite composite58 = composite54.addUTF8("UTF-8");
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        boolean boolean78 = comparators.Composite.validate((int) ' ', byteArray75, true);
        boolean boolean79 = composite69.contains((java.lang.Object) boolean78);
        java.util.stream.Stream<java.lang.Object> objStream80 = composite69.parallelStream();
        composite69.startOffset = 8;
        comparators.Composite composite84 = composite69.addAscii("hi!");
        comparators.Composite composite86 = composite69.addLong((long) 4);
        int int87 = composite86.size();
        java.lang.Object[] objArray88 = composite86.toArray();
        byte[] byteArray89 = comparators.Composite.serialize(objArray88);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator90 = composite13.new CompositeTypeIterator(composite54, (int) (byte) 1, byteArray89);
        java.io.DataOutputStream dataOutputStream91 = composite54.out;
        comparators.Composite composite93 = composite54.addAscii("80,6");
        java.lang.String str94 = composite54.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(objList10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray42);
        org.junit.Assert.assertNotNull(compositeListSerializerArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(randomAccessArray55);
        org.junit.Assert.assertNotNull(randomAccessArray56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(dataOutputStream91);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "UTF-8,80,6" + "'", str94, "UTF-8,80,6");
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        byte[] byteArray12 = compositeListSerializer1.toBytes(objList8);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        byte[] byteArray21 = comparators.Composite.serialize(objList19);
        byte[] byteArray22 = compositeListSerializer1.toBytes(objList19);
        byte[] byteArray23 = null;
        java.util.List<java.lang.Object> objList24 = compositeListSerializer1.fromBytes(byteArray23);
        int int26 = compositeListSerializer1.computeInitialHashSize(77);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        int int55 = composite53.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream56 = composite53.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream57 = composite53.parallelStream();
        int int58 = composite53.startOffset;
        int int59 = composite39.compareTo(composite53);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        comparators.Composite composite66 = composite39.addBytes(byteArray64);
        byte[] byteArray68 = null;
        int int69 = comparators.Composite.compare(3, byteArray64, 7, byteArray68);
        boolean boolean70 = comparators.Composite.validate(47, byteArray64);
        boolean boolean71 = comparators.Composite.validate((-1), byteArray64);
        java.util.List<java.lang.Object> objList72 = compositeListSerializer1.fromBytes(byteArray64);
        boolean boolean73 = comparators.Composite.validate(141, byteArray64);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 103 + "'", int26 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(composite66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        boolean boolean55 = comparators.Composite.validate((int) ' ', byteArray52, true);
        boolean boolean56 = composite46.contains((java.lang.Object) boolean55);
        java.util.Spliterator<java.lang.Object> objSpliterator57 = composite46.spliterator();
        byte[] byteArray58 = compositeSerializer0.toBytes(composite46);
        java.util.stream.Stream<java.lang.Object> objStream59 = composite46.parallelStream();
        composite46.startOffset = 1;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objSpliterator57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) byteArray18);
        comparators.Composite composite29 = composite9.addBytes(byteArray18);
        comparators.Composite composite31 = composite29.addUTF8("true,6,434d500103000000000000004300");
        comparators.Composite composite33 = composite31.addBool(false);
        java.util.stream.Stream<java.lang.Object> objStream34 = composite33.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(objStream34);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        org.apache.cassandra.db.IColumn[] iColumnArray38 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList39 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39, iColumnArray38);
        java.lang.String str41 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType33.getReverseComparator();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        org.apache.cassandra.db.IColumn[] iColumnArray48 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList49 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49, iColumnArray48);
        java.lang.String str51 = compositeType43.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str52 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str53 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator54 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType0.getReverseComparator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(iColumnArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(iColumnArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(indexInfoComparator54);
        org.junit.Assert.assertNotNull(byteBufferComparator55);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray19 = composite10.serialize();
        boolean boolean20 = comparators.Composite.isValidType((java.lang.Object) composite10);
        byte[] byteArray21 = composite10.bytes;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        boolean boolean30 = comparators.Composite.validate((int) ' ', byteArray27, true);
        comparators.Composite composite31 = composite10.addBytes(byteArray27);
        java.lang.String str32 = composite31.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "true" + "'", str32, "true");
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        comparators.Composite composite40 = new comparators.Composite();
        comparators.Composite composite42 = composite40.addUTF8("Placeholder(58)");
        comparators.Composite composite44 = composite42.addLong((long) (-1));
        boolean boolean45 = composite9.equals((java.lang.Object) composite44);
        java.lang.String str46 = composite44.toString();
        java.io.DataOutputStream dataOutputStream47 = composite44.out;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        int int62 = composite57.startOffset;
        int int63 = composite57.startOffset;
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray79 = new byte[] {};
        int int80 = comparators.Composite.compare(byteArray78, byteArray79);
        boolean boolean82 = comparators.Composite.validate((int) ' ', byteArray79, true);
        boolean boolean83 = composite73.contains((java.lang.Object) boolean82);
        java.util.Spliterator<java.lang.Object> objSpliterator84 = composite73.spliterator();
        boolean boolean85 = composite57.containsAll((java.util.Collection<java.lang.Object>) composite73);
        boolean boolean87 = composite57.contains((java.lang.Object) (-1));
        int int88 = composite57.size();
        java.util.Spliterator<java.lang.Object> objSpliterator89 = composite57.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream90 = composite57.byteStream;
        composite57.clear();
        composite57.clear();
        comparators.Composite composite94 = composite57.addAscii("Placeholder(1)");
        boolean boolean95 = composite44.addAll((java.util.Collection<java.lang.Object>) composite94);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Placeholder(58),-1" + "'", str46, "Placeholder(58),-1");
        org.junit.Assert.assertNull(dataOutputStream47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objSpliterator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(objSpliterator89);
        org.junit.Assert.assertNull(byteArrayOutputStream90);
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        boolean boolean59 = comparators.Composite.validate(byteBuffer56);
        boolean boolean61 = comparators.Composite.validate(byteBuffer56, false);
        comparators.Composite composite62 = new comparators.Composite(byteBuffer56);
        java.util.Spliterator<java.lang.Object> objSpliterator63 = composite62.spliterator();
        java.lang.String str64 = composite62.toString();
        java.util.Iterator<java.lang.Object> objItor65 = composite62.iterator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objSpliterator63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(objItor65);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        java.lang.String str36 = composite28.toString();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite28.stream();
        java.lang.Object[] objArray38 = composite28.toArray();
        java.io.DataOutputStream dataOutputStream39 = null;
        composite28.out = dataOutputStream39;
        byte[] byteArray41 = composite28.bytes;
        comparators.Composite composite43 = composite28.addLong((long) 95);
        comparators.Composite composite45 = composite28.addBool(false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(composite45);
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.startOffset;
        byte[] byteArray41 = composite9.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(byteArray41);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        byte[] byteArray2 = null;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        int int16 = comparators.Composite.compare(byteArray7, byteArray14);
        int int17 = comparators.Composite.compare((int) (byte) 1, byteArray2, 10, byteArray7);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        int int30 = comparators.Composite.compare(byteArray21, byteArray28);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray28);
        int int32 = comparators.Composite.compare(byteArray7, byteArray28);
        comparators.Composite composite33 = new comparators.Composite(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.util.RandomAccess[] randomAccessArray53 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray54 = composite52.toArray(randomAccessArray53);
        comparators.Composite composite56 = composite52.addLong((long) 67);
        byte[] byteArray57 = composite56.serialize();
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray57);
        int int59 = comparators.Composite.compare(byteArray40, byteArray57);
        comparators.hector.CompositeSerializer compositeSerializer60 = new comparators.hector.CompositeSerializer();
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize(byteArray65);
        byte[] byteArray68 = comparators.Composite.serialize(objList67);
        java.util.stream.Stream<java.lang.Object> objStream69 = objList67.parallelStream();
        comparators.Composite composite70 = new comparators.Composite(objList67);
        java.lang.Object[] objArray71 = composite70.toArray();
        int int72 = composite70.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream73 = composite70.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream74 = composite70.parallelStream();
        comparators.Composite composite76 = composite70.addBool(true);
        java.io.DataOutputStream dataOutputStream77 = composite70.out;
        byte[] byteArray78 = compositeSerializer60.toBytes(composite70);
        int int79 = comparators.Composite.compare(byteArray57, byteArray78);
        boolean boolean80 = comparators.Composite.validate(1, byteArray78);
        int int81 = comparators.Composite.compare(0, byteArray28, 8, byteArray78);
        comparators.Composite composite82 = new comparators.Composite(byteArray78);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteArray78);
        byte[] byteArray84 = comparators.Composite.serialize(objList83);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(randomAccessArray53);
        org.junit.Assert.assertNotNull(randomAccessArray54);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(objList67);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(dataOutputStream77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite25.parallelStream();
        boolean boolean37 = composite25.isEmpty();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        boolean boolean51 = composite25.containsAll((java.util.Collection<java.lang.Object>) composite47);
        comparators.Composite composite53 = composite25.addLong((long) (short) 1);
        comparators.Composite composite55 = composite53.addBool(true);
        comparators.Composite composite57 = composite55.addBool(true);
        boolean boolean58 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite55);
        java.nio.ByteBuffer byteBuffer59 = composite9.serializeToByteBuffer();
        comparators.Composite composite61 = composite9.addAscii("true,6");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(composite61);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.offset;
        int int82 = compositeTypeIterator80.start;
        int int83 = compositeTypeIterator80.offset;
        byte[] byteArray84 = compositeTypeIterator80.bytes;
        compositeTypeIterator80.type = (short) 0;
        int int87 = compositeTypeIterator80.len;
        int int88 = compositeTypeIterator80.type;
        int int89 = compositeTypeIterator80.type;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 67 + "'", int82 == 67);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 67 + "'", int83 == 67);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.nio.ByteBuffer> byteBufferList42 = compositeListSerializer0.toBytesList(objListList41);
        comparators.hector.CompositeListSerializer compositeListSerializer43 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator49 = compositeType44.indexComparator;
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType44.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType50);
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.lang.String str61 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.List<java.util.List<java.lang.Object>> objListList62 = compositeListSerializer43.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet63 = compositeListSerializer0.toBytesSet(objListList62);
        int int65 = compositeListSerializer0.computeInitialHashSize(0);
        comparators.hector.CompositeListSerializer compositeListSerializer66 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray71);
        byte[] byteArray74 = comparators.Composite.serialize(objList73);
        java.util.stream.Stream<java.lang.Object> objStream75 = objList73.parallelStream();
        comparators.Composite composite76 = new comparators.Composite(objList73);
        byte[] byteArray77 = compositeListSerializer66.toBytes(objList73);
        byte[] byteArray78 = comparators.Composite.serialize(objList73);
        byte[] byteArray79 = comparators.Composite.serialize(objList73);
        byte[] byteArray80 = compositeListSerializer0.toBytes(objList73);
        java.util.List<java.util.List<java.lang.Object>> objListList81 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.nio.ByteBuffer> byteBufferSet82 = compositeListSerializer0.toBytesSet(objListList81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(byteBufferList42);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(indexInfoComparator49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteBufferComparator55);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(objListList62);
        org.junit.Assert.assertNotNull(byteBufferSet63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertNull(byteArray80);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.Composite composite11 = new comparators.Composite();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        int int26 = composite11.compareTo(composite21);
        comparators.hector.CompositeListSerializer compositeListSerializer27 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.List<java.util.List<java.lang.Object>> objListList46 = compositeListSerializer27.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList42);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType47.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        java.lang.Object[] objArray51 = new java.lang.Object[] { compositeListSerializer27, compositeType49 };
        java.lang.Object[][] objArray52 = new java.lang.Object[][] { objArray51 };
        java.lang.Object[][] objArray53 = composite11.toArray(objArray52);
        java.lang.Object[][] objArray54 = composite9.toArray(objArray53);
        comparators.hector.CompositeListSerializer compositeListSerializer55 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        byte[] byteArray66 = compositeListSerializer55.toBytes(objList62);
        int int68 = compositeListSerializer55.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer69 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray71 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList72 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72, byteBufferArray71);
        java.lang.String str74 = compositeType70.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator75 = compositeType70.indexComparator;
        comparators.CompositeType compositeType76 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray77 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList78 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList78, byteBufferArray77);
        java.lang.String str80 = compositeType76.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList78);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator81 = compositeType70.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType76);
        comparators.CompositeType compositeType82 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray83 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList84 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList84, byteBufferArray83);
        java.lang.String str86 = compositeType82.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList84);
        java.lang.String str87 = compositeType76.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList84);
        java.util.List<java.util.List<java.lang.Object>> objListList88 = compositeListSerializer69.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList84);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet89 = compositeListSerializer55.toBytesSet(objListList88);
        boolean boolean90 = composite9.add((java.lang.Object) byteBufferSet89);
        java.io.ByteArrayOutputStream byteArrayOutputStream91 = composite9.byteStream;
        int int92 = composite9.startOffset;
        boolean boolean93 = composite9.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objListList46);
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 43 + "'", int68 == 43);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(indexInfoComparator75);
        org.junit.Assert.assertNotNull(compositeType76);
        org.junit.Assert.assertNotNull(byteBufferArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteBufferComparator81);
        org.junit.Assert.assertNotNull(compositeType82);
        org.junit.Assert.assertNotNull(byteBufferArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(objListList88);
        org.junit.Assert.assertNotNull(byteBufferSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(byteArrayOutputStream91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        boolean boolean32 = composite9.isEmpty();
        byte[] byteArray33 = composite9.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(byteArray33);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        composite9.startOffset = 1;
        byte[] byteArray23 = composite9.bytes;
        byte[] byteArray24 = composite9.serialize();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNull(byteArray24);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray34);
        comparators.Composite composite38 = new comparators.Composite(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = composite38.stream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNotNull(objStream39);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) byteArray18);
        comparators.Composite composite29 = composite9.addBytes(byteArray18);
        java.util.Iterator<java.lang.Object> objItor30 = composite29.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        boolean boolean9 = comparators.Composite.validate((int) ' ', byteArray6, true);
        boolean boolean10 = comparators.Composite.validate(100, byteArray6);
        java.util.List<java.lang.Object> objList11 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        boolean boolean20 = comparators.Composite.validate(90, byteArray17);
        int int21 = comparators.Composite.compare(byteArray6, byteArray17);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        boolean boolean32 = comparators.Composite.validate((int) ' ', byteArray29, true);
        boolean boolean33 = comparators.Composite.validate(100, byteArray29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.util.RandomAccess[] randomAccessArray51 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray52 = composite50.toArray(randomAccessArray51);
        comparators.Composite composite54 = composite50.addLong((long) 67);
        byte[] byteArray55 = composite54.serialize();
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray55);
        int int57 = comparators.Composite.compare(byteArray38, byteArray55);
        int int58 = comparators.Composite.compare(byteArray29, byteArray55);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        boolean boolean69 = comparators.Composite.validate((int) ' ', byteArray66, true);
        boolean boolean70 = comparators.Composite.validate(100, byteArray66);
        int int71 = comparators.Composite.compare((int) (short) 100, byteArray29, 0, byteArray66);
        int int72 = comparators.Composite.compare(byteArray6, byteArray66);
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray66);
        java.util.List<java.lang.Object> objList74 = comparators.Composite.deserialize(byteArray66);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objList11);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(randomAccessArray51);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNotNull(objList74);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        java.io.DataOutputStream dataOutputStream21 = composite9.out;
        java.lang.String str22 = composite9.toString();
        java.util.Iterator<java.lang.Object> objItor23 = composite9.iterator();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addUTF8("UTF-8");
        boolean boolean38 = composite9.contains((java.lang.Object) composite33);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        comparators.Composite composite62 = composite48.addUTF8("Placeholder(1)");
        int int63 = composite48.startOffset;
        java.lang.Object[] objArray64 = composite48.toArray();
        boolean boolean65 = composite9.addAll((java.util.Collection<java.lang.Object>) composite48);
        comparators.Composite composite67 = composite9.addBool(false);
        comparators.Composite composite69 = composite9.addUTF8("Placeholder(90)");
        java.util.UUID uUID70 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite71 = composite69.addTimeUUID(uUID70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(dataOutputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objItor23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[Placeholder(1)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[Placeholder(1)]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertNotNull(composite69);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator47 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = byteBufferComparator48.reversed();
        boolean boolean50 = comparators.Composite.isValidType((java.lang.Object) byteBufferComparator49);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(indexInfoComparator47);
        org.junit.Assert.assertNotNull(byteBufferComparator48);
        org.junit.Assert.assertNotNull(byteBufferComparator49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteBuffer40);
        comparators.CompositeType compositeType48 = new comparators.CompositeType();
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite73.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream77 = composite73.parallelStream();
        int int78 = composite73.startOffset;
        int int79 = composite59.compareTo(composite73);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        comparators.Composite composite86 = composite59.addBytes(byteArray84);
        java.nio.ByteBuffer byteBuffer87 = composite86.serializeToByteBuffer();
        compositeType49.validate(byteBuffer87);
        boolean boolean89 = comparators.Composite.validate(byteBuffer87);
        comparators.Composite composite90 = new comparators.Composite(byteBuffer87);
        java.nio.ByteBuffer byteBuffer91 = null;
        int int92 = compositeType48.compare(byteBuffer87, byteBuffer91);
        comparators.Composite composite93 = new comparators.Composite(byteBuffer87);
        comparators.Composite composite94 = new comparators.Composite(byteBuffer87);
        comparators.Composite composite95 = new comparators.Composite(byteBuffer87);
        boolean boolean97 = comparators.Composite.validate(byteBuffer87, true);
        int int98 = comparators.Composite.compare(byteBuffer40, byteBuffer87);
        java.util.List<java.lang.Object> objList99 = comparators.Composite.deserialize(byteBuffer87);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(objList99);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteArray88);
        boolean boolean92 = comparators.Composite.validate((int) (short) 100, byteArray88, false);
        compositeTypeIterator80.bytes = byteArray88;
        compositeTypeIterator80.start = (short) 1;
        comparators.Composite composite96 = compositeTypeIterator80.collection;
        compositeTypeIterator80.type = 103;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(composite96);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        java.lang.String str26 = composite9.toString();
        comparators.Composite composite28 = composite9.addAscii("");
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        boolean boolean47 = comparators.Composite.validate((int) ' ', byteArray44, true);
        boolean boolean48 = composite38.contains((java.lang.Object) boolean47);
        java.util.Spliterator<java.lang.Object> objSpliterator49 = composite38.spliterator();
        java.io.DataOutputStream dataOutputStream50 = composite38.out;
        java.lang.String str51 = composite38.toString();
        int int52 = composite28.compareTo(composite38);
        java.lang.Object[] objArray53 = composite28.toArray();
        comparators.Composite composite54 = new comparators.Composite(objArray53);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(composite28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objSpliterator49);
        org.junit.Assert.assertNull(dataOutputStream50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        boolean boolean62 = composite9.equals((java.lang.Object) objList61);
        java.io.DataOutputStream dataOutputStream63 = composite9.out;
        java.io.ByteArrayOutputStream byteArrayOutputStream64 = composite9.byteStream;
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        boolean boolean83 = comparators.Composite.validate((int) ' ', byteArray80, true);
        boolean boolean84 = composite74.contains((java.lang.Object) boolean83);
        java.util.stream.Stream<java.lang.Object> objStream85 = composite74.parallelStream();
        composite74.startOffset = 8;
        comparators.Composite composite89 = composite74.addAscii("hi!");
        int int90 = composite74.startOffset;
        int int91 = comparators.Composite.compare(composite9, composite74);
        java.nio.ByteBuffer byteBuffer92 = composite74.serializeToByteBuffer();
        java.util.Iterator<java.lang.Object> objItor93 = composite74.iterator();
        java.lang.String str94 = composite74.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(dataOutputStream63);
        org.junit.Assert.assertNull(byteArrayOutputStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(composite89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(objItor93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        boolean boolean19 = comparators.Composite.isValidType((java.lang.Object) compositeSerializer0);
        byte[] byteArray20 = null;
        comparators.Composite composite21 = compositeSerializer0.fromBytes(byteArray20);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream35 = composite31.parallelStream();
        int int36 = composite31.startOffset;
        boolean boolean37 = composite31.isEmpty();
        java.lang.String str38 = composite31.toString();
        comparators.Composite composite40 = composite31.addUTF8("Placeholder(100)");
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.util.RandomAccess[] randomAccessArray51 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray52 = composite50.toArray(randomAccessArray51);
        comparators.Composite composite54 = composite50.addUTF8("UTF-8");
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream68 = null;
        composite65.byteStream = byteArrayOutputStream68;
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        comparators.Composite composite85 = composite79.addBool(true);
        java.util.Iterator<java.lang.Object> objItor86 = composite79.iterator();
        int int87 = composite65.compareTo(composite79);
        byte[] byteArray88 = composite79.bytes;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator89 = composite40.new CompositeTypeIterator(composite50, 455, byteArray88);
        java.util.Iterator<java.lang.Object> objItor90 = composite40.iterator();
        comparators.Composite composite92 = composite40.addBool(false);
        comparators.Composite composite94 = composite40.addUTF8("Placeholder(90)");
        java.nio.ByteBuffer byteBuffer95 = compositeSerializer0.toByteBuffer(composite40);
        comparators.Composite composite97 = composite40.addUTF8("0");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(randomAccessArray51);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(objItor86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objItor90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertNotNull(byteBuffer95);
        org.junit.Assert.assertNotNull(composite97);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        boolean boolean40 = comparators.Composite.validate(byteBuffer38);
        comparators.Composite composite41 = new comparators.Composite(byteBuffer38);
        java.lang.Object[] objArray42 = composite41.toArray();
        comparators.Composite composite43 = new comparators.Composite(objArray42);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[[]]");
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        comparators.hector.CompositeListSerializer compositeListSerializer2 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray4 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList5 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5, byteBufferArray4);
        java.lang.String str7 = compositeType3.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator8 = compositeType3.indexComparator;
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator14 = compositeType3.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.lang.String str20 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.List<java.util.List<java.lang.Object>> objListList21 = compositeListSerializer2.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList17);
        int int23 = compositeListSerializer2.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer24 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType25 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray26 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList27 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27, byteBufferArray26);
        java.lang.String str29 = compositeType25.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator30 = compositeType25.indexComparator;
        comparators.CompositeType compositeType31 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray32 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList33 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33, byteBufferArray32);
        java.lang.String str35 = compositeType31.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator36 = compositeType25.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType31);
        comparators.CompositeType compositeType37 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray38 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList39 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39, byteBufferArray38);
        java.lang.String str41 = compositeType37.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39);
        java.lang.String str42 = compositeType31.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39);
        java.util.List<java.util.List<java.lang.Object>> objListList43 = compositeListSerializer24.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList39);
        java.util.List<java.nio.ByteBuffer> byteBufferList44 = compositeListSerializer2.toBytesList(objListList43);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType46 = new comparators.CompositeType();
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.lang.Object[] objArray72 = composite71.toArray();
        int int73 = composite71.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream74 = composite71.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream75 = composite71.parallelStream();
        int int76 = composite71.startOffset;
        int int77 = composite57.compareTo(composite71);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        comparators.Composite composite84 = composite57.addBytes(byteArray82);
        java.nio.ByteBuffer byteBuffer85 = composite84.serializeToByteBuffer();
        compositeType47.validate(byteBuffer85);
        boolean boolean87 = comparators.Composite.validate(byteBuffer85);
        comparators.Composite composite88 = new comparators.Composite(byteBuffer85);
        java.nio.ByteBuffer byteBuffer89 = null;
        int int90 = compositeType46.compare(byteBuffer85, byteBuffer89);
        compositeType45.validate(byteBuffer85);
        java.util.List<java.lang.Object> objList92 = comparators.Composite.deserialize(byteBuffer85);
        java.nio.ByteBuffer byteBuffer93 = compositeListSerializer2.toByteBuffer(objList92);
        comparators.Composite composite94 = new comparators.Composite(objList92);
        byte[] byteArray95 = comparators.Composite.serialize(objList92);
        java.util.List<java.lang.Object> objList96 = comparators.Composite.deserialize(0, byteArray95);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList97 = comparators.Composite.deserialize(810, byteArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(indexInfoComparator8);
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteBufferComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(objListList21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(compositeType25);
        org.junit.Assert.assertNotNull(byteBufferArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(indexInfoComparator30);
        org.junit.Assert.assertNotNull(compositeType31);
        org.junit.Assert.assertNotNull(byteBufferArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteBufferComparator36);
        org.junit.Assert.assertNotNull(compositeType37);
        org.junit.Assert.assertNotNull(byteBufferArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(objListList43);
        org.junit.Assert.assertNotNull(byteBufferList44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(objList92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertNotNull(objList96);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        compositeTypeIterator80.type = 134;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.util.RandomAccess[] randomAccessArray51 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray52 = composite50.toArray(randomAccessArray51);
        comparators.Composite composite54 = composite50.addLong((long) 67);
        byte[] byteArray55 = composite54.serialize();
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray55);
        int int57 = comparators.Composite.compare(byteArray38, byteArray55);
        comparators.hector.CompositeSerializer compositeSerializer58 = new comparators.hector.CompositeSerializer();
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        comparators.Composite composite74 = composite68.addBool(true);
        java.io.DataOutputStream dataOutputStream75 = composite68.out;
        byte[] byteArray76 = compositeSerializer58.toBytes(composite68);
        int int77 = comparators.Composite.compare(byteArray55, byteArray76);
        boolean boolean78 = comparators.Composite.validate(1, byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        boolean boolean80 = comparators.Composite.validate(3, byteArray76);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray76);
        composite9.bytes = byteArray76;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(randomAccessArray51);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(dataOutputStream75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objList81);
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        comparators.Composite composite84 = compositeTypeIterator80.collection;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(composite84);
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        int int16 = composite15.size();
        comparators.Composite composite17 = composite15.addMatchMaximum();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        boolean boolean36 = comparators.Composite.validate((int) ' ', byteArray33, true);
        boolean boolean37 = composite27.contains((java.lang.Object) boolean36);
        java.util.stream.Stream<java.lang.Object> objStream38 = composite27.parallelStream();
        composite27.startOffset = 8;
        comparators.Composite composite42 = composite27.addAscii("hi!");
        comparators.Composite composite44 = composite27.addLong((long) 4);
        int int45 = composite44.size();
        comparators.Composite composite47 = composite44.addUTF8("US-ASCII");
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.util.RandomAccess[] randomAccessArray58 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray59 = composite57.toArray(randomAccessArray58);
        comparators.Composite composite61 = composite57.addLong((long) 67);
        comparators.Composite composite63 = composite61.addBool(true);
        comparators.Composite composite65 = composite61.addLong((long) 2);
        java.io.ByteArrayOutputStream byteArrayOutputStream66 = composite65.byteStream;
        composite47.byteStream = byteArrayOutputStream66;
        composite15.byteStream = byteArrayOutputStream66;
        java.lang.Object[] objArray69 = composite15.toArray();
        java.nio.ByteBuffer byteBuffer70 = comparators.Composite.serializeToByteBuffer(objArray69);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(randomAccessArray58);
        org.junit.Assert.assertNotNull(randomAccessArray59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteArrayOutputStream66);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream66.toString(), "CMP\001\003\000\000\000\000\000\000\000C\002\001\003\000\000\000\000\000\000\000\002\000");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[67, true, 2]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[67, true, 2]");
        org.junit.Assert.assertNotNull(byteBuffer70);
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        int int17 = compositeSerializer0.computeInitialHashSize(1);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        comparators.Composite composite33 = composite31.addBool(true);
        comparators.Composite composite35 = composite31.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer36 = composite31.serializeToByteBuffer();
        comparators.Composite composite37 = compositeSerializer0.fromByteBuffer(byteBuffer36);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        boolean boolean56 = comparators.Composite.validate((int) ' ', byteArray53, true);
        boolean boolean57 = composite47.contains((java.lang.Object) boolean56);
        java.util.stream.Stream<java.lang.Object> objStream58 = composite47.parallelStream();
        composite47.startOffset = 8;
        comparators.Composite composite62 = composite47.addAscii("hi!");
        comparators.Composite composite64 = composite47.addLong((long) 4);
        byte[] byteArray65 = compositeSerializer0.toBytes(composite64);
        comparators.Composite composite67 = composite64.addUTF8("UTF-8");
        comparators.Composite composite69 = composite67.addBool(false);
        composite69.startOffset = 29;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.stream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertNotNull(composite69);
        org.junit.Assert.assertNotNull(objStream72);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        boolean boolean4 = comparators.Composite.isValidType((java.lang.Object) placeholder0);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        java.lang.String str7 = placeholder0.toString();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        comparators.Composite composite23 = composite21.addBool(true);
        comparators.Composite composite25 = composite21.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator26 = composite21.spliterator();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        boolean boolean45 = comparators.Composite.validate((int) ' ', byteArray42, true);
        boolean boolean46 = composite36.contains((java.lang.Object) boolean45);
        java.util.Spliterator<java.lang.Object> objSpliterator47 = composite36.spliterator();
        java.io.DataOutputStream dataOutputStream48 = composite36.out;
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite73.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream77 = composite73.parallelStream();
        int int78 = composite73.startOffset;
        int int79 = composite59.compareTo(composite73);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        comparators.Composite composite86 = composite59.addBytes(byteArray84);
        java.util.List<java.lang.Object> objList87 = comparators.Composite.deserialize(byteArray84);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator88 = composite21.new CompositeTypeIterator(composite36, 67, byteArray84);
        int int89 = compositeTypeIterator88.start;
        compositeTypeIterator88.len = 3;
        byte[] byteArray92 = compositeTypeIterator88.bytes;
        comparators.Composite composite93 = compositeTypeIterator88.collection;
        boolean boolean94 = placeholder0.equals((java.lang.Object) composite93);
        java.lang.String str95 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(-1)" + "'", str7, "Placeholder(-1)");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(composite25);
        org.junit.Assert.assertNotNull(objSpliterator26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objSpliterator47);
        org.junit.Assert.assertNull(dataOutputStream48);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(objList87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 67 + "'", int89 == 67);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Placeholder(-1)" + "'", str95, "Placeholder(-1)");
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream28 = null;
        composite25.byteStream = byteArrayOutputStream28;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        comparators.Composite composite45 = composite39.addBool(true);
        java.util.Iterator<java.lang.Object> objItor46 = composite39.iterator();
        int int47 = composite25.compareTo(composite39);
        boolean boolean48 = composite9.addAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray49 = composite9.bytes;
        comparators.Composite composite51 = composite9.addUTF8("Placeholder(35)");
        java.util.stream.Stream<java.lang.Object> objStream52 = composite51.stream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(objItor46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(objStream52);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        boolean boolean46 = comparators.Composite.isValidType((java.lang.Object) compositeType40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator49 = compositeType0.indexReverseComparator;
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        org.apache.cassandra.db.IColumn[] iColumnArray55 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList56 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList56, iColumnArray55);
        java.lang.String str58 = compositeType50.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList56);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator59 = compositeType50.getReverseComparator();
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        org.apache.cassandra.db.IColumn[] iColumnArray65 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList66 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList66, iColumnArray65);
        java.lang.String str68 = compositeType60.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList66);
        java.lang.String str69 = compositeType50.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList66);
        comparators.hector.CompositeListSerializer compositeListSerializer70 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator76 = compositeType71.indexComparator;
        comparators.CompositeType compositeType77 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray78 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList79 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79, byteBufferArray78);
        java.lang.String str81 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator82 = compositeType71.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType77);
        comparators.CompositeType compositeType83 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray84 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList85 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85, byteBufferArray84);
        java.lang.String str87 = compositeType83.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85);
        java.lang.String str88 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85);
        java.util.List<java.util.List<java.lang.Object>> objListList89 = compositeListSerializer70.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList85);
        java.lang.String str90 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85);
        java.lang.String str91 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator92 = compositeType0.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
        org.junit.Assert.assertNotNull(byteBufferComparator48);
        org.junit.Assert.assertNotNull(indexInfoComparator49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(iColumnArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteBufferComparator59);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(iColumnArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(indexInfoComparator76);
        org.junit.Assert.assertNotNull(compositeType77);
        org.junit.Assert.assertNotNull(byteBufferArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteBufferComparator82);
        org.junit.Assert.assertNotNull(compositeType83);
        org.junit.Assert.assertNotNull(byteBufferArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(objListList89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteBufferComparator92);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        boolean boolean25 = comparators.Composite.isValidType((java.lang.Object) composite9);
        java.lang.String str26 = composite9.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator4 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType3.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType3.indexReverseComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType7.indexComparator;
        boolean boolean13 = comparators.Composite.isValidType((java.lang.Object) compositeType7);
        comparators.CompositeType compositeType14 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator15 = compositeType14.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator16 = compositeType7.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType14);
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator22 = compositeType17.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator23 = compositeType14.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        org.apache.cassandra.db.IColumn[] iColumnArray24 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList25 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList25, iColumnArray24);
        java.lang.String str27 = compositeType14.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList25);
        java.lang.String str28 = compositeType3.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList25);
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferComparator4);
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator15);
        org.junit.Assert.assertNotNull(byteBufferComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(indexInfoComparator22);
        org.junit.Assert.assertNotNull(byteBufferComparator23);
        org.junit.Assert.assertNotNull(iColumnArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.size();
        java.util.Spliterator<java.lang.Object> objSpliterator41 = composite9.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream42 = composite9.byteStream;
        comparators.Composite composite44 = composite9.addLong((long) (short) 100);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        int int69 = composite64.startOffset;
        int int70 = comparators.Composite.compare(composite54, composite64);
        int int71 = composite64.size();
        comparators.Composite composite73 = composite64.addAscii("Placeholder(58)");
        composite64.clear();
        java.lang.String str75 = composite64.toString();
        int int76 = comparators.Composite.compare(composite9, composite64);
        java.io.DataOutputStream dataOutputStream77 = composite9.out;
        comparators.Composite composite79 = composite9.addLong((long) 14);
        boolean boolean80 = composite9.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objSpliterator41);
        org.junit.Assert.assertNull(byteArrayOutputStream42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(dataOutputStream77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 1;
        int int84 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (byte) 100;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.util.Iterator<java.lang.Object> objItor17 = composite10.iterator();
        comparators.Composite composite18 = new comparators.Composite();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite18.compareTo(composite28);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        boolean boolean52 = comparators.Composite.validate((int) ' ', byteArray49, true);
        boolean boolean53 = composite43.contains((java.lang.Object) boolean52);
        java.util.stream.Stream<java.lang.Object> objStream54 = composite43.parallelStream();
        boolean boolean55 = composite18.contains((java.lang.Object) composite43);
        boolean boolean56 = composite10.addAll((java.util.Collection<java.lang.Object>) composite18);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite66.startOffset;
        int int73 = composite18.compareTo(composite66);
        comparators.Composite composite75 = composite18.addLong((long) 80);
        java.util.stream.Stream<java.lang.Object> objStream76 = composite18.parallelStream();
        byte[] byteArray77 = composite18.serialize();
        byte[] byteArray78 = composite18.bytes;
        boolean boolean79 = comparators.Composite.validate(130, byteArray78);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 80, 0]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 80, 0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str7 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(6)" + "'", str7, "Placeholder(6)");
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        java.lang.String str6 = placeholder0.toString();
        placeholder0.type = 97;
        java.lang.String str9 = placeholder0.toString();
        placeholder0.type = 4;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Placeholder(1)" + "'", str6, "Placeholder(1)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Placeholder(97)" + "'", str9, "Placeholder(97)");
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        comparators.Composite composite77 = compositeSerializer0.fromByteBuffer(byteBuffer76);
        java.util.stream.Stream<java.lang.Object> objStream78 = composite77.stream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(objStream78);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.util.RandomAccess[] randomAccessArray72 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray73 = composite71.toArray(randomAccessArray72);
        comparators.Composite composite75 = composite71.addLong((long) 67);
        byte[] byteArray76 = composite75.serialize();
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite composite78 = new comparators.Composite(byteArray76);
        comparators.Composite composite79 = compositeSerializer0.fromBytes(byteArray76);
        int int81 = compositeSerializer0.computeInitialHashSize(181);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(randomAccessArray72);
        org.junit.Assert.assertNotNull(randomAccessArray73);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 242 + "'", int81 == 242);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        java.lang.String str25 = composite9.toString();
        comparators.Composite composite27 = composite9.addReal((java.lang.Double) 10.0d);
        comparators.Composite composite29 = composite9.addReal((java.lang.Double) 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = composite29.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(composite29);
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = (short) 0;
        boolean boolean85 = compositeTypeIterator80.hasNext();
        int int86 = compositeTypeIterator80.start;
        int int87 = compositeTypeIterator80.start;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 67 + "'", int87 == 67);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = composite36.serializeToByteBuffer();
        boolean boolean38 = comparators.Composite.isValidType((java.lang.Object) composite36);
        int int39 = composite36.startOffset;
        comparators.Composite composite40 = composite36.addMatchMinimum();
        java.util.Spliterator<java.lang.Object> objSpliterator41 = composite36.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertNotNull(objSpliterator41);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        java.util.Iterator<java.lang.Object> objItor77 = composite17.iterator();
        java.lang.Class<?> wildcardClass78 = composite17.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.start = 0;
        int int83 = compositeTypeIterator80.offset;
        int int84 = compositeTypeIterator80.start;
        compositeTypeIterator80.type = 15;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 67 + "'", int83 == 67);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite9.byteStream = byteArrayOutputStream15;
        java.util.Iterator<java.lang.Object> objItor17 = composite9.iterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream18 = composite9.byteStream;
        java.lang.String str19 = composite9.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNull(byteArrayOutputStream18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray13);
        byte[] byteArray16 = comparators.Composite.serialize(objList15);
        java.util.stream.Stream<java.lang.Object> objStream17 = objList15.parallelStream();
        comparators.Composite composite18 = new comparators.Composite(objList15);
        java.util.RandomAccess[] randomAccessArray19 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray20 = composite18.toArray(randomAccessArray19);
        comparators.Composite composite22 = composite18.addLong((long) 67);
        byte[] byteArray23 = composite22.serialize();
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray23);
        int int25 = comparators.Composite.compare(byteArray6, byteArray23);
        comparators.hector.CompositeSerializer compositeSerializer26 = new comparators.hector.CompositeSerializer();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        comparators.Composite composite42 = composite36.addBool(true);
        java.io.DataOutputStream dataOutputStream43 = composite36.out;
        byte[] byteArray44 = compositeSerializer26.toBytes(composite36);
        int int45 = comparators.Composite.compare(byteArray23, byteArray44);
        boolean boolean47 = comparators.Composite.validate(67, byteArray44, true);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray44);
        boolean boolean49 = comparators.Composite.validate((int) ' ', byteArray44);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        boolean boolean60 = comparators.Composite.validate(0, byteArray57);
        boolean boolean62 = comparators.Composite.validate((int) 'a', byteArray57, true);
        int int63 = comparators.Composite.compare(byteArray44, byteArray57);
        comparators.Composite composite64 = new comparators.Composite(byteArray44);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(randomAccessArray20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(dataOutputStream43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = ' ';
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray9 = new byte[] {};
        int int10 = comparators.Composite.compare(byteArray8, byteArray9);
        java.util.List<java.lang.Object> objList11 = comparators.Composite.deserialize(byteArray9);
        boolean boolean13 = comparators.Composite.validate((int) (short) 100, byteArray9, false);
        boolean boolean14 = placeholder0.equals((java.lang.Object) (short) 100);
        int int15 = placeholder0.type;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(objList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator1 = compositeType0.indexComparator;
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator3 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType2);
        comparators.Composite.Placeholder placeholder4 = comparators.Composite.MATCH_MAXIMUM;
        placeholder4.type = (short) 1;
        comparators.CompositeType compositeType7 = new comparators.CompositeType();
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator13 = compositeType8.indexComparator;
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator19 = compositeType8.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType14);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType14.validate(byteBuffer57);
        java.lang.String str59 = compositeType7.getString(byteBuffer57);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator60 = compositeType7.indexComparator;
        boolean boolean61 = placeholder4.equals((java.lang.Object) compositeType7);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator62 = byteBufferComparator3.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator63 = compositeType7.getReverseComparator();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray79 = new byte[] {};
        int int80 = comparators.Composite.compare(byteArray78, byteArray79);
        boolean boolean82 = comparators.Composite.validate((int) ' ', byteArray79, true);
        boolean boolean83 = composite73.contains((java.lang.Object) boolean82);
        java.util.stream.Stream<java.lang.Object> objStream84 = composite73.parallelStream();
        composite73.startOffset = 8;
        comparators.Composite composite88 = composite73.addAscii("hi!");
        comparators.Composite composite90 = composite73.addLong((long) 4);
        int int91 = composite90.size();
        java.lang.Object[] objArray92 = composite90.toArray();
        java.nio.ByteBuffer byteBuffer93 = comparators.Composite.serializeToByteBuffer(objArray92);
        java.nio.ByteBuffer byteBuffer94 = comparators.Composite.serializeToByteBuffer(objArray92);
        compositeType7.validate(byteBuffer94);
        org.junit.Assert.assertNotNull(indexInfoComparator1);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferComparator3);
        org.junit.Assert.assertNotNull(placeholder4);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(indexInfoComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteBufferComparator19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(indexInfoComparator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator62);
        org.junit.Assert.assertNotNull(byteBufferComparator63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(composite90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(byteBuffer94);
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        byte[] byteArray83 = compositeTypeIterator80.bytes;
        byte[] byteArray84 = compositeTypeIterator80.bytes;
        compositeTypeIterator80.type = 130;
        compositeTypeIterator80.len = 455;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        composite23.startOffset = 43;
        comparators.Composite composite42 = composite23.addAscii("Placeholder(0)");
        comparators.hector.CompositeSerializer compositeSerializer43 = new comparators.hector.CompositeSerializer();
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        int int55 = composite53.startOffset;
        int int56 = composite53.startOffset;
        byte[] byteArray57 = compositeSerializer43.toBytes(composite53);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        java.lang.Object[] objArray68 = composite67.toArray();
        int int69 = composite67.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream70 = composite67.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream71 = composite67.parallelStream();
        comparators.Composite composite73 = composite67.addBool(true);
        java.util.Iterator<java.lang.Object> objItor74 = composite67.iterator();
        comparators.Composite composite76 = composite67.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite78 = composite76.addLong((long) '#');
        byte[] byteArray79 = compositeSerializer43.toBytes(composite78);
        comparators.Composite composite81 = composite78.addReal((java.lang.Double) 1.0d);
        boolean boolean82 = composite23.equals((java.lang.Object) composite78);
        comparators.Composite composite84 = composite78.addAscii("341");
        java.util.Iterator<java.lang.Object> objItor85 = composite84.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(objItor74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(objItor85);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.stream();
        byte[] byteArray13 = composite9.bytes;
        comparators.Composite composite15 = composite9.addUTF8("Placeholder(0)");
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteBuffer53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList54.stream();
        boolean boolean56 = composite15.contains((java.lang.Object) objStream55);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        comparators.hector.CompositeListSerializer compositeListSerializer2 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        byte[] byteArray13 = compositeListSerializer2.toBytes(objList9);
        int int15 = compositeListSerializer2.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer16 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator22 = compositeType17.indexComparator;
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator28 = compositeType17.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType23);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.lang.String str34 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.List<java.util.List<java.lang.Object>> objListList35 = compositeListSerializer16.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet36 = compositeListSerializer2.toBytesSet(objListList35);
        java.lang.String str37 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferSet36);
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator44 = compositeType39.indexComparator;
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType39.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType45);
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str56 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.List<java.util.List<java.lang.Object>> objListList57 = compositeListSerializer38.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList53);
        int int59 = compositeListSerializer38.computeInitialHashSize(9);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        byte[] byteArray70 = compositeListSerializer38.toBytes(objList66);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray78 = comparators.Composite.serialize(objList77);
        java.util.stream.Stream<java.lang.Object> objStream79 = objList77.parallelStream();
        comparators.Composite composite80 = new comparators.Composite(objList77);
        java.util.RandomAccess[] randomAccessArray81 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray82 = composite80.toArray(randomAccessArray81);
        comparators.Composite composite84 = composite80.addLong((long) 67);
        byte[] byteArray85 = composite84.serialize();
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray85);
        java.nio.ByteBuffer byteBuffer87 = compositeListSerializer38.toByteBuffer(objList86);
        comparators.Composite composite88 = new comparators.Composite(byteBuffer87);
        compositeType0.validate(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 43 + "'", int15 == 43);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(indexInfoComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteBufferComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objListList35);
        org.junit.Assert.assertNotNull(byteBufferSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(indexInfoComparator44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objListList57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 13 + "'", int59 == 13);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(randomAccessArray82);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertNotNull(byteBuffer87);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray39 = composite34.serialize();
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.lang.Object[] objArray64 = composite63.toArray();
        int int65 = composite63.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream66 = composite63.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream67 = composite63.parallelStream();
        int int68 = composite63.startOffset;
        int int69 = composite49.compareTo(composite63);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        comparators.Composite composite76 = composite49.addBytes(byteArray74);
        java.nio.ByteBuffer byteBuffer77 = composite76.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList78 = comparators.Composite.deserialize(byteBuffer77);
        boolean boolean79 = comparators.Composite.validate(byteBuffer77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteBuffer77);
        byte[] byteArray81 = comparators.Composite.serialize(objList80);
        int int82 = comparators.Composite.compare(byteArray39, byteArray81);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        boolean boolean81 = comparators.Composite.validate(byteBuffer79);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer79);
        comparators.Composite composite83 = new comparators.Composite(byteBuffer79);
        int int84 = comparators.Composite.compare(composite40, composite83);
        byte[] byteArray85 = composite83.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        java.io.DataOutputStream dataOutputStream54 = composite53.out;
        int int55 = composite53.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream56 = composite53.byteStream;
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(dataOutputStream54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(byteArrayOutputStream56);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        org.apache.cassandra.db.IColumn[] iColumnArray7 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList8 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8, iColumnArray7);
        java.lang.String str10 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType12.validate(byteBuffer50);
        boolean boolean52 = comparators.Composite.validate(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        java.nio.ByteBuffer byteBuffer54 = null;
        int int55 = compositeType11.compare(byteBuffer50, byteBuffer54);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer50);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer50);
        java.lang.String str58 = compositeType0.getString(byteBuffer50);
        boolean boolean59 = comparators.Composite.validate(byteBuffer50);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(iColumnArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objList60);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.size();
        java.util.Spliterator<java.lang.Object> objSpliterator41 = composite9.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream42 = composite9.byteStream;
        comparators.Composite composite44 = composite9.addLong((long) (short) 100);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        int int69 = composite64.startOffset;
        int int70 = comparators.Composite.compare(composite54, composite64);
        int int71 = composite64.size();
        comparators.Composite composite73 = composite64.addAscii("Placeholder(58)");
        composite64.clear();
        java.lang.String str75 = composite64.toString();
        int int76 = comparators.Composite.compare(composite9, composite64);
        byte[] byteArray77 = composite9.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objSpliterator41);
        org.junit.Assert.assertNull(byteArrayOutputStream42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 100, 0]");
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        int int14 = comparators.Composite.compare(byteArray5, byteArray12);
        boolean boolean16 = comparators.Composite.validate(0, byteArray12, false);
        java.util.List<java.lang.Object> objList17 = comparators.Composite.deserialize((int) (short) 0, byteArray12);
        comparators.Composite composite18 = new comparators.Composite(byteArray12);
        java.lang.String str19 = composite18.toString();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        comparators.Composite composite86 = compositeTypeIterator80.collection;
        int int87 = compositeTypeIterator80.offset;
        int int88 = compositeTypeIterator80.len;
        compositeTypeIterator80.len = 255;
        compositeTypeIterator80.offset = 341;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 67 + "'", int87 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        int int38 = composite37.size();
        java.util.UUID uUID39 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite40 = composite37.addTimeUUID(uUID39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        java.lang.String str25 = composite9.toString();
        byte[] byteArray26 = composite9.bytes;
        byte[] byteArray27 = composite9.serialize();
        comparators.Composite composite29 = composite9.addUTF8("true,6,434d500103000000000000004300");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 0]");
        org.junit.Assert.assertNotNull(composite29);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite20 = composite18.addLong((long) '#');
        comparators.Composite composite22 = composite20.addLong((long) 8);
        boolean boolean23 = composite22.isEmpty();
        byte[] byteArray24 = composite22.bytes;
        comparators.Composite composite26 = composite22.addLong((long) (short) 0);
        java.lang.Class<?> wildcardClass27 = composite26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0]");
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        comparators.Composite composite18 = composite9.addLong((long) 0);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        int int63 = composite58.startOffset;
        int int64 = composite44.compareTo(composite58);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        comparators.Composite composite71 = composite44.addBytes(byteArray69);
        java.nio.ByteBuffer byteBuffer72 = composite71.serializeToByteBuffer();
        compositeType34.validate(byteBuffer72);
        boolean boolean74 = comparators.Composite.validate(byteBuffer72);
        comparators.Composite composite75 = new comparators.Composite(byteBuffer72);
        comparators.Composite composite76 = new comparators.Composite(byteBuffer72);
        boolean boolean77 = composite28.addAll((java.util.Collection<java.lang.Object>) composite76);
        comparators.Composite composite79 = composite28.addAscii("Placeholder(100)");
        int int80 = comparators.Composite.compare(composite18, composite28);
        comparators.Composite composite82 = composite28.addAscii("10");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(composite82);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite9.stream();
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.util.RandomAccess[] randomAccessArray47 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray48 = composite46.toArray(randomAccessArray47);
        comparators.Composite composite50 = composite46.addLong((long) 67);
        byte[] byteArray51 = composite50.serialize();
        comparators.Composite composite53 = composite50.addAscii("Placeholder(58)");
        boolean boolean54 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite50);
        int int55 = composite50.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(randomAccessArray47);
        org.junit.Assert.assertNotNull(randomAccessArray48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        int int54 = composite53.size();
        java.util.Spliterator<java.lang.Object> objSpliterator55 = composite53.spliterator();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objSpliterator55);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator15 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator17 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator18 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator19 = compositeType0.indexComparator;
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        int int60 = composite55.startOffset;
        int int61 = composite41.compareTo(composite55);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        comparators.Composite composite68 = composite41.addBytes(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = composite68.serializeToByteBuffer();
        compositeType26.validate(byteBuffer69);
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        org.apache.cassandra.db.IColumn[] iColumnArray76 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList77 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList77, iColumnArray76);
        java.lang.String str79 = compositeType71.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList77);
        org.apache.cassandra.db.IColumn[] iColumnArray80 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList81 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList81, iColumnArray80);
        java.lang.String str83 = compositeType71.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList81);
        java.lang.String str84 = compositeType26.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList81);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator85 = compositeType26.indexReverseComparator;
        comparators.CompositeType compositeType86 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray87 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList88 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList88, byteBufferArray87);
        java.lang.String str90 = compositeType86.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList88);
        org.apache.cassandra.db.IColumn[] iColumnArray91 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList92 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList92, iColumnArray91);
        java.lang.String str94 = compositeType86.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList92);
        java.lang.String str95 = compositeType26.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList92);
        java.lang.String str96 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList92);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator97 = compositeType0.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(byteBufferComparator15);
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(byteBufferComparator17);
        org.junit.Assert.assertNotNull(indexInfoComparator18);
        org.junit.Assert.assertNotNull(indexInfoComparator19);
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(iColumnArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(iColumnArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(indexInfoComparator85);
        org.junit.Assert.assertNotNull(compositeType86);
        org.junit.Assert.assertNotNull(byteBufferArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(iColumnArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(byteBufferComparator97);
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteBuffer38);
        comparators.Composite composite42 = new comparators.Composite(objList41);
        byte[] byteArray43 = null;
        composite42.bytes = byteArray43;
        java.util.Spliterator<java.lang.Object> objSpliterator45 = composite42.spliterator();
        byte[] byteArray46 = composite42.serialize();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNotNull(objSpliterator45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        boolean boolean19 = comparators.Composite.validate((int) ' ', byteArray16, true);
        boolean boolean20 = composite10.contains((java.lang.Object) boolean19);
        java.util.stream.Stream<java.lang.Object> objStream21 = composite10.parallelStream();
        composite10.startOffset = 8;
        comparators.Composite composite25 = composite10.addAscii("hi!");
        java.lang.String str26 = composite10.toString();
        composite10.startOffset = 2;
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = comparators.Composite.validate(100, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        java.util.RandomAccess[] randomAccessArray57 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray58 = composite56.toArray(randomAccessArray57);
        comparators.Composite composite60 = composite56.addLong((long) 67);
        byte[] byteArray61 = composite60.serialize();
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray61);
        int int63 = comparators.Composite.compare(byteArray44, byteArray61);
        int int64 = comparators.Composite.compare(byteArray35, byteArray61);
        composite10.bytes = byteArray35;
        comparators.Composite composite66 = new comparators.Composite(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize((-6), byteArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(composite25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(randomAccessArray57);
        org.junit.Assert.assertNotNull(randomAccessArray58);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        comparators.hector.CompositeSerializer compositeSerializer1 = new comparators.hector.CompositeSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        int int16 = composite11.startOffset;
        composite11.clear();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        int int45 = comparators.Composite.compare(byteArray36, byteArray43);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray43);
        composite28.bytes = byteArray43;
        boolean boolean48 = comparators.Composite.validate(1, byteArray43);
        composite11.bytes = byteArray43;
        comparators.Composite composite50 = compositeSerializer1.fromBytes(byteArray43);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        boolean boolean69 = comparators.Composite.validate((int) ' ', byteArray66, true);
        boolean boolean70 = composite60.contains((java.lang.Object) boolean69);
        java.util.stream.Stream<java.lang.Object> objStream71 = composite60.parallelStream();
        composite60.startOffset = 8;
        comparators.Composite composite75 = composite60.addAscii("hi!");
        java.lang.String str76 = composite60.toString();
        byte[] byteArray77 = composite60.bytes;
        java.nio.ByteBuffer byteBuffer78 = compositeSerializer1.toByteBuffer(composite60);
        byte[] byteArray79 = composite60.bytes;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(135, byteArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 0]");
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 0]");
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        comparators.Composite composite77 = compositeSerializer0.fromByteBuffer(byteBuffer76);
        composite77.startOffset = 2;
        composite77.clear();
        boolean boolean81 = composite77.isEmpty();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        comparators.CompositeType compositeType16 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray17 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList18 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18, byteBufferArray17);
        java.lang.String str20 = compositeType16.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator21 = compositeType16.indexComparator;
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator27 = compositeType16.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType22);
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.lang.String str33 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        int int63 = composite58.startOffset;
        int int64 = composite44.compareTo(composite58);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        comparators.Composite composite71 = composite44.addBytes(byteArray69);
        java.nio.ByteBuffer byteBuffer72 = composite71.serializeToByteBuffer();
        compositeType34.validate(byteBuffer72);
        java.lang.String str74 = compositeType22.getString(byteBuffer72);
        boolean boolean75 = composite10.contains((java.lang.Object) str74);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        java.util.stream.Stream<java.lang.Object> objStream84 = objList82.parallelStream();
        comparators.Composite composite85 = new comparators.Composite(objList82);
        java.lang.Object[] objArray86 = composite85.toArray();
        int int87 = composite85.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream88 = null;
        composite85.byteStream = byteArrayOutputStream88;
        composite85.startOffset = (byte) 1;
        int int92 = comparators.Composite.compare(composite10, composite85);
        comparators.Composite composite94 = composite85.addBool(false);
        composite94.clear();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(compositeType16);
        org.junit.Assert.assertNotNull(byteBufferArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(indexInfoComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteBufferComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(composite94);
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        int int14 = composite9.startOffset;
        composite9.startOffset = (byte) 10;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addLong((long) 67);
        byte[] byteArray38 = composite37.serialize();
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray38);
        int int40 = comparators.Composite.compare(byteArray21, byteArray38);
        comparators.hector.CompositeSerializer compositeSerializer41 = new comparators.hector.CompositeSerializer();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        comparators.Composite composite57 = composite51.addBool(true);
        java.io.DataOutputStream dataOutputStream58 = composite51.out;
        byte[] byteArray59 = compositeSerializer41.toBytes(composite51);
        int int60 = comparators.Composite.compare(byteArray38, byteArray59);
        composite9.bytes = byteArray38;
        byte[] byteArray63 = null;
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        int int77 = comparators.Composite.compare(byteArray68, byteArray75);
        int int78 = comparators.Composite.compare((int) (byte) 1, byteArray63, 10, byteArray68);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray83);
        byte[] byteArray86 = comparators.Composite.serialize(objList85);
        java.util.stream.Stream<java.lang.Object> objStream87 = objList85.parallelStream();
        comparators.Composite composite88 = new comparators.Composite(objList85);
        java.util.RandomAccess[] randomAccessArray89 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray90 = composite88.toArray(randomAccessArray89);
        comparators.Composite composite92 = composite88.addLong((long) 67);
        byte[] byteArray93 = composite92.serialize();
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteArray93);
        int int95 = comparators.Composite.compare(byteArray63, byteArray93);
        composite9.bytes = byteArray63;
        java.util.Iterator<java.lang.Object> objItor97 = composite9.iterator();
        int int98 = composite9.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(dataOutputStream58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertNull(byteArray86);
        org.junit.Assert.assertNotNull(objStream87);
        org.junit.Assert.assertNotNull(randomAccessArray89);
        org.junit.Assert.assertNotNull(randomAccessArray90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(objItor97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 10 + "'", int98 == 10);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        comparators.Composite composite13 = composite9.addBool(true);
        boolean boolean14 = comparators.Composite.isValidType((java.lang.Object) composite13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.ByteArrayOutputStream byteArrayOutputStream13 = composite9.byteStream;
        int int14 = composite9.startOffset;
        java.lang.String str15 = composite9.toString();
        byte[] byteArray16 = composite9.bytes;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        byte[] byteArray29 = composite26.bytes;
        java.io.ByteArrayOutputStream byteArrayOutputStream30 = composite26.byteStream;
        int int31 = composite26.startOffset;
        java.io.DataOutputStream dataOutputStream32 = composite26.out;
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite42.startOffset;
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        boolean boolean67 = comparators.Composite.validate((int) ' ', byteArray64, true);
        boolean boolean68 = composite58.contains((java.lang.Object) boolean67);
        java.util.Spliterator<java.lang.Object> objSpliterator69 = composite58.spliterator();
        boolean boolean70 = composite42.containsAll((java.util.Collection<java.lang.Object>) composite58);
        boolean boolean72 = composite42.contains((java.lang.Object) (-1));
        comparators.Composite composite73 = new comparators.Composite();
        comparators.Composite composite75 = composite73.addUTF8("Placeholder(58)");
        comparators.Composite composite77 = composite75.addLong((long) (-1));
        boolean boolean78 = composite42.equals((java.lang.Object) composite77);
        java.lang.String str79 = composite77.toString();
        java.io.DataOutputStream dataOutputStream80 = composite77.out;
        boolean boolean81 = composite26.containsAll((java.util.Collection<java.lang.Object>) composite77);
        int int82 = comparators.Composite.compare(composite9, composite26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNull(byteArrayOutputStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNull(byteArrayOutputStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(dataOutputStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objSpliterator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Placeholder(58),-1" + "'", str79, "Placeholder(58),-1");
        org.junit.Assert.assertNull(dataOutputStream80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        java.util.Iterator<java.lang.Object> objItor77 = composite17.iterator();
        comparators.Composite composite78 = composite17.addMatchMaximum();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite78.parallelStream();
        comparators.Composite composite80 = composite78.addMatchMaximum();
        java.io.DataOutputStream dataOutputStream81 = composite78.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(dataOutputStream81);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        boolean boolean21 = comparators.Composite.validate((int) ' ', byteArray18, true);
        boolean boolean22 = composite12.contains((java.lang.Object) boolean21);
        java.util.Spliterator<java.lang.Object> objSpliterator23 = composite12.spliterator();
        byte[] byteArray24 = composite12.bytes;
        int int25 = composite12.size();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        comparators.Composite composite37 = new comparators.Composite();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        int int52 = composite37.compareTo(composite47);
        comparators.hector.CompositeListSerializer compositeListSerializer53 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray55 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList56 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56, byteBufferArray55);
        java.lang.String str58 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator59 = compositeType54.indexComparator;
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator65 = compositeType54.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType60);
        comparators.CompositeType compositeType66 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray67 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList68 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68, byteBufferArray67);
        java.lang.String str70 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        java.lang.String str71 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        java.util.List<java.util.List<java.lang.Object>> objListList72 = compositeListSerializer53.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList68);
        comparators.CompositeType compositeType73 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator74 = compositeType73.indexComparator;
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator76 = compositeType73.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType75);
        java.lang.Object[] objArray77 = new java.lang.Object[] { compositeListSerializer53, compositeType75 };
        java.lang.Object[][] objArray78 = new java.lang.Object[][] { objArray77 };
        java.lang.Object[][] objArray79 = composite37.toArray(objArray78);
        java.lang.Object[][] objArray80 = composite35.toArray(objArray79);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        java.util.List<java.lang.Object> objList89 = comparators.Composite.deserialize(byteArray87);
        boolean boolean90 = comparators.Composite.validate(90, byteArray87);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite12.new CompositeTypeIterator(composite35, 10, byteArray87);
        java.util.List<java.lang.Object> objList92 = comparators.Composite.deserialize(byteArray87);
        int int93 = comparators.Composite.compare(130, byteArray1, 90, byteArray87);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objSpliterator23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteBufferArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(indexInfoComparator59);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteBufferComparator65);
        org.junit.Assert.assertNotNull(compositeType66);
        org.junit.Assert.assertNotNull(byteBufferArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(objListList72);
        org.junit.Assert.assertNotNull(indexInfoComparator74);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferComparator76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(objList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(objList92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        composite57.startOffset = 8;
        comparators.Composite composite72 = composite57.addAscii("hi!");
        boolean boolean73 = composite47.containsAll((java.util.Collection<java.lang.Object>) composite72);
        int int74 = composite72.startOffset;
        comparators.Composite composite76 = composite72.addLong((long) 130);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(composite72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
        org.junit.Assert.assertNotNull(composite76);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        boolean boolean19 = comparators.Composite.isValidType((java.lang.Object) compositeSerializer0);
        byte[] byteArray20 = null;
        comparators.Composite composite21 = compositeSerializer0.fromBytes(byteArray20);
        comparators.hector.CompositeSerializer compositeSerializer22 = new comparators.hector.CompositeSerializer();
        comparators.hector.CompositeSerializer compositeSerializer23 = new comparators.hector.CompositeSerializer();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addLong((long) 67);
        byte[] byteArray38 = composite37.serialize();
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray38);
        comparators.Composite composite40 = new comparators.Composite(byteArray38);
        comparators.Composite composite41 = compositeSerializer23.fromBytes(byteArray38);
        int int43 = compositeSerializer23.computeInitialHashSize(10);
        comparators.hector.CompositeSerializer compositeSerializer44 = new comparators.hector.CompositeSerializer();
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.lang.Object[] objArray55 = composite54.toArray();
        int int56 = composite54.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream57 = composite54.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream58 = composite54.parallelStream();
        comparators.Composite composite60 = composite54.addBool(true);
        java.io.DataOutputStream dataOutputStream61 = composite54.out;
        byte[] byteArray62 = compositeSerializer44.toBytes(composite54);
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator68 = compositeType63.indexComparator;
        comparators.CompositeType compositeType69 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray70 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList71 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71, byteBufferArray70);
        java.lang.String str73 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator74 = compositeType63.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType69);
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray76 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList77 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77, byteBufferArray76);
        java.lang.String str79 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.lang.String str80 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        comparators.CompositeType compositeType81 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray82 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList83 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList83, byteBufferArray82);
        java.lang.String str85 = compositeType81.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList83);
        java.lang.String str86 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList83);
        java.util.List<comparators.Composite> compositeList87 = compositeSerializer44.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList83);
        java.util.List<java.nio.ByteBuffer> byteBufferList88 = compositeSerializer23.toBytesList(compositeList87);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet89 = compositeSerializer22.toBytesSet(compositeList87);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet90 = compositeSerializer0.toBytesSet(compositeList87);
        int int92 = compositeSerializer0.computeInitialHashSize(5);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(dataOutputStream61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(indexInfoComparator68);
        org.junit.Assert.assertNotNull(compositeType69);
        org.junit.Assert.assertNotNull(byteBufferArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteBufferComparator74);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(compositeType81);
        org.junit.Assert.assertNotNull(byteBufferArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(compositeList87);
        org.junit.Assert.assertNotNull(byteBufferList88);
        org.junit.Assert.assertNotNull(byteBufferSet89);
        org.junit.Assert.assertNotNull(byteBufferSet90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 7 + "'", int92 == 7);
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        int int10 = composite9.size();
        byte[] byteArray11 = composite9.bytes;
        comparators.hector.CompositeSerializer compositeSerializer12 = new comparators.hector.CompositeSerializer();
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        comparators.Composite composite28 = composite22.addBool(true);
        java.io.DataOutputStream dataOutputStream29 = composite22.out;
        byte[] byteArray30 = compositeSerializer12.toBytes(composite22);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        comparators.Composite composite46 = composite40.addBool(true);
        comparators.Composite composite48 = composite46.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream49 = composite46.byteStream;
        java.nio.ByteBuffer byteBuffer50 = compositeSerializer12.toByteBuffer(composite46);
        int int51 = comparators.Composite.compare(composite9, composite46);
        byte[] byteArray52 = composite46.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(composite28);
        org.junit.Assert.assertNotNull(dataOutputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteArrayOutputStream49);
        org.junit.Assert.assertEquals(byteArrayOutputStream49.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        int int40 = composite35.startOffset;
        int int41 = composite21.compareTo(composite35);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        comparators.Composite composite48 = composite21.addBytes(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = composite48.serializeToByteBuffer();
        compositeType6.validate(byteBuffer49);
        comparators.Composite composite51 = new comparators.Composite(byteBuffer49);
        boolean boolean53 = comparators.Composite.validate(byteBuffer49, true);
        comparators.Composite composite54 = new comparators.Composite(byteBuffer49);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteBuffer49);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objList55);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        int int86 = compositeTypeIterator80.start;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator23 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator24 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator25 = byteBufferComparator24.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(byteBufferComparator23);
        org.junit.Assert.assertNotNull(byteBufferComparator24);
        org.junit.Assert.assertNotNull(byteBufferComparator25);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        byte[] byteArray30 = comparators.Composite.serialize(objList28);
        byte[] byteArray31 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        byte[] byteArray41 = compositeListSerializer0.toBytes(objList38);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        java.util.List<java.lang.Object> objList78 = comparators.Composite.deserialize(byteArray76);
        byte[] byteArray79 = comparators.Composite.serialize(objList78);
        java.util.stream.Stream<java.lang.Object> objStream80 = objList78.parallelStream();
        comparators.Composite composite81 = new comparators.Composite(objList78);
        java.util.RandomAccess[] randomAccessArray82 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray83 = composite81.toArray(randomAccessArray82);
        comparators.Composite composite85 = composite81.addLong((long) 67);
        byte[] byteArray86 = composite85.serialize();
        java.util.List<java.lang.Object> objList87 = comparators.Composite.deserialize(byteArray86);
        comparators.Composite composite88 = new comparators.Composite(byteArray86);
        boolean boolean89 = composite65.equals((java.lang.Object) byteArray86);
        comparators.Composite composite90 = new comparators.Composite(byteArray86);
        java.util.List<java.lang.Object> objList91 = compositeListSerializer0.fromBytes(byteArray86);
        int int93 = compositeListSerializer0.computeInitialHashSize((-5));
        byte[] byteArray94 = null;
        java.util.List<java.lang.Object> objList95 = compositeListSerializer0.fromBytes(byteArray94);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(randomAccessArray82);
        org.junit.Assert.assertNotNull(randomAccessArray83);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-6) + "'", int93 == (-6));
        org.junit.Assert.assertNotNull(objList95);
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType0.reversed();
        comparators.hector.CompositeListSerializer compositeListSerializer23 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        byte[] byteArray34 = compositeListSerializer23.toBytes(objList30);
        int int36 = compositeListSerializer23.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer37 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray39 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList40 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40, byteBufferArray39);
        java.lang.String str42 = compositeType38.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator43 = compositeType38.indexComparator;
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = compositeType38.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType44);
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.lang.String str55 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.List<java.util.List<java.lang.Object>> objListList56 = compositeListSerializer37.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet57 = compositeListSerializer23.toBytesSet(objListList56);
        java.lang.String str58 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferSet57);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator59 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator65 = compositeType60.indexComparator;
        boolean boolean66 = comparators.Composite.isValidType((java.lang.Object) compositeType60);
        org.apache.cassandra.db.IColumn[] iColumnArray67 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList68 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68, iColumnArray67);
        java.lang.String str70 = compositeType60.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        boolean boolean71 = comparators.Composite.isValidType((java.lang.Object) iColumnList68);
        java.lang.String str72 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 43 + "'", int36 == 43);
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(indexInfoComparator43);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteBufferComparator49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(objListList56);
        org.junit.Assert.assertNotNull(byteBufferSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteBufferComparator59);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(indexInfoComparator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(iColumnArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        java.util.List<java.nio.ByteBuffer> byteBufferList37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<comparators.Composite> compositeList38 = compositeSerializer0.fromBytesList(byteBufferList37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray14 = composite9.serialize();
        java.lang.Object[] objArray15 = composite9.toArray();
        comparators.hector.CompositeSerializer compositeSerializer16 = new comparators.hector.CompositeSerializer();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.io.DataOutputStream dataOutputStream33 = composite26.out;
        byte[] byteArray34 = compositeSerializer16.toBytes(composite26);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        boolean boolean53 = comparators.Composite.validate((int) ' ', byteArray50, true);
        boolean boolean54 = composite44.contains((java.lang.Object) boolean53);
        java.util.Spliterator<java.lang.Object> objSpliterator55 = composite44.spliterator();
        byte[] byteArray56 = composite44.bytes;
        comparators.Composite composite58 = composite44.addUTF8("Placeholder(1)");
        java.nio.ByteBuffer byteBuffer59 = composite44.serializeToByteBuffer();
        boolean boolean60 = comparators.Composite.validate(byteBuffer59);
        comparators.Composite composite61 = compositeSerializer16.fromByteBuffer(byteBuffer59);
        boolean boolean62 = composite9.equals((java.lang.Object) composite61);
        byte[] byteArray63 = composite61.serialize();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(dataOutputStream33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objSpliterator55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 8, 0, 14, 80, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 40, 49, 41, 0]");
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        boolean boolean19 = comparators.Composite.validate((int) ' ', byteArray16, true);
        boolean boolean20 = composite10.contains((java.lang.Object) boolean19);
        java.util.Spliterator<java.lang.Object> objSpliterator21 = composite10.spliterator();
        byte[] byteArray22 = composite10.bytes;
        int int23 = composite10.size();
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.util.RandomAccess[] randomAccessArray42 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray43 = composite41.toArray(randomAccessArray42);
        comparators.Composite composite45 = composite41.addLong((long) 67);
        byte[] byteArray46 = composite45.serialize();
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray46);
        int int48 = comparators.Composite.compare(byteArray29, byteArray46);
        comparators.hector.CompositeSerializer compositeSerializer49 = new comparators.hector.CompositeSerializer();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        comparators.Composite composite65 = composite59.addBool(true);
        java.io.DataOutputStream dataOutputStream66 = composite59.out;
        byte[] byteArray67 = compositeSerializer49.toBytes(composite59);
        int int68 = comparators.Composite.compare(byteArray46, byteArray67);
        boolean boolean69 = comparators.Composite.validate(1, byteArray67);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        boolean boolean72 = composite10.add((java.lang.Object) objList70);
        comparators.Composite composite74 = composite10.addLong((long) (short) 10);
        byte[] byteArray75 = compositeSerializer0.toBytes(composite74);
        comparators.Composite composite77 = composite74.addReal((java.lang.Double) (-1.0d));
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        byte[] byteArray85 = comparators.Composite.serialize(objList84);
        java.util.stream.Stream<java.lang.Object> objStream86 = objList84.parallelStream();
        comparators.Composite composite87 = new comparators.Composite(objList84);
        java.util.RandomAccess[] randomAccessArray88 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray89 = composite87.toArray(randomAccessArray88);
        comparators.Composite composite91 = composite87.addLong((long) 67);
        comparators.Composite composite93 = composite91.addBool(true);
        comparators.Composite composite95 = composite91.addLong((long) 2);
        java.io.DataOutputStream dataOutputStream96 = composite95.out;
        composite77.out = dataOutputStream96;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objSpliterator21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(randomAccessArray42);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(dataOutputStream66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 10, 0]");
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertNotNull(randomAccessArray88);
        org.junit.Assert.assertNotNull(randomAccessArray89);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(composite95);
        org.junit.Assert.assertNotNull(dataOutputStream96);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        byte[] byteArray40 = composite28.bytes;
        comparators.Composite composite42 = composite28.addUTF8("Placeholder(1)");
        java.nio.ByteBuffer byteBuffer43 = composite28.serializeToByteBuffer();
        boolean boolean44 = comparators.Composite.validate(byteBuffer43);
        comparators.Composite composite45 = compositeSerializer0.fromByteBuffer(byteBuffer43);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer43);
        boolean boolean48 = comparators.Composite.validate(byteBuffer43, false);
        comparators.Composite composite49 = new comparators.Composite(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        placeholder0.type = (short) 100;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        placeholder0.type = 0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        placeholder0.type = 107;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.util.RandomAccess[] randomAccessArray23 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray24 = composite22.toArray(randomAccessArray23);
        comparators.Composite composite26 = composite22.addLong((long) 67);
        java.util.logging.Logger logger27 = comparators.CompositeType.logger;
        boolean boolean28 = composite26.contains((java.lang.Object) logger27);
        java.lang.Object[] objArray29 = composite26.toArray();
        comparators.Composite composite30 = new comparators.Composite(objArray29);
        boolean boolean31 = placeholder0.equals((java.lang.Object) objArray29);
        comparators.Composite composite32 = new comparators.Composite(objArray29);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        boolean boolean48 = composite42.isEmpty();
        java.lang.String str49 = composite42.toString();
        comparators.Composite composite51 = composite42.addUTF8("Placeholder(100)");
        java.io.DataOutputStream dataOutputStream52 = composite42.out;
        composite32.out = dataOutputStream52;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(randomAccessArray23);
        org.junit.Assert.assertNotNull(randomAccessArray24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(logger27);
        org.junit.Assert.assertEquals(logger27.getName(), "comparators.CompositeType");
        org.junit.Assert.assertNull("logger27.getResourceBundleName() == null", logger27.getResourceBundleName());
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[67]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[67]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(dataOutputStream52);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        java.util.stream.Stream<java.lang.Object> objStream17 = composite9.stream();
        byte[] byteArray18 = composite9.bytes;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream31 = null;
        composite28.byteStream = byteArrayOutputStream31;
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        comparators.Composite composite48 = composite42.addBool(true);
        java.util.Iterator<java.lang.Object> objItor49 = composite42.iterator();
        int int50 = composite28.compareTo(composite42);
        byte[] byteArray51 = composite42.bytes;
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.lang.Object[] objArray62 = composite61.toArray();
        int int63 = composite61.startOffset;
        int int64 = composite61.startOffset;
        byte[] byteArray66 = null;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator67 = composite42.new CompositeTypeIterator(composite61, 341, byteArray66);
        int int68 = composite9.compareTo(composite42);
        java.util.Spliterator<java.lang.Object> objSpliterator69 = composite9.spliterator();
        java.io.DataOutputStream dataOutputStream70 = composite9.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(objItor49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objSpliterator69);
        org.junit.Assert.assertNull(dataOutputStream70);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = composite36.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteBuffer37);
        boolean boolean39 = comparators.Composite.validate(byteBuffer37);
        boolean boolean41 = comparators.Composite.validate(byteBuffer37, false);
        boolean boolean43 = comparators.Composite.validate(byteBuffer37, true);
        boolean boolean44 = comparators.Composite.validate(byteBuffer37);
        boolean boolean45 = comparators.Composite.validate(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.util.RandomAccess[] randomAccessArray44 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray45 = composite43.toArray(randomAccessArray44);
        comparators.Composite composite47 = composite43.addLong((long) 67);
        byte[] byteArray48 = composite47.serialize();
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray48);
        comparators.Composite composite50 = composite9.addBytes(byteArray48);
        java.lang.String str51 = composite50.toString();
        comparators.Composite composite53 = composite50.addBool(true);
        java.lang.Object[] objArray54 = composite53.toArray();
        java.nio.ByteBuffer byteBuffer55 = comparators.Composite.serializeToByteBuffer(objArray54);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(randomAccessArray45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "434d500103000000000000004300" + "'", str51, "434d500103000000000000004300");
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]]");
        org.junit.Assert.assertNotNull(byteBuffer55);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        composite57.startOffset = 8;
        comparators.Composite composite72 = composite57.addAscii("hi!");
        boolean boolean73 = composite47.containsAll((java.util.Collection<java.lang.Object>) composite72);
        comparators.Composite composite75 = composite72.addReal((java.lang.Double) 10.0d);
        byte[] byteArray76 = composite75.serialize();
        int int77 = composite75.startOffset;
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(composite72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str40 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator43 = compositeType0.reversed();
        boolean boolean44 = comparators.Composite.isValidType((java.lang.Object) byteBufferComparator43);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(byteBufferComparator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = (byte) 100;
        placeholder0.type = (short) 100;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        int int7 = placeholder0.type;
        int int8 = placeholder0.type;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType6.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType6.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator14 = compositeType6.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator15 = compositeType6.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator16 = compositeType6.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator17 = compositeType6.getReverseComparator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(byteBufferComparator14);
        org.junit.Assert.assertNotNull(indexInfoComparator15);
        org.junit.Assert.assertNotNull(byteBufferComparator16);
        org.junit.Assert.assertNotNull(byteBufferComparator17);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        java.lang.String str36 = composite28.toString();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite28.stream();
        java.lang.String str38 = composite28.toString();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteBuffer76);
        boolean boolean78 = comparators.Composite.validate(byteBuffer76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteBuffer76);
        boolean boolean80 = composite28.addAll((java.util.Collection<java.lang.Object>) objList79);
        java.util.stream.Stream<java.lang.Object> objStream81 = composite28.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objStream81);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        boolean boolean48 = comparators.Composite.validate(byteBuffer39);
        boolean boolean50 = comparators.Composite.validate(byteBuffer39, true);
        boolean boolean52 = comparators.Composite.validate(byteBuffer39, false);
        boolean boolean53 = comparators.Composite.validate(byteBuffer39);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteBuffer39);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteBuffer39);
        boolean boolean57 = comparators.Composite.validate(byteBuffer39, false);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        int int16 = composite9.startOffset;
        comparators.CompositeType compositeType17 = new comparators.CompositeType();
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        boolean boolean58 = comparators.Composite.validate(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = null;
        int int61 = compositeType17.compare(byteBuffer56, byteBuffer60);
        comparators.Composite composite62 = new comparators.Composite(byteBuffer56);
        comparators.Composite composite63 = new comparators.Composite(byteBuffer56);
        boolean boolean64 = composite9.equals((java.lang.Object) composite63);
        java.io.DataOutputStream dataOutputStream65 = composite9.out;
        java.nio.ByteBuffer byteBuffer66 = composite9.serializeToByteBuffer();
        java.util.Iterator<java.lang.Object> objItor67 = composite9.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(dataOutputStream65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(objItor67);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.size();
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        int int53 = composite50.startOffset;
        java.lang.Object[] objArray54 = composite50.toArray();
        comparators.Composite composite56 = composite50.addAscii("");
        int int57 = composite56.size();
        comparators.Composite composite58 = composite56.addMatchMaximum();
        int int59 = composite9.compareTo(composite56);
        int int60 = composite56.startOffset;
        java.lang.String str61 = composite56.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        boolean boolean8 = comparators.Composite.validate(0, byteArray5);
        byte[] byteArray9 = null;
        int int10 = comparators.Composite.compare(byteArray5, byteArray9);
        comparators.Composite composite11 = new comparators.Composite(byteArray9);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream24 = null;
        composite21.byteStream = byteArrayOutputStream24;
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.util.Iterator<java.lang.Object> objItor42 = composite35.iterator();
        int int43 = composite21.compareTo(composite35);
        java.lang.Object[][][] objArray44 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray45 = composite21.toArray(objArray44);
        java.util.stream.Stream<java.lang.Object> objStream46 = composite21.parallelStream();
        boolean boolean47 = comparators.Composite.isValidType((java.lang.Object) composite21);
        comparators.Composite composite49 = composite21.addLong((long) 32);
        boolean boolean50 = composite11.containsAll((java.util.Collection<java.lang.Object>) composite49);
        java.lang.Object[] objArray51 = composite11.toArray();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite11.stream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(objItor42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objStream52);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        composite9.bytes = byteArray18;
        comparators.Composite composite21 = new comparators.Composite(byteArray18);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        comparators.Composite composite77 = compositeSerializer0.fromByteBuffer(byteBuffer76);
        byte[] byteArray78 = composite77.serialize();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite77.parallelStream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertNotNull(objStream79);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        java.lang.String str5 = placeholder0.toString();
        int int6 = placeholder0.type;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Placeholder(-1)" + "'", str5, "Placeholder(-1)");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        comparators.Composite composite18 = composite9.addUTF8("Placeholder(100)");
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.util.RandomAccess[] randomAccessArray29 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray30 = composite28.toArray(randomAccessArray29);
        comparators.Composite composite32 = composite28.addUTF8("UTF-8");
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream46 = null;
        composite43.byteStream = byteArrayOutputStream46;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        comparators.Composite composite63 = composite57.addBool(true);
        java.util.Iterator<java.lang.Object> objItor64 = composite57.iterator();
        int int65 = composite43.compareTo(composite57);
        byte[] byteArray66 = composite57.bytes;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator67 = composite18.new CompositeTypeIterator(composite28, 455, byteArray66);
        int int68 = compositeTypeIterator67.type;
        boolean boolean69 = compositeTypeIterator67.hasNext();
        compositeTypeIterator67.len = 25;
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        java.util.List<java.lang.Object> objList78 = comparators.Composite.deserialize(byteArray76);
        byte[] byteArray79 = comparators.Composite.serialize(objList78);
        java.util.stream.Stream<java.lang.Object> objStream80 = objList78.parallelStream();
        comparators.Composite composite81 = new comparators.Composite(objList78);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        boolean boolean90 = comparators.Composite.validate((int) ' ', byteArray87, true);
        boolean boolean91 = composite81.contains((java.lang.Object) boolean90);
        java.util.Spliterator<java.lang.Object> objSpliterator92 = composite81.spliterator();
        java.util.stream.Stream<java.lang.Object> objStream93 = composite81.stream();
        comparators.Composite composite95 = composite81.addLong((long) 6);
        java.lang.String str96 = composite95.toString();
        compositeTypeIterator67.collection = composite95;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(objItor64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objSpliterator92);
        org.junit.Assert.assertNotNull(objStream93);
        org.junit.Assert.assertNotNull(composite95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "6" + "'", str96, "6");
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        boolean boolean56 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite57 = compositeSerializer0.fromByteBuffer(byteBuffer53);
        comparators.hector.CompositeSerializer compositeSerializer58 = new comparators.hector.CompositeSerializer();
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        comparators.Composite composite74 = composite68.addBool(true);
        java.io.DataOutputStream dataOutputStream75 = composite68.out;
        byte[] byteArray76 = compositeSerializer58.toBytes(composite68);
        byte[] byteArray77 = composite68.serialize();
        comparators.Composite composite78 = compositeSerializer0.fromBytes(byteArray77);
        boolean boolean79 = comparators.Composite.isValidType((java.lang.Object) compositeSerializer0);
        int int81 = compositeSerializer0.computeInitialHashSize(100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(dataOutputStream75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 134 + "'", int81 == 134);
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        int int56 = composite17.startOffset;
        comparators.Composite composite58 = composite17.addAscii("hi!");
        java.util.Iterator<java.lang.Object> objItor59 = composite58.iterator();
        comparators.Composite composite60 = composite58.addMatchMaximum();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.stream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(objItor59);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(objStream61);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean46 = comparators.Composite.validate(67, byteArray43, true);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray43);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList47.stream();
        comparators.Composite composite49 = new comparators.Composite(objList47);
        comparators.Composite composite50 = new comparators.Composite(objList47);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize(byteArray65);
        byte[] byteArray68 = comparators.Composite.serialize(objList67);
        java.util.stream.Stream<java.lang.Object> objStream69 = objList67.parallelStream();
        comparators.Composite composite70 = new comparators.Composite(objList67);
        java.lang.Object[] objArray71 = composite70.toArray();
        int int72 = composite70.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream73 = composite70.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream74 = composite70.parallelStream();
        int int75 = composite70.startOffset;
        int int76 = comparators.Composite.compare(composite60, composite70);
        composite60.clear();
        java.util.Iterator<java.lang.Object> objItor78 = composite60.iterator();
        int int79 = composite60.startOffset;
        boolean boolean80 = composite50.addAll((java.util.Collection<java.lang.Object>) composite60);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        java.util.List<java.lang.Object> objList87 = comparators.Composite.deserialize(byteArray85);
        byte[] byteArray88 = comparators.Composite.serialize(objList87);
        java.util.stream.Stream<java.lang.Object> objStream89 = objList87.parallelStream();
        comparators.Composite composite90 = new comparators.Composite(objList87);
        java.lang.Object[] objArray91 = composite90.toArray();
        int int92 = composite90.startOffset;
        comparators.Composite composite94 = composite90.addUTF8("hi!");
        boolean boolean95 = composite94.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = composite50.retainAll((java.util.Collection<java.lang.Object>) composite94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(objList67);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objItor78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(objList87);
        org.junit.Assert.assertNull(byteArray88);
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        comparators.Composite composite0 = null;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        comparators.Composite composite16 = composite14.addBool(true);
        comparators.Composite composite18 = composite14.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer19 = composite14.serializeToByteBuffer();
        comparators.Composite composite20 = new comparators.Composite(byteBuffer19);
        java.lang.String str21 = composite20.toString();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        int int34 = composite32.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream35 = composite32.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream36 = composite32.parallelStream();
        int int37 = composite32.startOffset;
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        boolean boolean39 = composite32.contains((java.lang.Object) compositeListSerializer38);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        comparators.Composite composite55 = composite49.addBool(true);
        java.util.Iterator<java.lang.Object> objItor56 = composite49.iterator();
        comparators.Composite composite57 = new comparators.Composite();
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        java.lang.Object[] objArray68 = composite67.toArray();
        int int69 = composite67.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream70 = composite67.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream71 = composite67.parallelStream();
        int int72 = composite57.compareTo(composite67);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray77);
        byte[] byteArray80 = comparators.Composite.serialize(objList79);
        java.util.stream.Stream<java.lang.Object> objStream81 = objList79.parallelStream();
        comparators.Composite composite82 = new comparators.Composite(objList79);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        boolean boolean91 = comparators.Composite.validate((int) ' ', byteArray88, true);
        boolean boolean92 = composite82.contains((java.lang.Object) boolean91);
        java.util.stream.Stream<java.lang.Object> objStream93 = composite82.parallelStream();
        boolean boolean94 = composite57.contains((java.lang.Object) composite82);
        boolean boolean95 = composite49.addAll((java.util.Collection<java.lang.Object>) composite57);
        int int96 = comparators.Composite.compare(composite32, composite49);
        int int97 = composite49.size();
        byte[] byteArray98 = composite49.serialize();
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite.CompositeTypeIterator compositeTypeIterator99 = composite0.new CompositeTypeIterator(composite20, 9, byteArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to comparators.Composite$CompositeTypeIterator with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "67,true,2" + "'", str21, "67,true,2");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(objItor56);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objStream93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) byteArray18);
        comparators.Composite composite29 = composite9.addBytes(byteArray18);
        comparators.Composite composite31 = composite29.addUTF8("true,6,434d500103000000000000004300");
        java.lang.Object[] objArray32 = composite29.toArray();
        byte[] byteArray33 = comparators.Composite.serialize(objArray32);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[[10, 10, -1], true,6,434d500103000000000000004300]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[67, 77, 80, 1, 9, 0, 3, 10, 10, -1, 8, 0, 35, 116, 114, 117, 101, 44, 54, 44, 52, 51, 52, 100, 53, 48, 48, 49, 48, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52, 51, 48, 48, 0]");
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str40 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator41 = compositeType0.indexComparator;
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite52.compareTo(composite66);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        comparators.Composite composite79 = composite52.addBytes(byteArray77);
        java.nio.ByteBuffer byteBuffer80 = composite79.serializeToByteBuffer();
        compositeType42.validate(byteBuffer80);
        boolean boolean82 = comparators.Composite.validate(byteBuffer80);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteBuffer80);
        compositeType0.validate(byteBuffer80);
        comparators.Composite composite85 = new comparators.Composite(byteBuffer80);
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteBuffer80);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(indexInfoComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNotNull(objList86);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator1 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator2 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator3 = compositeType0.indexComparator;
        org.junit.Assert.assertNotNull(indexInfoComparator1);
        org.junit.Assert.assertNotNull(byteBufferComparator2);
        org.junit.Assert.assertNotNull(indexInfoComparator3);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        int int20 = compositeSerializer0.computeInitialHashSize(10);
        comparators.hector.CompositeSerializer compositeSerializer21 = new comparators.hector.CompositeSerializer();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream35 = composite31.parallelStream();
        comparators.Composite composite37 = composite31.addBool(true);
        java.io.DataOutputStream dataOutputStream38 = composite31.out;
        byte[] byteArray39 = compositeSerializer21.toBytes(composite31);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.lang.String str63 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.List<comparators.Composite> compositeList64 = compositeSerializer21.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList60);
        java.util.List<java.nio.ByteBuffer> byteBufferList65 = compositeSerializer0.toBytesList(compositeList64);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        java.lang.Object[] objArray76 = composite75.toArray();
        int int77 = composite75.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream78 = composite75.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite75.parallelStream();
        comparators.Composite composite81 = composite75.addBool(true);
        java.io.DataOutputStream dataOutputStream82 = composite75.out;
        comparators.Composite composite84 = composite75.addBool(true);
        byte[] byteArray85 = compositeSerializer0.toBytes(composite84);
        java.util.Spliterator<java.lang.Object> objSpliterator86 = composite84.spliterator();
        java.util.stream.Stream<java.lang.Object> objStream87 = composite84.stream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(dataOutputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(compositeList64);
        org.junit.Assert.assertNotNull(byteBufferList65);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(dataOutputStream82);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[67, 77, 80, 1, 2, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objSpliterator86);
        org.junit.Assert.assertNotNull(objStream87);
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator10 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator11 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator13 = compositeType0.indexReverseComparator;
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        int int43 = composite38.startOffset;
        int int44 = composite24.compareTo(composite38);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        comparators.Composite composite51 = composite24.addBytes(byteArray49);
        java.nio.ByteBuffer byteBuffer52 = composite51.serializeToByteBuffer();
        compositeType14.validate(byteBuffer52);
        boolean boolean54 = comparators.Composite.validate(byteBuffer52);
        comparators.Composite composite55 = new comparators.Composite(byteBuffer52);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer52);
        java.lang.String str57 = compositeType0.getString(byteBuffer52);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(indexInfoComparator10);
        org.junit.Assert.assertNotNull(indexInfoComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(indexInfoComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        boolean boolean55 = comparators.Composite.validate((int) ' ', byteArray52, true);
        boolean boolean56 = composite46.contains((java.lang.Object) boolean55);
        java.util.Spliterator<java.lang.Object> objSpliterator57 = composite46.spliterator();
        byte[] byteArray58 = compositeSerializer0.toBytes(composite46);
        java.lang.Object[] objArray59 = composite46.toArray();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objSpliterator57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        boolean boolean40 = comparators.Composite.validate((int) ' ', byteArray37, true);
        boolean boolean41 = composite31.contains((java.lang.Object) boolean40);
        java.util.stream.Stream<java.lang.Object> objStream42 = composite31.parallelStream();
        composite31.startOffset = 8;
        comparators.Composite composite46 = composite31.addAscii("hi!");
        boolean boolean47 = comparators.Composite.isValidType((java.lang.Object) composite31);
        boolean boolean48 = composite31.isEmpty();
        byte[] byteArray51 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        int int65 = comparators.Composite.compare(byteArray56, byteArray63);
        int int66 = comparators.Composite.compare((int) (byte) 1, byteArray51, 10, byteArray56);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        java.util.List<java.lang.Object> objList74 = comparators.Composite.deserialize(byteArray72);
        boolean boolean75 = comparators.Composite.validate(0, byteArray72);
        byte[] byteArray76 = null;
        int int77 = comparators.Composite.compare(byteArray72, byteArray76);
        int int78 = comparators.Composite.compare(byteArray56, byteArray72);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator79 = composite9.new CompositeTypeIterator(composite31, 185, byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator79.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.Composite composite11 = new comparators.Composite();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        int int26 = composite11.compareTo(composite21);
        comparators.hector.CompositeListSerializer compositeListSerializer27 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.List<java.util.List<java.lang.Object>> objListList46 = compositeListSerializer27.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList42);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType47.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        java.lang.Object[] objArray51 = new java.lang.Object[] { compositeListSerializer27, compositeType49 };
        java.lang.Object[][] objArray52 = new java.lang.Object[][] { objArray51 };
        java.lang.Object[][] objArray53 = composite11.toArray(objArray52);
        java.lang.Object[][] objArray54 = composite9.toArray(objArray53);
        boolean boolean55 = composite9.isEmpty();
        java.lang.String str56 = composite9.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objListList46);
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) byteArray18);
        comparators.Composite composite29 = composite9.addBytes(byteArray18);
        comparators.Composite composite31 = composite29.addUTF8("true,6,434d500103000000000000004300");
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.util.RandomAccess[] randomAccessArray42 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray43 = composite41.toArray(randomAccessArray42);
        comparators.Composite composite45 = composite41.addLong((long) 67);
        comparators.Composite composite47 = composite45.addBool(true);
        comparators.Composite composite49 = composite45.addBool(true);
        comparators.Composite composite51 = composite49.addUTF8("80,6");
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.lang.Object[] objArray62 = composite61.toArray();
        int int63 = composite61.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream64 = composite61.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream65 = composite61.parallelStream();
        comparators.Composite composite67 = composite61.addBool(true);
        comparators.Composite composite69 = composite67.addLong((long) 6);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        comparators.Composite composite85 = composite79.addBool(true);
        comparators.Composite composite87 = composite85.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream88 = composite85.byteStream;
        composite69.byteStream = byteArrayOutputStream88;
        int int90 = composite69.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream91 = composite69.byteStream;
        composite49.byteStream = byteArrayOutputStream91;
        composite29.byteStream = byteArrayOutputStream91;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(randomAccessArray42);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertNotNull(composite69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteArrayOutputStream88);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream88.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(byteArrayOutputStream91);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream91.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
    }
}
