package org.osiam.client;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest30 {

    public static boolean debug = false;

    @Test
    public void test15001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15001");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Bearer ");
    }

    @Test
    public void test15002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15002");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("Authorization");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("PATCH");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test15003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15003");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count((int) 'a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
    }

    @Test
    public void test15004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15004");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        long long38 = query34.getStartIndex();
        org.osiam.client.query.Query query39 = query34.nextPage();
        org.osiam.client.query.Query query40 = query39.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder41 = new org.osiam.client.query.QueryBuilder(query39);
        org.osiam.client.query.Query query42 = query39.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector23.createQueryBuilder(query42);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query44 = query42.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertNotNull(queryBuilder43);
    }

    @Test
    public void test15005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15005");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken20 = builder15.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.lang.String str29 = accessToken27.getUserId();
        java.lang.String str30 = accessToken27.getToken();
        java.lang.String str31 = accessToken27.getClientId();
        boolean boolean32 = accessToken27.isExpired();
        java.util.Date date33 = accessToken27.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder15.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshToken("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserName("org.osiam.client.exception.OsiamRequestException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test15006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15006");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Bearer ");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("GET");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("Bearer ");
        org.osiam.client.OsiamConnector.Builder builder20 = builder16.setResourceServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder22 = builder16.setClientRedirectUri("client_credentials");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test15007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15007");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.query.Query query37 = query32.nextPage();
        org.osiam.client.query.Query query38 = query32.nextPage();
        java.lang.String str39 = query32.getSortOrder();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
    }

    @Test
    public void test15008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15008");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector17 = builder12.build();
        org.osiam.resources.scim.UpdateUser updateUser19 = null;
        org.osiam.client.oauth.AccessToken accessToken20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user21 = osiamConnector17.updateUser("org.osiam.client.exception.ConflictException: PATCH", updateUser19, accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
    }

    @Test
    public void test15009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15009");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("");
        org.osiam.client.AuthService.Builder builder13 = builder7.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService.Builder builder15 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.AuthService.Builder builder17 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder19 = builder7.setClientSecret("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder21 = builder7.setClientRedirectUri("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=100, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test15010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15010");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("ascending");
        org.osiam.client.oauth.Scope scope19 = new org.osiam.client.oauth.Scope("");
        boolean boolean21 = scope19.equals((java.lang.Object) (short) 0);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder15.addScope(scope19);
        java.lang.String str23 = scope19.toString();
        java.lang.String str24 = scope19.getValue();
        java.lang.String str25 = scope19.getValue();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test15011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15011");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.InvalidAttributeException: refresh_token");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService7.targetEndpoint;
        org.osiam.client.AuthService.Builder builder10 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientId("ME");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService15 = builder14.build();
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        java.lang.String str28 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        boolean boolean29 = accessToken25.isClientOnly();
        java.lang.String str30 = authService15.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken39 = builder36.build();
        java.lang.String str40 = accessToken39.toString();
        java.lang.String str41 = authService15.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        java.util.Date date49 = accessToken48.getExpiresAt();
        java.lang.String str50 = accessToken48.getRefreshToken();
        java.lang.String str51 = accessToken48.getType();
        java.lang.String str52 = accessToken48.getClientId();
        java.lang.String str53 = accessToken48.getUserName();
        java.lang.String str54 = authService15.extractErrorMessageForbidden(accessToken48);
        org.osiam.client.exception.UnauthorizedException unauthorizedException56 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int57 = unauthorizedException56.getHttpStatusCode();
        int int58 = unauthorizedException56.getHttpStatusCode();
        java.lang.Throwable[] throwableArray59 = unauthorizedException56.getSuppressed();
        boolean boolean60 = accessToken48.equals((java.lang.Object) unauthorizedException56);
        java.lang.String str61 = accessToken48.toString();
        java.lang.String str62 = accessToken48.getToken();
        org.osiam.client.OsiamConnector.Builder builder63 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder65 = builder63.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder67 = builder65.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder69 = builder67.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder71 = builder67.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector72 = builder71.build();
        org.osiam.client.query.QueryBuilder queryBuilder73 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder75 = queryBuilder73.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder77 = queryBuilder75.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder79 = queryBuilder75.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder81 = queryBuilder79.descending("hi!");
        org.osiam.client.query.Query query82 = queryBuilder81.build();
        java.lang.String str83 = query82.toString();
        java.lang.String str84 = query82.getSortOrder();
        java.lang.String str85 = query82.getSortBy();
        org.osiam.client.query.Query query86 = query82.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder87 = osiamConnector72.createQueryBuilder(query86);
        boolean boolean88 = accessToken48.equals((java.lang.Object) queryBuilder87);
        java.lang.String str89 = osiamGroupService7.extractErrorMessageForbidden(accessToken48);
        java.util.Date date90 = accessToken48.getExpiresAt();
        boolean boolean91 = accessToken48.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group92 = osiamGroupService2.updateResource("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", group4, accessToken48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str40, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 401 + "'", int57 == 401);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 401 + "'", int58 == 401);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str61, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Bearer " + "'", str62, "Bearer ");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(osiamConnector72);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder77);
        org.junit.Assert.assertNotNull(queryBuilder79);
        org.junit.Assert.assertNotNull(queryBuilder81);
        org.junit.Assert.assertNotNull(query82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str83, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "descending" + "'", str84, "descending");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(query86);
        org.junit.Assert.assertNotNull(queryBuilder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Insufficient scopes: []" + "'", str89, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test15012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15012");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.getSortOrder();
        java.lang.String str32 = query26.getAttributes();
        boolean boolean33 = accessToken14.equals((java.lang.Object) query26);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet34 = accessToken14.getScopes();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet35 = accessToken14.getScopes();
        boolean boolean36 = accessToken14.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user37 = osiamUserService5.updateUser("org.osiam.client.exception.ConnectionInitializationException: descending", updateUser7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(scopeSet34);
        org.junit.Assert.assertNotNull(scopeSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test15013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15013");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.lang.String str19 = accessToken18.getType();
        java.lang.String str20 = accessToken18.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user22 = osiamUserService4.createUser(user5, accessToken18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.osiam.client.exception.ConflictException: PATCH" + "'", str20, "org.osiam.client.exception.ConflictException: PATCH");
    }

    @Test
    public void test15014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15014");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.getSortOrder();
        java.lang.String str55 = query52.getSortBy();
        java.lang.String str56 = query52.getFilter();
        java.lang.String str57 = query52.getSortOrder();
        java.lang.String str58 = query52.getAttributes();
        java.lang.String str59 = query52.getAttributes();
        org.osiam.client.query.Query query60 = query52.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector7.createQueryBuilder(query52);
        org.osiam.client.query.QueryBuilder queryBuilder62 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.descending("hi!");
        org.osiam.client.query.Query query71 = queryBuilder70.build();
        java.lang.String str72 = query71.toString();
        java.lang.String str73 = query71.getSortOrder();
        java.lang.String str74 = query71.getSortBy();
        long long75 = query71.getStartIndex();
        java.lang.String str76 = query71.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder77 = new org.osiam.client.query.QueryBuilder(query71);
        java.lang.String str78 = query71.getSortOrder();
        int int79 = query71.getCount();
        java.lang.String str80 = query71.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder81 = new org.osiam.client.query.QueryBuilder(query71);
        org.osiam.client.query.QueryBuilder queryBuilder82 = osiamConnector7.createQueryBuilder(query71);
        org.osiam.client.query.QueryBuilder queryBuilder83 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder85 = queryBuilder83.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder87 = queryBuilder85.ascending("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder89 = queryBuilder87.attributes("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "descending" + "'", str54, "descending");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Authorization" + "'", str58, "Authorization");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Authorization" + "'", str59, "Authorization");
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(query71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str72, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "descending" + "'", str73, "descending");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "descending" + "'", str78, "descending");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Authorization" + "'", str80, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder82);
        org.junit.Assert.assertNotNull(queryBuilder83);
        org.junit.Assert.assertNotNull(queryBuilder85);
        org.junit.Assert.assertNotNull(queryBuilder87);
        org.junit.Assert.assertNotNull(queryBuilder89);
    }

    @Test
    public void test15015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15015");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("Insufficient scopes: [GET, ME, GET POST PUT PATCH DELETE]");
    }

    @Test
    public void test15016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15016");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=100, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: ascending");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test15017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15017");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientRedirectUri("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Authorization");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setClientSecret("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientId("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test15018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15018");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder15.setType("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshToken("ME");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setClientId("org.osiam.client.exception.InvalidAttributeException: authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setClientId("org.osiam.client.exception.OsiamClientException: ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setRefreshToken("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test15019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15019");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.Group group17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.lang.String str34 = accessToken32.getUserId();
        java.lang.String str35 = accessToken32.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamGroupService2.updateResource("org.osiam.client.exception.NoResultException: authorization_code", group17, accessToken32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Bearer " + "'", str35, "Bearer ");
    }

    @Test
    public void test15020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15020");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.AuthService.Builder builder6 = builder3.setClientRedirectUri("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder8 = builder3.setClientRedirectUri("password");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("client_credentials");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test15021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15021");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.client.oauth.Scope scope23 = new org.osiam.client.oauth.Scope("POST");
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder32 = builder28.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector33 = builder32.build();
        org.osiam.client.query.QueryBuilder queryBuilder34 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.descending("hi!");
        org.osiam.client.query.Query query43 = queryBuilder42.build();
        java.lang.String str44 = query43.toString();
        java.lang.String str45 = query43.getSortOrder();
        java.lang.String str46 = query43.getSortBy();
        org.osiam.client.query.Query query47 = query43.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder48 = osiamConnector33.createQueryBuilder(query47);
        org.osiam.client.query.QueryBuilder queryBuilder49 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder51.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.descending("hi!");
        org.osiam.client.query.Query query58 = queryBuilder57.build();
        java.lang.String str59 = query58.toString();
        java.lang.String str60 = query58.getSortOrder();
        java.lang.String str61 = query58.getSortBy();
        java.lang.String str62 = query58.getFilter();
        java.lang.String str63 = query58.getSortOrder();
        java.lang.String str64 = query58.getAttributes();
        long long65 = query58.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder66 = osiamConnector33.createQueryBuilder(query58);
        boolean boolean67 = scope23.equals((java.lang.Object) query58);
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector21.createQueryBuilder(query58);
        org.osiam.client.oauth.AccessToken accessToken70 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector21.revokeAllAccessTokens("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(osiamConnector33);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(query43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "descending" + "'", str45, "descending");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(query47);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "descending" + "'", str60, "descending");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "descending" + "'", str63, "descending");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Authorization" + "'", str64, "Authorization");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(queryBuilder68);
    }

    @Test
    public void test15022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15022");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str1 = scope0.toString();
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PATCH" + "'", str1, "PATCH");
    }

    @Test
    public void test15023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15023");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str15 = scope14.toString();
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder13.addScope(scope14);
        java.lang.Object obj17 = null;
        boolean boolean18 = scope14.equals(obj17);
        java.lang.String str19 = scope14.toString();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        boolean boolean28 = accessToken26.isClientOnly();
        java.lang.String str29 = accessToken26.getRefreshToken();
        boolean boolean30 = accessToken26.isExpired();
        boolean boolean31 = accessToken26.isExpired();
        java.lang.String str32 = accessToken26.getClientId();
        boolean boolean33 = accessToken26.isExpired();
        java.util.Date date34 = accessToken26.getRefreshTokenExpiresAt();
        boolean boolean35 = scope14.equals((java.lang.Object) date34);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PUT" + "'", str15, "PUT");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PUT" + "'", str19, "PUT");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test15024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15024");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.getAttributes();
        java.lang.String str44 = query42.toString();
        java.lang.String str45 = query42.getSortBy();
        org.osiam.client.query.Query query46 = query42.nextPage();
        int int47 = query42.getCount();
        java.lang.String str48 = query42.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder49 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        java.lang.String str58 = accessToken56.getUserId();
        java.lang.String str59 = accessToken56.getToken();
        boolean boolean60 = accessToken56.isExpired();
        java.lang.String str61 = accessToken56.getClientId();
        boolean boolean62 = accessToken56.isExpired();
        java.lang.String str63 = accessToken56.getUserId();
        java.lang.String str64 = accessToken56.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.revokeAccessToken(accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Bearer " + "'", str59, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test15025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15025");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("authorization_code");
        org.osiam.client.AuthService authService12 = builder7.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
    }

    @Test
    public void test15026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15026");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamConnector.Builder builder16 = builder10.setClientRedirectUri("hi!");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test15027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15027");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken52);
        java.util.Date date54 = accessToken52.getExpiresAt();
        java.lang.String str55 = authService6.extractErrorMessageForbidden(accessToken52);
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        java.util.Date date63 = accessToken62.getExpiresAt();
        java.lang.String str64 = accessToken62.getRefreshToken();
        java.lang.String str65 = accessToken62.getType();
        java.lang.String str66 = accessToken62.getClientId();
        java.lang.String str67 = accessToken62.getUserName();
        java.lang.String str68 = accessToken62.toString();
        java.lang.String str69 = accessToken62.getUserName();
        java.lang.String str70 = authService6.extractErrorMessageForbidden(accessToken62);
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken79 = builder76.build();
        java.lang.String str80 = accessToken79.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken79.getScopes();
        java.lang.String str82 = accessToken79.getClientId();
        java.lang.String str83 = authService6.extractErrorMessageForbidden(accessToken79);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken79);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str68, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Insufficient scopes: []" + "'", str70, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str80, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Insufficient scopes: []" + "'", str83, "Insufficient scopes: []");
    }

    @Test
    public void test15028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15028");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.client.oauth.Scope scope23 = new org.osiam.client.oauth.Scope("POST");
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder32 = builder28.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector33 = builder32.build();
        org.osiam.client.query.QueryBuilder queryBuilder34 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.descending("hi!");
        org.osiam.client.query.Query query43 = queryBuilder42.build();
        java.lang.String str44 = query43.toString();
        java.lang.String str45 = query43.getSortOrder();
        java.lang.String str46 = query43.getSortBy();
        org.osiam.client.query.Query query47 = query43.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder48 = osiamConnector33.createQueryBuilder(query47);
        org.osiam.client.query.QueryBuilder queryBuilder49 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder51.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.descending("hi!");
        org.osiam.client.query.Query query58 = queryBuilder57.build();
        java.lang.String str59 = query58.toString();
        java.lang.String str60 = query58.getSortOrder();
        java.lang.String str61 = query58.getSortBy();
        java.lang.String str62 = query58.getFilter();
        java.lang.String str63 = query58.getSortOrder();
        java.lang.String str64 = query58.getAttributes();
        long long65 = query58.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder66 = osiamConnector33.createQueryBuilder(query58);
        boolean boolean67 = scope23.equals((java.lang.Object) query58);
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector21.createQueryBuilder(query58);
        org.osiam.client.OsiamGroupService.Builder builder71 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService72 = builder71.build();
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        boolean boolean80 = accessToken79.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken79.getScopes();
        java.lang.String str82 = osiamGroupService72.extractErrorMessageForbidden(accessToken79);
        java.lang.String str83 = accessToken79.getType();
        java.lang.String str84 = accessToken79.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector21.revokeAllAccessTokens("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken79);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(osiamConnector33);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(query43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "descending" + "'", str45, "descending");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(query47);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "descending" + "'", str60, "descending");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "descending" + "'", str63, "descending");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Authorization" + "'", str64, "Authorization");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(osiamGroupService72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Insufficient scopes: []" + "'", str82, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test15029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15029");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        java.lang.String str31 = accessToken26.getRefreshToken();
        java.lang.String str32 = authService4.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str34 = accessToken26.getToken();
        boolean boolean35 = accessToken26.isClientOnly();
        java.lang.String str36 = accessToken26.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Bearer " + "'", str34, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str36, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15030");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        boolean boolean7 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer0.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeSetJsonDeserializer9.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(wildcardJsonDeserializer10);
    }

    @Test
    public void test15031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15031");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken13.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str19 = osiamGroupService2.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder24 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService25 = builder24.build();
        org.osiam.client.OsiamGroupService osiamGroupService26 = builder24.build();
        javax.ws.rs.client.WebTarget webTarget27 = osiamGroupService26.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget28 = osiamGroupService26.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget29 = osiamGroupService26.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.lang.String str37 = osiamGroupService26.extractErrorMessageForbidden(accessToken36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.lang.String str45 = accessToken44.toString();
        java.lang.String str46 = accessToken44.getType();
        boolean boolean47 = accessToken44.isExpired();
        java.lang.String str48 = accessToken44.getToken();
        java.lang.String str49 = osiamGroupService26.extractErrorMessageForbidden(accessToken44);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        boolean boolean58 = accessToken56.isClientOnly();
        java.lang.String str59 = accessToken56.getUserName();
        java.lang.String str60 = osiamGroupService26.extractErrorMessageForbidden(accessToken56);
        java.util.Date date61 = accessToken56.getExpiresAt();
        java.lang.String str62 = accessToken56.getType();
        boolean boolean63 = accessToken56.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("org.osiam.client.exception.InvalidAttributeException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken56);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(webTarget21);
        org.junit.Assert.assertNotNull(osiamGroupService25);
        org.junit.Assert.assertNotNull(osiamGroupService26);
        org.junit.Assert.assertNotNull(webTarget27);
        org.junit.Assert.assertNotNull(webTarget28);
        org.junit.Assert.assertNotNull(webTarget29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str45, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Bearer " + "'", str48, "Bearer ");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test15032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15032");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = osiamGroupService6.extractErrorMessageDefault("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Bearer ", statusType38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget36);
    }

    @Test
    public void test15033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15033");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.lang.String str17 = accessToken15.getRefreshToken();
        java.lang.String str18 = accessToken15.getType();
        java.lang.String str19 = accessToken15.getClientId();
        java.lang.String str20 = accessToken15.getUserName();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = accessToken15.getUserName();
        java.lang.String str23 = authService8.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.util.Date date31 = accessToken30.getExpiresAt();
        java.lang.String str32 = accessToken30.getRefreshToken();
        boolean boolean33 = accessToken30.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        java.lang.String str35 = authService8.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken42);
        java.util.Date date44 = accessToken42.getExpiresAt();
        boolean boolean45 = accessToken42.isClientOnly();
        boolean boolean46 = accessToken42.isClientOnly();
        java.lang.String str47 = authService8.extractErrorMessageForbidden(accessToken42);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user48 = osiamUserService3.getCurrentUser(accessToken42);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(authService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
    }

    @Test
    public void test15034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15034");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder0.setResourceServerEndpoint("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector osiamConnector7 = builder0.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        boolean boolean16 = accessToken14.isClientOnly();
        java.lang.String str17 = accessToken14.getRefreshToken();
        boolean boolean18 = accessToken14.isExpired();
        boolean boolean19 = accessToken14.isExpired();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken28 = builder25.build();
        boolean boolean29 = accessToken14.equals((java.lang.Object) builder25);
        java.lang.String str30 = accessToken14.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user31 = osiamConnector7.getCurrentUser(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
    }

    @Test
    public void test15035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15035");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("org.osiam.client.exception.UnauthorizedException: DELETE");
        org.osiam.client.OsiamConnector osiamConnector23 = builder18.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
    }

    @Test
    public void test15036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15036");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(409, "client_credentials");
        java.lang.String str3 = osiamRequestException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.osiam.client.exception.OsiamRequestException: client_credentials" + "'", str3, "org.osiam.client.exception.OsiamRequestException: client_credentials");
    }

    @Test
    public void test15037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15037");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope scope15 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.ForbiddenException: hi!");
        java.lang.String str16 = scope15.toString();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder9.addScope(scope15);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.exception.OsiamClientException osiamClientException21 = new org.osiam.client.exception.OsiamClientException("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.addScope(scope24);
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder23.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setUserId("");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str37 = scope36.toString();
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder35.addScope(scope36);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setType("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope42 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder40.addScope(scope42);
        java.lang.String str44 = scope42.getValue();
        java.lang.String str45 = scope42.getValue();
        java.lang.String str46 = scope42.getValue();
        org.osiam.client.exception.OsiamClientException osiamClientException48 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.NoResultException: refresh_token");
        boolean boolean49 = scope42.equals((java.lang.Object) osiamClientException48);
        osiamClientException21.addSuppressed((java.lang.Throwable) osiamClientException48);
        boolean boolean51 = scope15.equals((java.lang.Object) osiamClientException48);
        java.lang.String str52 = scope15.getValue();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str16, "org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str17, "org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str19, "org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PUT" + "'", str37, "PUT");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Authorization" + "'", str44, "Authorization");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Authorization" + "'", str45, "Authorization");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Authorization" + "'", str46, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str52, "org.osiam.client.exception.ForbiddenException: hi!");
    }

    @Test
    public void test15038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15038");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str11 = scope10.toString();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder5.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PUT" + "'", str11, "PUT");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
    }

    @Test
    public void test15039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15039");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer0.unwrappingDeserializer(nameTransformer8);
        java.util.Collection<java.lang.Object> objCollection10 = scopeSetJsonDeserializer9.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeSetJsonDeserializer9.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection12 = scopeSetJsonDeserializer9.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer13 = scopeSetJsonDeserializer9.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(objCollection10);
        org.junit.Assert.assertNull(scopeSet11);
        org.junit.Assert.assertNull(objCollection12);
        org.junit.Assert.assertNull(wildcardJsonDeserializer13);
    }

    @Test
    public void test15040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15040");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        boolean boolean2 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.helper.ScopeSerializer scopeSerializer19 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean20 = scopeSerializer19.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer21 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer22 = scopeSerializer19.unwrappingSerializer(nameTransformer21);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str36 = scope35.toString();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str39 = scope38.getValue();
        java.lang.String str40 = scope38.getValue();
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        boolean boolean57 = scope55.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray59 = new org.osiam.client.oauth.Scope[] { scope28, scope29, scope34, scope35, scope37, scope38, scope41, scope46, scope47, scope48, scope49, scope53, scope54, scope55, scope58 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet60 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet60, scopeArray59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder25.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet60);
        boolean boolean63 = scopeSetJsonSerializer22.isEmpty(serializerProvider23, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet60);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder17.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet60);
        boolean boolean65 = scopeSerializer0.isEmpty(serializerProvider3, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet60);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer66 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer67 = scopeSerializer0.unwrappingSerializer(nameTransformer66);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper68 = null;
        com.fasterxml.jackson.databind.JavaType javaType69 = null;
        scopeSetJsonSerializer67.acceptJsonFormatVisitor(jsonFormatVisitorWrapper68, javaType69);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass71 = scopeSetJsonSerializer67.handledType();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer72 = scopeSetJsonSerializer67.getDelegatee();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        boolean boolean81 = accessToken80.isRefreshTokenExpired();
        boolean boolean82 = accessToken80.isClientOnly();
        java.lang.String str83 = accessToken80.getClientId();
        java.lang.String str84 = accessToken80.getUserId();
        java.lang.String str85 = accessToken80.getClientId();
        java.lang.String str86 = accessToken80.getRefreshToken();
        java.lang.String str87 = accessToken80.getClientId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet88 = accessToken80.getScopes();
        boolean boolean89 = scopeSetJsonSerializer67.isEmpty(serializerProvider73, scopeSet88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ME" + "'", str36, "ME");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PATCH" + "'", str39, "PATCH");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PATCH" + "'", str40, "PATCH");
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(scopeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer67);
        org.junit.Assert.assertNull(scopeSetClass71);
        org.junit.Assert.assertNull(wildcardJsonSerializer72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(scopeSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test15041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15041");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getErrorCode();
        java.lang.String str2 = scimErrorMessage0.getErrorCode();
        java.lang.String str3 = scimErrorMessage0.getDescription();
        java.lang.String str4 = scimErrorMessage0.getErrorCode();
        java.lang.String str5 = scimErrorMessage0.getErrorCode();
        java.lang.String str6 = scimErrorMessage0.getDescription();
        java.lang.String str7 = scimErrorMessage0.getDescription();
        java.lang.String str8 = scimErrorMessage0.getErrorCode();
        java.lang.String str9 = scimErrorMessage0.getErrorCode();
        java.lang.String str10 = scimErrorMessage0.getDescription();
        java.lang.String str11 = scimErrorMessage0.getErrorCode();
        java.lang.String str12 = scimErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test15042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15042");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.lang.String str14 = osiamGroupService3.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.lang.String str22 = accessToken21.toString();
        java.lang.String str23 = accessToken21.getType();
        boolean boolean24 = accessToken21.isExpired();
        java.lang.String str25 = accessToken21.getToken();
        java.lang.String str26 = osiamGroupService3.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getUserName();
        java.lang.String str37 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        java.util.Date date38 = accessToken33.getExpiresAt();
        java.lang.String str39 = accessToken33.getType();
        java.lang.String str40 = accessToken33.getUserName();
        boolean boolean41 = accessToken33.isRefreshTokenExpired();
        java.lang.String str42 = accessToken33.getUserId();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test15043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15043");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count((int) (short) -1);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.filter("Bearer ");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.startIndex((long) '4');
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.startIndex((long) 403);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Insufficient scopes: [GET]");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.filter("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
    }

    @Test
    public void test15044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15044");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientRedirectUri("Authorization");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientId("ADMIN");
        org.osiam.client.OsiamConnector osiamConnector11 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector.Builder builder30 = builder26.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.osiam.client.OsiamConnector osiamConnector31 = builder30.build();
        org.osiam.client.AuthService.Builder builder33 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientId("ME");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService42 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        boolean boolean50 = accessToken49.isRefreshTokenExpired();
        java.lang.String str51 = accessToken49.getUserId();
        java.lang.String str52 = accessToken49.getToken();
        java.lang.String str53 = authService42.extractErrorMessageForbidden(accessToken49);
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str55 = scope54.getValue();
        java.lang.String str56 = scope54.toString();
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray58 = new org.osiam.client.oauth.Scope[] { scope54, scope57 };
        java.net.URI uRI59 = authService42.getAuthorizationUri(scopeArray58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken68 = builder65.build();
        java.lang.String str69 = accessToken68.getRefreshToken();
        java.lang.String str70 = authService42.extractErrorMessageForbidden(accessToken68);
        org.osiam.client.AuthService.Builder builder72 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder74 = builder72.setClientId("ME");
        org.osiam.client.AuthService.Builder builder76 = builder74.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder78 = builder76.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder80 = builder78.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder82 = builder78.setClientId("");
        org.osiam.client.AuthService.Builder builder84 = builder78.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService85 = builder84.build();
        org.osiam.client.oauth.Scope scope87 = new org.osiam.client.oauth.Scope("");
        java.lang.String str88 = scope87.getValue();
        org.osiam.client.oauth.Scope scope90 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray91 = new org.osiam.client.oauth.Scope[] { scope87, scope90 };
        java.net.URI uRI92 = authService85.getAuthorizationUri(scopeArray91);
        java.net.URI uRI93 = authService42.getAuthorizationUri(scopeArray91);
        java.net.URI uRI94 = osiamConnector31.getAuthorizationUri(scopeArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken95 = osiamConnector11.retrieveAccessToken("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending", "org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", scopeArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(authService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Bearer " + "'", str52, "Bearer ");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PATCH" + "'", str55, "PATCH");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PATCH" + "'", str56, "PATCH");
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(scopeArray58);
        org.junit.Assert.assertNotNull(uRI59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Insufficient scopes: []" + "'", str70, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(authService85);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(scopeArray91);
        org.junit.Assert.assertNotNull(uRI92);
        org.junit.Assert.assertNotNull(uRI93);
        org.junit.Assert.assertNotNull(uRI94);
    }

    @Test
    public void test15045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15045");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean5 = scopeSerializer4.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer7 = scopeSerializer4.unwrappingSerializer(nameTransformer6);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str21 = scope20.toString();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str24 = scope23.getValue();
        java.lang.String str25 = scope23.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        boolean boolean42 = scope40.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope13, scope14, scope19, scope20, scope22, scope23, scope26, scope31, scope32, scope33, scope34, scope38, scope39, scope40, scope43 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet45 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet45, scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder10.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean48 = scopeSetJsonSerializer7.isEmpty(serializerProvider8, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean49 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass50 = scopeSerializer0.handledType();
        boolean boolean51 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer52 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer53 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer54 = scopeSerializer0.unwrappingSerializer(nameTransformer53);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer55 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer56 = scopeSerializer0.unwrappingSerializer(nameTransformer55);
        org.osiam.client.helper.ScopeSerializer scopeSerializer57 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean58 = scopeSerializer57.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer59 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer60 = scopeSerializer57.unwrappingSerializer(nameTransformer59);
        org.osiam.client.OsiamGroupService.Builder builder62 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService63 = builder62.build();
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        boolean boolean71 = accessToken70.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet72 = accessToken70.getScopes();
        java.lang.String str73 = osiamGroupService63.extractErrorMessageForbidden(accessToken70);
        boolean boolean74 = accessToken70.isExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet75 = accessToken70.getScopes();
        boolean boolean76 = scopeSetJsonSerializer60.isEmpty(scopeSet75);
        boolean boolean77 = scopeSetJsonSerializer56.isEmpty(scopeSet75);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer78 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer79 = scopeSetJsonSerializer56.unwrappingSerializer(nameTransformer78);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper80 = null;
        com.fasterxml.jackson.databind.JavaType javaType81 = null;
        scopeSetJsonSerializer56.acceptJsonFormatVisitor(jsonFormatVisitorWrapper80, javaType81);
        boolean boolean83 = scopeSetJsonSerializer56.isUnwrappingSerializer();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ME" + "'", str21, "ME");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(scopeSetClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer52);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer54);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer60);
        org.junit.Assert.assertNotNull(osiamGroupService63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(scopeSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(scopeSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test15046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15046");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test15047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15047");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        org.osiam.client.query.Query query12 = query9.nextPage();
        long long13 = query12.getStartIndex();
        int int14 = query12.getCount();
        int int15 = query12.getCount();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test15048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15048");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder17 = builder13.setClientSecret("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.AuthService authService20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.lang.String str29 = accessToken27.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet30 = accessToken27.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer31 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean32 = scopeSerializer31.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str45 = scope44.toString();
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str48 = scope47.getValue();
        java.lang.String str49 = scope47.getValue();
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException60 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean61 = scope58.equals((java.lang.Object) invalidAttributeException60);
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.GET;
        boolean boolean66 = scope64.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray68 = new org.osiam.client.oauth.Scope[] { scope37, scope38, scope43, scope44, scope46, scope47, scope50, scope55, scope56, scope57, scope58, scope62, scope63, scope64, scope67 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet69 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet69, scopeArray68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder34.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet69);
        boolean boolean72 = scopeSerializer31.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet69);
        boolean boolean73 = accessToken27.equals((java.lang.Object) scopeSet69);
        boolean boolean74 = accessToken27.isClientOnly();
        java.lang.String str75 = accessToken27.getUserId();
        java.lang.String str76 = authService20.extractErrorMessageForbidden(accessToken27);
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("", accessToken27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(authService20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(scopeSet30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ME" + "'", str45, "ME");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PATCH" + "'", str48, "PATCH");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PATCH" + "'", str49, "PATCH");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertNotNull(scopeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Insufficient scopes: []" + "'", str76, "Insufficient scopes: []");
    }

    @Test
    public void test15049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15049");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        boolean boolean14 = accessToken12.isClientOnly();
        java.lang.String str15 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken12.getScopes();
        boolean boolean17 = accessToken12.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService3.updateUser("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.NoResultException: refresh_token", updateUser5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(scopeSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test15050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15050");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService24 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        boolean boolean33 = accessToken31.isClientOnly();
        java.lang.String str34 = accessToken31.getClientId();
        java.lang.String str35 = authService24.extractErrorMessageForbidden(accessToken31);
        java.util.Date date36 = accessToken31.getExpiresAt();
        java.lang.String str37 = accessToken31.toString();
        java.util.Date date38 = accessToken31.getExpiresAt();
        java.lang.String str39 = osiamGroupService2.extractErrorMessageForbidden(accessToken31);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.lang.String str44 = accessToken43.toString();
        java.lang.String str45 = accessToken43.getToken();
        boolean boolean46 = accessToken43.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group47 = osiamGroupService2.getGroup("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(authService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str37, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str44, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "client_credentials" + "'", str45, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test15051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15051");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken12.getScopes();
        java.lang.String str15 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        boolean boolean16 = accessToken12.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str18 = accessToken12.getToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken12.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList20 = osiamUserService2.getAllUsers(accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Bearer " + "'", str18, "Bearer ");
        org.junit.Assert.assertNotNull(scopeSet19);
    }

    @Test
    public void test15052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15052");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserId();
        java.lang.String str9 = accessToken6.getClientId();
        java.lang.String str10 = accessToken6.getClientId();
        java.lang.String str11 = accessToken6.toString();
        java.lang.String str12 = accessToken6.getClientId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test15053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15053");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.Query query18 = query9.nextPage();
        org.osiam.client.query.Query query19 = query9.nextPage();
        java.lang.String str20 = query19.getSortBy();
        org.osiam.client.query.Query query21 = query19.previousPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(query21);
    }

    @Test
    public void test15054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15054");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.filter("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.query.Query query13 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder8.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder8.filter("org.osiam.client.exception.ConnectionInitializationException: ");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder8.filter("org.osiam.client.exception.ConflictException: org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
    }

    @Test
    public void test15055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15055");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.OsiamConnector.Builder builder1 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder3 = builder1.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder5 = builder3.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector10 = builder7.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector10.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query19 = queryBuilder16.build();
        org.osiam.client.query.Query query20 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector10.createQueryBuilder(query19);
        boolean boolean22 = scope0.equals((java.lang.Object) osiamConnector10);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken32 = builder29.build();
        java.util.Date date33 = accessToken32.getExpiresAt();
        java.lang.String str34 = accessToken32.toString();
        java.lang.String str35 = accessToken32.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamConnector10.getGroup("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str34, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test15056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15056");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=ME, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test15057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15057");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder5.setUserId("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder17.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.lang.Object obj31 = null;
        boolean boolean32 = accessToken30.equals(obj31);
        boolean boolean33 = accessToken30.isExpired();
        java.util.Date date34 = accessToken30.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder17.setExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder5.setExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("client_credentials");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test15058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15058");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ConflictException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken12 = builder9.build();
        java.lang.String str13 = accessToken12.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test15059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15059");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.attributes("PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.descending("ME");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test15060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15060");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(objectIdReader4);
    }

    @Test
    public void test15061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15061");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query16);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.Query query21 = queryBuilder18.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector5.createQueryBuilder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken25 = osiamConnector5.retrieveAccessToken("org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder23);
    }

    @Test
    public void test15062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15062");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortBy();
        org.osiam.client.query.Query query59 = query55.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.client.AuthService.Builder builder62 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientId("ME");
        org.osiam.client.AuthService.Builder builder66 = builder64.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService67 = builder66.build();
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        boolean boolean75 = accessToken74.isRefreshTokenExpired();
        java.lang.String str76 = accessToken74.getUserId();
        java.lang.String str77 = accessToken74.getClientId();
        boolean boolean78 = accessToken74.isClientOnly();
        java.lang.String str79 = authService67.extractErrorMessageForbidden(accessToken74);
        java.lang.String str80 = accessToken74.toString();
        java.lang.String str81 = accessToken74.getClientId();
        java.util.Date date82 = accessToken74.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken83 = osiamConnector5.validateAccessToken(accessToken74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(query59);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(authService67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Insufficient scopes: []" + "'", str79, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str80, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15063");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Collection<java.lang.Object> objCollection8 = scopeSetJsonDeserializer7.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer7.getNullValue();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer10 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer10.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeDeserializer10.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection13 = scopeDeserializer10.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeDeserializer10.getDelegatee();
        boolean boolean15 = scopeDeserializer10.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer17 = scopeDeserializer10.unwrappingDeserializer(nameTransformer16);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = scopeSetJsonDeserializer17.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader19 = scopeSetJsonDeserializer17.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = scopeSetJsonDeserializer17.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer21 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer22 = scopeSetJsonDeserializer17.unwrappingDeserializer(nameTransformer21);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer23 = scopeSetJsonDeserializer22.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer24 = scopeSetJsonDeserializer7.replaceDelegatee(scopeSetJsonDeserializer22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardJsonDeserializer12);
        org.junit.Assert.assertNull(objCollection13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer17);
        org.junit.Assert.assertNull(scopeSet18);
        org.junit.Assert.assertNull(objectIdReader19);
        org.junit.Assert.assertNull(scopeSet20);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer22);
        org.junit.Assert.assertNull(wildcardJsonDeserializer23);
    }

    @Test
    public void test15064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15064");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshToken("DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshToken("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test15065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15065");
        org.osiam.client.OsiamConnector.setMaxConnectionsPerRoute((int) (byte) 10);
    }

    @Test
    public void test15066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15066");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user5 = osiamUserService2.getUser("org.osiam.client.exception.ForbiddenException: Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]", accessToken4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
    }

    @Test
    public void test15067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15067");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str11 = scope10.toString();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder5.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.Scope scope16 = new org.osiam.client.oauth.Scope("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        java.lang.String str17 = scope16.toString();
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.addScope(scope16);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PUT" + "'", str11, "PUT");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]" + "'", str17, "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test15068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15068");
        org.osiam.client.exception.ForbiddenException forbiddenException2 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamClientException: descending", (java.lang.Throwable) forbiddenException2);
        int int4 = forbiddenException2.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 403 + "'", int4 == 403);
    }

    @Test
    public void test15069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15069");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.lang.String str14 = osiamGroupService3.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.lang.String str23 = accessToken22.toString();
        java.lang.String str24 = accessToken22.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str26 = accessToken22.getClientId();
        java.lang.String str27 = accessToken22.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList28 = osiamGroupService3.getAllResources(accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str23, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test15070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15070");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.Query query13 = query9.nextPage();
        java.lang.String str14 = query9.getFilter();
        int int15 = query9.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(queryBuilder18);
    }

    @Test
    public void test15071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15071");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("ME");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test15072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15072");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        java.lang.String str33 = accessToken32.toString();
        boolean boolean34 = scope20.equals((java.lang.Object) str33);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder13.addScope(scope20);
        java.lang.String str36 = scope20.getValue();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str33, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
    }

    @Test
    public void test15073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15073");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("refresh_token");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken24.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser27 = osiamUserService3.getCurrentUserBasic(accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(scopeSet26);
    }

    @Test
    public void test15074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15074");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
    }

    @Test
    public void test15075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15075");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = osiamConnector11.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        boolean boolean22 = accessToken20.isClientOnly();
        java.lang.String str23 = accessToken20.getClientId();
        boolean boolean24 = accessToken20.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector11.deleteGroup("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending", accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test15076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15076");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass2 = scopeSerializer0.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = accessToken9.getScopes();
        boolean boolean13 = scopeSerializer0.isEmpty(scopeSet12);
        boolean boolean14 = scopeSerializer0.usesObjectId();
        boolean boolean15 = scopeSerializer0.usesObjectId();
        boolean boolean16 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider17 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer18 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean19 = scopeSerializer18.usesObjectId();
        boolean boolean20 = scopeSerializer18.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer21 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer22 = scopeSerializer18.unwrappingSerializer(nameTransformer21);
        org.osiam.client.helper.ScopeSerializer scopeSerializer23 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str36 = scope35.toString();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str39 = scope38.getValue();
        java.lang.String str40 = scope38.getValue();
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        boolean boolean57 = scope55.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray59 = new org.osiam.client.oauth.Scope[] { scope28, scope29, scope34, scope35, scope37, scope38, scope41, scope46, scope47, scope48, scope49, scope53, scope54, scope55, scope58 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet60 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet60, scopeArray59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder25.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet60);
        boolean boolean63 = scopeSerializer23.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet60);
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        boolean boolean71 = accessToken70.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet72 = accessToken70.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider74 = null;
        scopeSerializer23.serialize(scopeSet72, jsonGenerator73, serializerProvider74);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setRefreshTokenExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder78.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken83 = builder82.build();
        boolean boolean84 = accessToken83.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet85 = accessToken83.getScopes();
        boolean boolean86 = scopeSerializer23.isEmpty(serializerProvider76, scopeSet85);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider88 = null;
        scopeSerializer18.serialize(scopeSet85, jsonGenerator87, serializerProvider88);
        boolean boolean90 = scopeSerializer0.isEmpty(serializerProvider17, scopeSet85);
        boolean boolean91 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer92 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer93 = scopeSerializer0.unwrappingSerializer(nameTransformer92);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet94 = null;
        boolean boolean95 = scopeSetJsonSerializer93.isEmpty(scopeSet94);
        boolean boolean96 = scopeSetJsonSerializer93.isUnwrappingSerializer();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(scopeSetClass2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(scopeSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ME" + "'", str36, "ME");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PATCH" + "'", str39, "PATCH");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PATCH" + "'", str40, "PATCH");
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(scopeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(scopeSet72);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(accessToken83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(scopeSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test15077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15077");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = osiamConnector3.createQueryBuilder();
        org.osiam.client.OsiamConnector.Builder builder5 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder13 = builder9.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector14 = builder13.build();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        org.osiam.client.query.Query query28 = query24.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder29 = osiamConnector14.createQueryBuilder(query28);
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.descending("hi!");
        org.osiam.client.query.Query query39 = queryBuilder38.build();
        java.lang.String str40 = query39.toString();
        java.lang.String str41 = query39.getSortOrder();
        java.lang.String str42 = query39.getSortBy();
        java.lang.String str43 = query39.getFilter();
        java.lang.String str44 = query39.getSortOrder();
        java.lang.String str45 = query39.getAttributes();
        long long46 = query39.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector14.createQueryBuilder(query39);
        java.lang.String str48 = query39.getSortBy();
        int int49 = query39.getCount();
        org.osiam.client.oauth.AccessToken accessToken50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult51 = osiamConnector3.searchUsers(query39, accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(query28);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "descending" + "'", str41, "descending");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Authorization" + "'", str45, "Authorization");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
    }

    @Test
    public void test15078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15078");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientId("ascending");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test15079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15079");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getRefreshToken();
        java.lang.String str16 = accessToken13.getType();
        java.lang.String str17 = accessToken13.getClientId();
        java.lang.String str18 = accessToken13.toString();
        java.lang.String str19 = accessToken13.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList20 = osiamConnector5.getAllGroups(accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str18, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test15080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15080");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("PATCH");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.toString();
        java.lang.String str15 = query12.toString();
        java.lang.String str16 = query12.toString();
        org.osiam.client.OsiamGroupService.Builder builder18 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getUserName();
        java.lang.String str29 = accessToken26.toString();
        java.lang.String str30 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        boolean boolean31 = accessToken26.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult32 = osiamUserService2.searchUsers(query12, accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test15081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15081");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder10.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count((int) (short) -1);
        org.osiam.client.query.Query query21 = queryBuilder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        java.lang.String str23 = query21.getAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test15082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15082");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: ADMIN");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getClientId();
        boolean boolean25 = accessToken21.isClientOnly();
        boolean boolean26 = accessToken11.equals((java.lang.Object) accessToken21);
        boolean boolean27 = accessToken11.isExpired();
        boolean boolean28 = accessToken11.isRefreshTokenExpired();
        org.osiam.client.OsiamConnector.Builder builder29 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder31 = builder29.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector36 = builder35.build();
        org.osiam.client.query.QueryBuilder queryBuilder37 = osiamConnector36.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.ascending("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.Query query40 = queryBuilder39.build();
        boolean boolean41 = accessToken11.equals((java.lang.Object) queryBuilder39);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user42 = osiamUserService2.replaceUser("org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: ME", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(osiamConnector36);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test15083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15083");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.descending("client_credentials");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder8.attributes("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count((int) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.ascending("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.startIndex((long) ' ');
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(52);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
    }

    @Test
    public void test15084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15084");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = accessToken6.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer10 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean11 = scopeSerializer10.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException19 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean20 = scope17.equals((java.lang.Object) invalidAttributeException19);
        java.lang.String str21 = scope17.getValue();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str24 = scope23.toString();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str27 = scope26.getValue();
        java.lang.String str28 = scope26.getValue();
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.GET;
        boolean boolean45 = scope43.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray47 = new org.osiam.client.oauth.Scope[] { scope16, scope17, scope22, scope23, scope25, scope26, scope29, scope34, scope35, scope36, scope37, scope41, scope42, scope43, scope46 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet48 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet48, scopeArray47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder13.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet48);
        boolean boolean51 = scopeSerializer10.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet48);
        boolean boolean52 = accessToken6.equals((java.lang.Object) scopeSet48);
        java.lang.String str53 = accessToken6.getUserId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(scopeSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ME" + "'", str24, "ME");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PATCH" + "'", str27, "PATCH");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PATCH" + "'", str28, "PATCH");
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scopeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test15085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15085");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserId();
        java.lang.String str9 = accessToken6.getClientId();
        java.lang.String str10 = accessToken6.getUserId();
        java.lang.String str11 = accessToken6.getUserId();
        boolean boolean12 = accessToken6.isRefreshTokenExpired();
        java.lang.String str13 = accessToken6.getUserId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test15086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15086");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = authService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean23 = accessToken20.isRefreshTokenExpired();
        java.lang.String str24 = accessToken20.getType();
        java.util.Date date25 = accessToken20.getExpiresAt();
        boolean boolean26 = accessToken20.isClientOnly();
        java.lang.String str27 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        javax.ws.rs.core.Response.StatusType statusType29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.lang.String str39 = accessToken36.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.lang.String str48 = accessToken46.getClientId();
        boolean boolean49 = accessToken36.equals((java.lang.Object) accessToken46);
        boolean boolean50 = accessToken46.isRefreshTokenExpired();
        java.lang.String str51 = accessToken46.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.ForbiddenException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", statusType29, accessToken46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test15087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15087");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.oauth.Scope scope4 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str6 = scope5.getValue();
        java.lang.String str7 = scope5.getValue();
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str9 = scope8.getValue();
        java.lang.String str10 = scope8.getValue();
        org.osiam.client.oauth.Scope[] scopeArray11 = new org.osiam.client.oauth.Scope[] { scope4, scope5, scope8 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken12 = authService2.retrieveAccessToken(scopeArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PUT" + "'", str6, "PUT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PUT" + "'", str7, "PUT");
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PATCH" + "'", str9, "PATCH");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PATCH" + "'", str10, "PATCH");
        org.junit.Assert.assertNotNull(scopeArray11);
    }

    @Test
    public void test15088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15088");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.OsiamGroupService.Builder builder21 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService22 = builder21.build();
        org.osiam.client.OsiamGroupService osiamGroupService23 = builder21.build();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        java.lang.String str32 = osiamGroupService23.extractErrorMessageForbidden(accessToken30);
        java.util.Date date33 = accessToken30.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean36 = accessToken30.equals((java.lang.Object) scope35);
        java.lang.String str37 = authService10.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.Scope[] scopeArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI39 = authService10.getAuthorizationUri(scopeArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService22);
        org.junit.Assert.assertNotNull(osiamGroupService23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
    }

    @Test
    public void test15089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15089");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.OsiamGroupService.Builder builder28 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.lang.String str39 = accessToken36.toString();
        java.lang.String str40 = osiamGroupService29.extractErrorMessageForbidden(accessToken36);
        java.util.Date date41 = accessToken36.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder26.setExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder42.setExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.addScope(scope54);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException58 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean59 = scope56.equals((java.lang.Object) invalidAttributeException58);
        java.lang.String str60 = scope56.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder53.addScope(scope56);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder67.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken72 = builder67.build();
        java.lang.String str73 = accessToken72.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet74 = accessToken72.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder51.addScopes(scopeSet74);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setType("");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(osiamGroupService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "GET" + "'", str60, "GET");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(accessToken72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "GET" + "'", str73, "GET");
        org.junit.Assert.assertNotNull(scopeSet74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test15090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15090");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.resources.scim.UpdateUser updateUser16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder18.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        java.util.Date date36 = accessToken35.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder26.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder24.setRefreshTokenExpiresAt(date36);
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        java.lang.String str42 = accessToken41.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user43 = osiamConnector13.updateUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]", updateUser16, accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test15091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15091");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.Query query1 = queryBuilder0.build();
        java.lang.String str2 = query1.getSortBy();
        int int3 = query1.getCount();
        java.lang.String str4 = query1.getAttributes();
        org.junit.Assert.assertNotNull(query1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test15092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15092");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.query.Query query21 = queryBuilder19.build();
        long long22 = query21.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector9.createQueryBuilder(query21);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.lang.String str32 = accessToken30.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.toString();
        boolean boolean48 = accessToken30.equals((java.lang.Object) query42);
        org.osiam.client.query.QueryBuilder queryBuilder49 = osiamConnector9.createQueryBuilder(query42);
        org.osiam.client.OsiamConnector.Builder builder50 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder52 = builder50.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder54 = builder52.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder56 = builder54.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector57 = builder56.build();
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector57.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector57.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector57.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder61 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder63.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder63.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder69 = queryBuilder67.descending("hi!");
        org.osiam.client.query.Query query70 = queryBuilder69.build();
        java.lang.String str71 = query70.toString();
        java.lang.String str72 = query70.getSortOrder();
        java.lang.String str73 = query70.getSortBy();
        java.lang.String str74 = query70.getFilter();
        java.lang.String str75 = query70.getSortOrder();
        java.lang.String str76 = query70.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder77 = new org.osiam.client.query.QueryBuilder(query70);
        long long78 = query70.getStartIndex();
        org.osiam.client.query.Query query79 = query70.nextPage();
        java.lang.String str80 = query70.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder81 = new org.osiam.client.query.QueryBuilder(query70);
        java.lang.String str82 = query70.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder83 = osiamConnector57.createQueryBuilder(query70);
        org.osiam.client.query.Query query84 = query70.nextPage();
        org.osiam.client.query.Query query85 = query84.nextPage();
        int int86 = query84.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder87 = osiamConnector9.createQueryBuilder(query84);
        org.osiam.client.oauth.Scope scope91 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.NoResultException: refresh_token");
        org.osiam.client.oauth.Scope[] scopeArray92 = new org.osiam.client.oauth.Scope[] { scope91 };
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken93 = osiamConnector9.retrieveAccessToken("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: client_credentials", "Query [attributes=Authorization, filter=org.osiam.client.exception.ForbiddenException: hi!, sortBy=ME, sortOrder=descending, startIndex=100, count=10]", scopeArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str47, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(osiamConnector57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(queryBuilder69);
        org.junit.Assert.assertNotNull(query70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str71, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "descending" + "'", str72, "descending");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "descending" + "'", str75, "descending");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Authorization" + "'", str76, "Authorization");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(query79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Authorization" + "'", str82, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder83);
        org.junit.Assert.assertNotNull(query84);
        org.junit.Assert.assertNotNull(query85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(queryBuilder87);
        org.junit.Assert.assertNotNull(scopeArray92);
    }

    @Test
    public void test15093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15093");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.Query query18 = query9.nextPage();
        long long19 = query18.getStartIndex();
        org.osiam.client.query.Query query20 = query18.nextPage();
        org.osiam.client.query.Query query21 = query18.previousPage();
        long long22 = query18.getStartIndex();
        org.osiam.client.query.Query query23 = query18.nextPage();
        int int24 = query18.getCount();
        org.osiam.client.query.Query query25 = query18.previousPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 11L + "'", long19 == 11L);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 11L + "'", long22 == 11L);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(query25);
    }

    @Test
    public void test15094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15094");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        java.lang.String str2 = scope1.getValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]" + "'", str2, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
    }

    @Test
    public void test15095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15095");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        boolean boolean9 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getEmptyValue();
        java.lang.Class<?> wildcardClass11 = scopeSetJsonDeserializer5.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser12 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext13 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = scopeSetJsonDeserializer5.deserializeWithType(jsonParser12, deserializationContext13, typeDeserializer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test15096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15096");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getType();
        boolean boolean9 = accessToken6.isRefreshTokenExpired();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getSortBy();
        java.lang.String str31 = query27.getFilter();
        java.lang.String str32 = query27.getSortOrder();
        java.lang.String str33 = query27.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder34 = new org.osiam.client.query.QueryBuilder(query27);
        long long35 = query27.getStartIndex();
        org.osiam.client.query.Query query36 = query27.nextPage();
        long long37 = query36.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder38 = osiamConnector17.createQueryBuilder(query36);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.ascending("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.ascending("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.startIndex(101L);
        boolean boolean45 = accessToken6.equals((java.lang.Object) queryBuilder42);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.addScope(scope48);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder47.addScope(scope50);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken66);
        boolean boolean68 = accessToken6.equals((java.lang.Object) accessToken66);
        java.util.Date date69 = accessToken66.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken72 = builder71.build();
        java.lang.String str73 = accessToken72.toString();
        java.util.Date date74 = accessToken72.getExpiresAt();
        java.util.Date date75 = accessToken72.getExpiresAt();
        boolean boolean76 = accessToken66.equals((java.lang.Object) accessToken72);
        java.lang.String str77 = accessToken66.getRefreshToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "descending" + "'", str32, "descending");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Authorization" + "'", str33, "Authorization");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 11L + "'", long37 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(accessToken72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str73, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "GET" + "'", str77, "GET");
    }

    @Test
    public void test15097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15097");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector23.createQueryBuilder(query25);
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = osiamConnector23.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder32 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientId("ME");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService37 = builder36.build();
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        boolean boolean45 = accessToken44.isRefreshTokenExpired();
        boolean boolean46 = accessToken44.isClientOnly();
        java.lang.String str47 = accessToken44.getClientId();
        java.lang.String str48 = authService37.extractErrorMessageForbidden(accessToken44);
        java.util.Date date49 = accessToken44.getExpiresAt();
        java.lang.String str50 = accessToken44.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector23.deleteUser("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", accessToken44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(authService37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str50, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15098");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator8 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider9 = null;
        scopeSerializer0.serialize(scopeSet7, jsonGenerator8, serializerProvider9);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass11 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer0.unwrappingSerializer(nameTransformer12);
        boolean boolean14 = scopeSerializer0.usesObjectId();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertNull(scopeSetClass11);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15099");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder8.build();
        javax.ws.rs.client.WebTarget webTarget11 = osiamGroupService10.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget12 = osiamGroupService10.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.lang.String str21 = accessToken19.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken19.getScopes();
        java.lang.String str23 = osiamGroupService10.extractErrorMessageForbidden(accessToken19);
        java.util.Date date24 = accessToken19.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.checkAndHandleResponse("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: PATCH", statusType6, accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(webTarget11);
        org.junit.Assert.assertNotNull(webTarget12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15100");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group8 = osiamGroupService4.mapToResource("hi!");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: hi!");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
    }

    @Test
    public void test15101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15101");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector17 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        java.lang.String str26 = accessToken24.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        boolean boolean36 = accessToken34.isClientOnly();
        java.lang.String str37 = accessToken34.getClientId();
        boolean boolean38 = accessToken34.isClientOnly();
        boolean boolean39 = accessToken24.equals((java.lang.Object) accessToken34);
        java.lang.String str40 = accessToken34.getUserId();
        boolean boolean41 = accessToken34.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList42 = osiamConnector17.getAllGroups(accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test15102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15102");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("ME");
        org.osiam.client.AuthService authService4 = builder1.build();
        org.osiam.client.OsiamConnector.Builder builder5 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector14 = builder11.build();
        org.osiam.client.OsiamConnector.Builder builder16 = builder11.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector19 = builder16.build();
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService30 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.lang.String str39 = accessToken37.getUserId();
        java.lang.String str40 = accessToken37.getToken();
        java.lang.String str41 = authService30.extractErrorMessageForbidden(accessToken37);
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str43 = scope42.getValue();
        java.lang.String str44 = scope42.toString();
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray46 = new org.osiam.client.oauth.Scope[] { scope42, scope45 };
        java.net.URI uRI47 = authService30.getAuthorizationUri(scopeArray46);
        java.net.URI uRI48 = osiamConnector19.getAuthorizationUri(scopeArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI49 = authService4.getAuthorizationUri(scopeArray46);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to create redirect URI");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Bearer " + "'", str40, "Bearer ");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PATCH" + "'", str43, "PATCH");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PATCH" + "'", str44, "PATCH");
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scopeArray46);
        org.junit.Assert.assertNotNull(uRI47);
        org.junit.Assert.assertNotNull(uRI48);
    }

    @Test
    public void test15103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15103");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query53 = queryBuilder50.build();
        org.osiam.client.query.QueryBuilder queryBuilder54 = osiamConnector5.createQueryBuilder(query53);
        java.lang.String str55 = query53.getFilter();
        java.lang.String str56 = query53.getFilter();
        java.lang.String str57 = query53.getSortOrder();
        java.lang.String str58 = query53.getAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Authorization" + "'", str58, "Authorization");
    }

    @Test
    public void test15104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15104");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder5.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshToken("DELETE");
        org.osiam.client.oauth.Scope scope15 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.ForbiddenException: hi!");
        java.lang.String str16 = scope15.toString();
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder11.addScope(scope15);
        java.lang.String str18 = scope15.getValue();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str16, "org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str18, "org.osiam.client.exception.ForbiddenException: hi!");
    }

    @Test
    public void test15105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15105");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.descending("PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.filter("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.ascending("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.startIndex((long) (byte) 100);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
    }

    @Test
    public void test15106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15106");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test15107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15107");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count((int) (short) -1);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Insufficient scopes: []");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.filter("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=101, count=100]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
    }

    @Test
    public void test15108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15108");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.lang.String str13 = accessToken12.toString();
        java.lang.String str14 = accessToken12.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str16 = accessToken12.getClientId();
        java.lang.String str17 = accessToken12.getUserName();
        boolean boolean18 = accessToken12.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group20 = osiamGroupService3.replaceGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConnectionInitializationException: Bearer , userId=, userName=org.osiam.client.exception.NoResultException: refresh_token]", group5, accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test15109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15109");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserName();
        org.osiam.client.helper.ScopeSerializer scopeSerializer9 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str22 = scope21.toString();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str25 = scope24.getValue();
        java.lang.String str26 = scope24.getValue();
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        boolean boolean43 = scope41.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray45 = new org.osiam.client.oauth.Scope[] { scope14, scope15, scope20, scope21, scope23, scope24, scope27, scope32, scope33, scope34, scope35, scope39, scope40, scope41, scope44 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet46 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet46, scopeArray45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder11.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        boolean boolean49 = scopeSerializer9.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet58 = accessToken56.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator59 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider60 = null;
        scopeSerializer9.serialize(scopeSet58, jsonGenerator59, serializerProvider60);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet71 = accessToken69.getScopes();
        boolean boolean72 = scopeSerializer9.isEmpty(serializerProvider62, scopeSet71);
        boolean boolean73 = accessToken6.equals((java.lang.Object) scopeSerializer9);
        org.osiam.client.AuthService.Builder builder75 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder77 = builder75.setClientId("ME");
        org.osiam.client.AuthService.Builder builder79 = builder77.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder81 = builder77.setClientId("password");
        org.osiam.client.AuthService.Builder builder83 = builder81.setClientRedirectUri("password");
        org.osiam.client.AuthService.Builder builder85 = builder81.setClientSecret("");
        boolean boolean86 = accessToken6.equals((java.lang.Object) "");
        java.lang.String str87 = accessToken6.getType();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ME" + "'", str22, "ME");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PATCH" + "'", str26, "PATCH");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scopeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(scopeSet58);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(scopeSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test15110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15110");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Bearer ");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.descending("");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.descending("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.ascending("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder21.startIndex((long) (short) 10);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
    }

    @Test
    public void test15111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15111");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        java.lang.String str8 = accessToken6.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = accessToken6.getScopes();
        java.util.Date date10 = accessToken6.getRefreshTokenExpiresAt();
        java.util.Date date11 = accessToken6.getExpiresAt();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(scopeSet9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15112");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getAttributes();
        int int13 = query9.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query9);
        long long15 = query9.getStartIndex();
        java.lang.String str16 = query9.getSortBy();
        org.osiam.client.query.Query query17 = query9.nextPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Authorization" + "'", str12, "Authorization");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(query17);
    }

    @Test
    public void test15113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15113");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        java.lang.String str12 = accessToken10.getType();
        boolean boolean13 = accessToken10.isRefreshTokenExpired();
        boolean boolean14 = accessToken10.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test15114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15114");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector9.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector9.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        java.util.Date date39 = accessToken38.getExpiresAt();
        java.lang.String str40 = accessToken38.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        boolean boolean50 = accessToken48.isClientOnly();
        java.lang.String str51 = accessToken48.getClientId();
        boolean boolean52 = accessToken48.isClientOnly();
        boolean boolean53 = accessToken38.equals((java.lang.Object) accessToken48);
        org.osiam.client.query.QueryBuilder queryBuilder54 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder56.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder56.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.descending("hi!");
        org.osiam.client.query.Query query63 = queryBuilder62.build();
        org.osiam.client.query.Query query64 = queryBuilder62.build();
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder62.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean67 = accessToken38.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList68 = osiamConnector9.getAllUsers(accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(query63);
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test15115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15115");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.getSortOrder();
        java.lang.String str48 = query42.getAttributes();
        java.lang.String str49 = query42.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder51 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        boolean boolean60 = accessToken58.isClientOnly();
        java.lang.String str61 = accessToken58.getClientId();
        java.lang.String str62 = accessToken58.getClientId();
        java.util.Date date63 = accessToken58.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.Scope[] scopeArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken65 = osiamConnector5.refreshAccessToken(accessToken58, scopeArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Authorization" + "'", str49, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15116");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        boolean boolean5 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer8 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection9 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeDeserializer0.unwrappingDeserializer(nameTransformer11);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = scopeDeserializer0.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(wildcardJsonDeserializer8);
        org.junit.Assert.assertNull(objCollection9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(scopeSet13);
    }

    @Test
    public void test15117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15117");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getDescription();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str4 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str5 = oAuthErrorMessage0.getDescription();
        java.lang.String str6 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str7 = oAuthErrorMessage0.getDescription();
        java.lang.String str8 = oAuthErrorMessage0.getDescription();
        java.lang.String str9 = oAuthErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test15118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15118");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        boolean boolean7 = scopeSetJsonDeserializer6.isCachable();
        boolean boolean8 = scopeSetJsonDeserializer6.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer6.getEmptyValue();
        java.lang.Class<?> wildcardClass10 = scopeSetJsonDeserializer6.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeSetJsonDeserializer6.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeSetJsonDeserializer6.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
        org.junit.Assert.assertNull(scopeSet12);
    }

    @Test
    public void test15119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15119");
        org.osiam.client.exception.OsiamRequestException osiamRequestException4 = new org.osiam.client.exception.OsiamRequestException((int) ' ', "POST");
        org.osiam.client.exception.OsiamClientException osiamClientException5 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConnectionInitializationException: ", (java.lang.Throwable) osiamRequestException4);
        org.osiam.client.exception.ConflictException conflictException7 = new org.osiam.client.exception.ConflictException("");
        int int8 = conflictException7.getHttpStatusCode();
        java.lang.Throwable[] throwableArray9 = conflictException7.getSuppressed();
        osiamClientException5.addSuppressed((java.lang.Throwable) conflictException7);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException11 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.NoResultException: Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]", (java.lang.Throwable) conflictException7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 409 + "'", int8 == 409);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test15120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15120");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientSecret("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.AuthService.Builder builder15 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientId("ME");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder25 = builder21.setClientId("");
        org.osiam.client.AuthService.Builder builder27 = builder21.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService28 = builder27.build();
        org.osiam.client.oauth.Scope scope30 = new org.osiam.client.oauth.Scope("");
        java.lang.String str31 = scope30.getValue();
        org.osiam.client.oauth.Scope scope33 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray34 = new org.osiam.client.oauth.Scope[] { scope30, scope33 };
        java.net.URI uRI35 = authService28.getAuthorizationUri(scopeArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken36 = osiamConnector13.retrieveAccessToken(scopeArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(scopeArray34);
        org.junit.Assert.assertNotNull(uRI35);
    }

    @Test
    public void test15121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15121");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.client.oauth.Scope scope23 = new org.osiam.client.oauth.Scope("POST");
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder32 = builder28.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector33 = builder32.build();
        org.osiam.client.query.QueryBuilder queryBuilder34 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.descending("hi!");
        org.osiam.client.query.Query query43 = queryBuilder42.build();
        java.lang.String str44 = query43.toString();
        java.lang.String str45 = query43.getSortOrder();
        java.lang.String str46 = query43.getSortBy();
        org.osiam.client.query.Query query47 = query43.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder48 = osiamConnector33.createQueryBuilder(query47);
        org.osiam.client.query.QueryBuilder queryBuilder49 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder51.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.descending("hi!");
        org.osiam.client.query.Query query58 = queryBuilder57.build();
        java.lang.String str59 = query58.toString();
        java.lang.String str60 = query58.getSortOrder();
        java.lang.String str61 = query58.getSortBy();
        java.lang.String str62 = query58.getFilter();
        java.lang.String str63 = query58.getSortOrder();
        java.lang.String str64 = query58.getAttributes();
        long long65 = query58.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder66 = osiamConnector33.createQueryBuilder(query58);
        boolean boolean67 = scope23.equals((java.lang.Object) query58);
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector21.createQueryBuilder(query58);
        org.osiam.client.OsiamGroupService.Builder builder70 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService71 = builder70.build();
        org.osiam.client.OsiamGroupService osiamGroupService72 = builder70.build();
        org.osiam.client.OsiamGroupService osiamGroupService73 = builder70.build();
        org.osiam.client.OsiamGroupService osiamGroupService74 = builder70.build();
        org.osiam.client.OsiamGroupService osiamGroupService75 = builder70.build();
        org.osiam.client.OsiamGroupService osiamGroupService76 = builder70.build();
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setRefreshTokenExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder78.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken85 = builder82.build();
        org.osiam.client.oauth.AccessToken accessToken86 = builder82.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken86);
        java.lang.String str88 = accessToken86.getUserName();
        org.osiam.client.exception.ForbiddenException forbiddenException90 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray91 = forbiddenException90.getSuppressed();
        boolean boolean92 = accessToken86.equals((java.lang.Object) forbiddenException90);
        java.lang.String str93 = accessToken86.getType();
        java.lang.String str94 = osiamGroupService76.extractErrorMessageForbidden(accessToken86);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken95 = osiamConnector21.validateAccessToken(accessToken86);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(osiamConnector33);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(query43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "descending" + "'", str45, "descending");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(query47);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "descending" + "'", str60, "descending");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "descending" + "'", str63, "descending");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Authorization" + "'", str64, "Authorization");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(osiamGroupService71);
        org.junit.Assert.assertNotNull(osiamGroupService72);
        org.junit.Assert.assertNotNull(osiamGroupService73);
        org.junit.Assert.assertNotNull(osiamGroupService74);
        org.junit.Assert.assertNotNull(osiamGroupService75);
        org.junit.Assert.assertNotNull(osiamGroupService76);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(accessToken85);
        org.junit.Assert.assertNotNull(accessToken86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Insufficient scopes: []" + "'", str94, "Insufficient scopes: []");
    }

    @Test
    public void test15122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15122");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken6 = authService4.retrieveAccessToken("org.osiam.client.exception.OsiamRequestException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
    }

    @Test
    public void test15123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15123");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.addScope(scope19);
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder18.addScope(scope21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.addScope(scope33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder30.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        org.osiam.client.oauth.AccessToken accessToken38 = builder36.build();
        java.lang.String str39 = osiamGroupService4.extractErrorMessageForbidden(accessToken38);
        javax.ws.rs.client.WebTarget webTarget40 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.UpdateGroup updateGroup42 = null;
        org.osiam.client.AuthService.Builder builder44 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder46 = builder44.setClientId("ME");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService49 = builder48.build();
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        boolean boolean58 = accessToken56.isClientOnly();
        java.lang.String str59 = accessToken56.getClientId();
        java.lang.String str60 = authService49.extractErrorMessageForbidden(accessToken56);
        java.lang.String str61 = accessToken56.getUserId();
        java.util.Date date62 = accessToken56.getRefreshTokenExpiresAt();
        java.lang.String str63 = accessToken56.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group64 = osiamGroupService4.updateGroup("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!", updateGroup42, accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]" + "'", str39, "Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(webTarget40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(authService49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test15124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15124");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken12 = builder9.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.toString();
        java.lang.String str15 = accessToken12.toString();
        java.util.Date date16 = accessToken12.getExpiresAt();
        java.lang.String str17 = osiamGroupService2.extractErrorMessageForbidden(accessToken12);
        java.lang.String str18 = accessToken12.getUserId();
        java.lang.String str19 = accessToken12.getType();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test15125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15125");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        long long38 = query34.getStartIndex();
        org.osiam.client.query.Query query39 = query34.nextPage();
        org.osiam.client.query.Query query40 = query39.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder41 = new org.osiam.client.query.QueryBuilder(query39);
        org.osiam.client.query.Query query42 = query39.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector23.createQueryBuilder(query42);
        org.osiam.resources.scim.User user45 = null;
        org.osiam.client.AuthService.Builder builder47 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientId("ME");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService56 = builder55.build();
        org.osiam.client.OsiamGroupService.Builder builder58 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService59 = builder58.build();
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        boolean boolean67 = accessToken66.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet68 = accessToken66.getScopes();
        java.lang.String str69 = osiamGroupService59.extractErrorMessageForbidden(accessToken66);
        boolean boolean70 = accessToken66.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken66);
        java.lang.String str72 = authService56.extractErrorMessageForbidden(accessToken66);
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken79);
        java.util.Date date81 = accessToken79.getExpiresAt();
        boolean boolean82 = accessToken79.isClientOnly();
        boolean boolean83 = accessToken79.isClientOnly();
        java.lang.String str84 = authService56.extractErrorMessageForbidden(accessToken79);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user85 = osiamConnector23.replaceUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PUT], refreshTokenId=org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", user45, accessToken79);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(authService56);
        org.junit.Assert.assertNotNull(osiamGroupService59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(scopeSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Insufficient scopes: []" + "'", str69, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Insufficient scopes: []" + "'", str72, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Insufficient scopes: []" + "'", str84, "Insufficient scopes: []");
    }

    @Test
    public void test15126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15126");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("ADMIN");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("ADMIN");
        org.osiam.client.AuthService authService16 = builder15.build();
        org.osiam.client.AuthService authService17 = builder15.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(authService17);
    }

    @Test
    public void test15127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15127");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken20 = builder15.build();
        java.lang.String str21 = accessToken20.getClientId();
        org.osiam.client.OsiamConnector.Builder builder22 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector29 = builder28.build();
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.descending("hi!");
        org.osiam.client.query.Query query39 = queryBuilder38.build();
        java.lang.String str40 = query39.toString();
        java.lang.String str41 = query39.toString();
        java.lang.String str42 = query39.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector29.createQueryBuilder(query39);
        org.osiam.client.query.QueryBuilder queryBuilder44 = osiamConnector29.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder47.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.descending("hi!");
        org.osiam.client.query.Query query54 = queryBuilder53.build();
        java.lang.String str55 = query54.toString();
        java.lang.String str56 = query54.getSortOrder();
        java.lang.String str57 = query54.getSortBy();
        java.lang.String str58 = query54.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector29.createQueryBuilder(query54);
        boolean boolean60 = accessToken20.equals((java.lang.Object) osiamConnector29);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(osiamConnector29);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str41, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(query54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str55, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "descending" + "'", str56, "descending");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test15128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15128");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection8 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        java.lang.Class<?> wildcardClass9 = scopeSetJsonDeserializer6.handledType();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test15129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15129");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getClientId();
        java.lang.String str10 = accessToken6.getClientId();
        java.util.Date date11 = accessToken6.getRefreshTokenExpiresAt();
        java.lang.String str12 = accessToken6.toString();
        java.lang.String str13 = accessToken6.getUserId();
        java.lang.String str14 = accessToken6.getType();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test15130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15130");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.toString();
        org.osiam.client.query.Query query55 = query52.nextPage();
        java.lang.String str56 = query52.toString();
        org.osiam.client.query.Query query57 = query52.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector7.createQueryBuilder(query57);
        org.osiam.client.query.QueryBuilder queryBuilder59 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder63.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query66 = queryBuilder63.build();
        org.osiam.client.query.Query query67 = query66.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder68 = new org.osiam.client.query.QueryBuilder(query67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date71 = null;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setRefreshTokenExpiresAt(date71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken75 = builder74.build();
        boolean boolean76 = accessToken75.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet77 = accessToken75.getScopes();
        boolean boolean78 = accessToken75.isClientOnly();
        java.lang.Object obj79 = null;
        boolean boolean80 = accessToken75.equals(obj79);
        boolean boolean81 = accessToken75.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult82 = osiamConnector7.searchUsers(query67, accessToken75);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(query66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(scopeSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test15131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15131");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        boolean boolean5 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeSetJsonDeserializer8.getDelegatee();
        java.lang.Class<?> wildcardClass10 = scopeSetJsonDeserializer8.handledType();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test15132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15132");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken27 = builder24.build();
        boolean boolean28 = accessToken27.isClientOnly();
        java.lang.String str29 = osiamGroupService3.extractErrorMessageForbidden(accessToken27);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        boolean boolean37 = accessToken36.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet38 = accessToken36.getScopes();
        boolean boolean39 = accessToken36.isRefreshTokenExpired();
        boolean boolean40 = accessToken36.isExpired();
        java.lang.String str41 = osiamGroupService3.extractErrorMessageForbidden(accessToken36);
        org.osiam.resources.scim.UpdateGroup updateGroup43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.addScope(scope46);
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException50 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean51 = scope48.equals((java.lang.Object) invalidAttributeException50);
        java.lang.String str52 = scope48.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder45.addScope(scope48);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder45.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken accessToken56 = builder45.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group57 = osiamGroupService3.updateGroup("org.osiam.client.exception.InvalidAttributeException: Cannot connect to server", updateGroup43, accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(scopeSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GET" + "'", str52, "GET");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
    }

    @Test
    public void test15133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15133");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        long long16 = query15.getStartIndex();
        java.lang.String str17 = query15.getFilter();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test15134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15134");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.oauth.AccessToken accessToken7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group8 = osiamGroupService5.createGroup(group6, accessToken7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
    }

    @Test
    public void test15135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15135");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder1.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken accessToken12 = builder1.build();
        org.osiam.client.exception.ConflictException conflictException14 = new org.osiam.client.exception.ConflictException("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.exception.UnauthorizedException unauthorizedException16 = new org.osiam.client.exception.UnauthorizedException("DELETE");
        conflictException14.addSuppressed((java.lang.Throwable) unauthorizedException16);
        boolean boolean18 = accessToken12.equals((java.lang.Object) unauthorizedException16);
        java.lang.String str19 = accessToken12.getRefreshToken();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Bearer " + "'", str19, "Bearer ");
    }

    @Test
    public void test15136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15136");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder10.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count((int) (short) -1);
        org.osiam.client.query.Query query21 = queryBuilder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        org.osiam.client.OsiamConnector.Builder builder23 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder25 = builder23.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder27 = builder25.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder29 = builder27.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder31 = builder29.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector32 = builder29.build();
        org.osiam.client.OsiamConnector.Builder builder34 = builder29.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector37 = builder34.build();
        org.osiam.client.AuthService.Builder builder39 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientId("ME");
        org.osiam.client.AuthService.Builder builder43 = builder41.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder45 = builder43.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService48 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.lang.String str57 = accessToken55.getUserId();
        java.lang.String str58 = accessToken55.getToken();
        java.lang.String str59 = authService48.extractErrorMessageForbidden(accessToken55);
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str61 = scope60.getValue();
        java.lang.String str62 = scope60.toString();
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray64 = new org.osiam.client.oauth.Scope[] { scope60, scope63 };
        java.net.URI uRI65 = authService48.getAuthorizationUri(scopeArray64);
        java.net.URI uRI66 = osiamConnector37.getAuthorizationUri(scopeArray64);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI67 = osiamConnector5.getAuthorizationUri(scopeArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(osiamConnector32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(osiamConnector37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(authService48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Bearer " + "'", str58, "Bearer ");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PATCH" + "'", str61, "PATCH");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PATCH" + "'", str62, "PATCH");
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(scopeArray64);
        org.junit.Assert.assertNotNull(uRI65);
        org.junit.Assert.assertNotNull(uRI66);
    }

    @Test
    public void test15137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15137");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getClientId();
        boolean boolean37 = accessToken33.isClientOnly();
        boolean boolean38 = accessToken23.equals((java.lang.Object) accessToken33);
        java.lang.String str39 = accessToken33.getUserId();
        boolean boolean40 = accessToken33.isExpired();
        java.lang.String str41 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        javax.ws.rs.client.WebTarget webTarget42 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = osiamGroupService3.extractErrorMessageDefault("Insufficient scopes: [GET]", statusType44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget42);
    }

    @Test
    public void test15138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15138");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getErrorCode();
        java.lang.String str2 = scimErrorMessage0.getErrorCode();
        java.lang.String str3 = scimErrorMessage0.getErrorCode();
        java.lang.String str4 = scimErrorMessage0.getDescription();
        java.lang.String str5 = scimErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test15139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15139");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.OsiamRequestException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
    }

    @Test
    public void test15140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15140");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str2 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str3 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str4 = oAuthErrorMessage0.getDescription();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str6 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str7 = oAuthErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test15141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15141");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(403);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder36.ascending("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
    }

    @Test
    public void test15142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15142");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService2.extractErrorMessage("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: descending", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test15143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15143");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.NoResultException: refresh_token");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService5.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService5.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str20 = osiamGroupService11.extractErrorMessageForbidden(accessToken18);
        org.osiam.client.OsiamGroupService.Builder builder22 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService23 = builder22.build();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet32 = accessToken30.getScopes();
        java.lang.String str33 = osiamGroupService23.extractErrorMessageForbidden(accessToken30);
        boolean boolean34 = accessToken30.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        java.lang.String str36 = osiamGroupService11.extractErrorMessageForbidden(accessToken30);
        java.lang.String str37 = osiamGroupService5.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.AuthService.Builder builder39 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientId("ME");
        org.osiam.client.AuthService.Builder builder43 = builder41.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService44 = builder43.build();
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.lang.String str53 = accessToken51.getUserId();
        java.lang.String str54 = accessToken51.getClientId();
        boolean boolean55 = accessToken51.isClientOnly();
        java.lang.String str56 = authService44.extractErrorMessageForbidden(accessToken51);
        boolean boolean57 = accessToken51.isExpired();
        org.osiam.client.helper.ScopeSerializer scopeSerializer58 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean59 = scopeSerializer58.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer60 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer61 = scopeSerializer58.unwrappingSerializer(nameTransformer60);
        boolean boolean62 = scopeSetJsonSerializer61.isUnwrappingSerializer();
        boolean boolean63 = scopeSetJsonSerializer61.usesObjectId();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer64 = scopeSetJsonSerializer61.getDelegatee();
        boolean boolean65 = scopeSetJsonSerializer61.usesObjectId();
        boolean boolean66 = accessToken51.equals((java.lang.Object) boolean65);
        java.lang.String str67 = osiamGroupService5.extractErrorMessageForbidden(accessToken51);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user68 = osiamUserService2.getCurrentUser(accessToken51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(scopeSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(authService44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Insufficient scopes: []" + "'", str67, "Insufficient scopes: []");
    }

    @Test
    public void test15144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15144");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.UpdateGroup updateGroup16 = null;
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService27 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        java.lang.String str36 = authService27.extractErrorMessageForbidden(accessToken34);
        boolean boolean37 = accessToken34.isRefreshTokenExpired();
        java.lang.String str38 = accessToken34.getType();
        java.lang.String str39 = accessToken34.getType();
        java.lang.String str40 = accessToken34.getUserName();
        java.lang.String str41 = accessToken34.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group42 = osiamGroupService3.updateGroup("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]", updateGroup16, accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(authService27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test15145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15145");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str28 = osiamGroupService3.extractErrorMessageForbidden(accessToken22);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.util.Date date37 = accessToken35.getExpiresAt();
        boolean boolean38 = accessToken35.isRefreshTokenExpired();
        java.util.Date date39 = accessToken35.getExpiresAt();
        java.util.Date date40 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str41 = accessToken35.getUserId();
        java.util.Date date42 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str43 = osiamGroupService3.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        java.util.Date date51 = accessToken50.getExpiresAt();
        java.lang.String str52 = accessToken50.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = accessToken50.getScopes();
        java.util.Date date54 = accessToken50.getRefreshTokenExpiresAt();
        java.lang.String str55 = osiamGroupService3.extractErrorMessageForbidden(accessToken50);
        javax.ws.rs.client.WebTarget webTarget56 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken accessToken58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group59 = osiamGroupService3.getResource("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(scopeSet53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget56);
    }

    @Test
    public void test15146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15146");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("hi!");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientId("refresh_token");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientRedirectUri("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.AuthService.Builder builder11 = builder5.setClientRedirectUri("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test15147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15147");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector14 = builder11.build();
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.lang.String str34 = accessToken32.getUserId();
        java.lang.String str35 = accessToken32.getToken();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str38 = scope37.getValue();
        java.lang.String str39 = scope37.toString();
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray41 = new org.osiam.client.oauth.Scope[] { scope37, scope40 };
        java.net.URI uRI42 = authService25.getAuthorizationUri(scopeArray41);
        java.net.URI uRI43 = osiamConnector14.getAuthorizationUri(scopeArray41);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder45.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        java.util.Date date63 = accessToken62.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder53.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder51.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setClientId("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken68 = builder67.build();
        org.osiam.client.query.QueryBuilder queryBuilder69 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder71 = queryBuilder69.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder75 = queryBuilder71.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder77 = queryBuilder75.descending("hi!");
        org.osiam.client.query.Query query78 = queryBuilder77.build();
        java.lang.String str79 = query78.toString();
        java.lang.String str80 = query78.getSortOrder();
        java.lang.String str81 = query78.getSortBy();
        java.lang.String str82 = query78.getFilter();
        java.lang.String str83 = query78.getSortOrder();
        java.lang.String str84 = query78.getAttributes();
        java.lang.String str85 = query78.getSortOrder();
        java.lang.String str86 = query78.getSortOrder();
        boolean boolean87 = accessToken68.equals((java.lang.Object) query78);
        java.lang.String str88 = query78.toString();
        org.osiam.client.query.QueryBuilder queryBuilder89 = new org.osiam.client.query.QueryBuilder(query78);
        org.osiam.client.query.QueryBuilder queryBuilder90 = osiamConnector14.createQueryBuilder(query78);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Bearer " + "'", str35, "Bearer ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PATCH" + "'", str38, "PATCH");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PATCH" + "'", str39, "PATCH");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scopeArray41);
        org.junit.Assert.assertNotNull(uRI42);
        org.junit.Assert.assertNotNull(uRI43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder77);
        org.junit.Assert.assertNotNull(query78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str79, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "descending" + "'", str80, "descending");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "descending" + "'", str83, "descending");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Authorization" + "'", str84, "Authorization");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "descending" + "'", str85, "descending");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "descending" + "'", str86, "descending");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str88, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder90);
    }

    @Test
    public void test15148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15148");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.util.Date date17 = accessToken16.getExpiresAt();
        java.lang.String str18 = accessToken16.getRefreshToken();
        java.lang.String str19 = accessToken16.getType();
        java.lang.String str20 = accessToken16.getClientId();
        java.lang.String str21 = accessToken16.getUserName();
        java.lang.String str22 = accessToken16.toString();
        java.lang.String str23 = accessToken16.getUserName();
        java.lang.String str24 = authService9.extractErrorMessageForbidden(accessToken16);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user25 = osiamUserService3.getUser("Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]", accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(authService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
    }

    @Test
    public void test15149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15149");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("GET");
        java.lang.Throwable[] throwableArray2 = unauthorizedException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test15150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15150");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        boolean boolean5 = scopeSetJsonDeserializer4.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer4.unwrappingDeserializer(nameTransformer6);
        java.util.Collection<java.lang.Object> objCollection8 = scopeSetJsonDeserializer4.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(objCollection8);
    }

    @Test
    public void test15151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15151");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector23.createQueryBuilder(query25);
        java.lang.String str28 = query25.getSortOrder();
        java.lang.String str29 = query25.toString();
        java.lang.String str30 = query25.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]" + "'", str29, "Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]" + "'", str30, "Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]");
    }

    @Test
    public void test15152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15152");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str20 = query9.getSortBy();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test15153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15153");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group7 = osiamGroupService3.mapToResource("PATCH");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: PATCH");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test15154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15154");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer42 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer43 = scopeSerializer0.unwrappingSerializer(nameTransformer42);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer44 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer45 = scopeSerializer0.unwrappingSerializer(nameTransformer44);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer46 = scopeSerializer0.getDelegatee();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer43);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer45);
        org.junit.Assert.assertNull(wildcardJsonSerializer46);
    }

    @Test
    public void test15155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15155");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.lang.String str25 = accessToken24.toString();
        java.lang.String str26 = accessToken24.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.lang.String str28 = accessToken24.getClientId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.lang.String str30 = osiamGroupService4.extractErrorMessageForbidden(accessToken24);
        javax.ws.rs.client.WebTarget webTarget31 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType33 = null;
        org.osiam.client.AuthService.Builder builder35 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientId("ME");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService40 = builder39.build();
        org.osiam.client.OsiamGroupService.Builder builder42 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder42.build();
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken50.getScopes();
        java.lang.String str53 = osiamGroupService43.extractErrorMessageForbidden(accessToken50);
        boolean boolean54 = accessToken50.isClientOnly();
        java.lang.String str55 = authService40.extractErrorMessageForbidden(accessToken50);
        java.util.Date date56 = accessToken50.getRefreshTokenExpiresAt();
        boolean boolean57 = accessToken50.isClientOnly();
        java.lang.String str58 = accessToken50.getToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.checkAndHandleResponse("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: PATCH", statusType33, accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str25, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget31);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(authService40);
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Bearer " + "'", str58, "Bearer ");
    }

    @Test
    public void test15156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15156");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken8 = builder5.build();
        java.lang.String str9 = accessToken8.getClientId();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.toString();
        java.lang.String str30 = query27.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector17.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.attributes("ME");
        org.osiam.client.query.Query query45 = queryBuilder42.build();
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder42.count((-1));
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder42.startIndex((long) (short) 100);
        boolean boolean50 = accessToken8.equals((java.lang.Object) queryBuilder49);
        java.lang.String str51 = accessToken8.getToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Bearer " + "'", str51, "Bearer ");
    }

    @Test
    public void test15157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15157");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientSecret("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector15 = builder12.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
    }

    @Test
    public void test15158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15158");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        org.osiam.client.query.Query query12 = query9.nextPage();
        org.osiam.client.query.Query query13 = query9.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query9);
        long long15 = query9.getStartIndex();
        java.lang.String str16 = query9.toString();
        java.lang.String str17 = query9.toString();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test15159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15159");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder12.addScope(scope15);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder24.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder24.setRefreshToken("");
        org.osiam.client.oauth.AccessToken accessToken40 = builder39.build();
        java.lang.String str41 = accessToken40.getUserId();
        java.lang.String str42 = accessToken40.toString();
        java.lang.String str43 = accessToken40.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet44 = accessToken40.getScopes();
        java.lang.String str45 = accessToken40.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken46 = authService10.validateAccessToken(accessToken40);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]" + "'", str42, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(scopeSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test15160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15160");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("refresh_token");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        java.lang.String str12 = accessToken10.getType();
        boolean boolean13 = accessToken10.isExpired();
        java.lang.String str14 = accessToken10.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user15 = osiamUserService2.getUser("org.osiam.client.exception.NoResultException: Insufficient scopes: []", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test15161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15161");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder7 = builder4.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test15162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15162");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.addScope(scope21);
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean26 = scope23.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = scope23.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder20.addScope(scope23);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder32.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        java.lang.Object obj47 = null;
        boolean boolean48 = accessToken46.equals(obj47);
        boolean boolean49 = accessToken46.isExpired();
        java.util.Date date50 = accessToken46.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder38.setExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setUserName("POST");
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setUserName("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector17.deleteGroup("org.osiam.client.exception.NoResultException: refresh_token", accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GET" + "'", str27, "GET");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
    }

    @Test
    public void test15163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15163");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientRedirectUri("Authorization");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientId("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setClientSecret("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder17.build();
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService19.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService19.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService19.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.lang.String str30 = osiamGroupService19.extractErrorMessageForbidden(accessToken29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        java.lang.String str38 = accessToken37.toString();
        java.lang.String str39 = accessToken37.getType();
        boolean boolean40 = accessToken37.isExpired();
        java.lang.String str41 = accessToken37.getToken();
        java.lang.String str42 = osiamGroupService19.extractErrorMessageForbidden(accessToken37);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        boolean boolean50 = accessToken49.isRefreshTokenExpired();
        boolean boolean51 = accessToken49.isClientOnly();
        java.lang.String str52 = accessToken49.getUserName();
        java.lang.String str53 = osiamGroupService19.extractErrorMessageForbidden(accessToken49);
        java.util.Date date54 = accessToken49.getExpiresAt();
        java.lang.String str55 = accessToken49.getType();
        java.lang.String str56 = accessToken49.getUserName();
        boolean boolean57 = accessToken49.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.revokeAllAccessTokens("org.osiam.client.exception.ConnectionInitializationException: descending", accessToken49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(webTarget21);
        org.junit.Assert.assertNotNull(webTarget22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str38, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Bearer " + "'", str41, "Bearer ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test15164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15164");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector17 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.getAttributes();
        java.lang.String str29 = query27.toString();
        java.lang.String str30 = query27.getSortOrder();
        org.osiam.client.query.Query query31 = query27.nextPage();
        java.lang.String str32 = query27.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.query.QueryBuilder queryBuilder34 = osiamConnector17.createQueryBuilder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken36 = osiamConnector17.retrieveAccessToken("Insufficient scopes: [GET, GET POST PUT PATCH DELETE, PUT]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Authorization" + "'", str28, "Authorization");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder34);
    }

    @Test
    public void test15165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15165");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        boolean boolean8 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer5.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(scopeSet9);
    }

    @Test
    public void test15166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15166");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Authorization");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder8.setClientId("org.osiam.client.exception.ConnectionInitializationException: descending");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder8.setExpiresAt(date15);
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.getCurrentUser(accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
    }

    @Test
    public void test15167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15167");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str2 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str3 = oAuthErrorMessage0.getDescription();
        java.lang.String str4 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str5 = oAuthErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test15168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15168");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamUserService2.updateUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test15169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15169");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = osiamGroupService2.extractErrorMessageUnauthorized("", statusType7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test15170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15170");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.lang.String str21 = accessToken19.getUserId();
        java.lang.String str22 = accessToken19.getToken();
        java.lang.String str23 = accessToken19.getClientId();
        boolean boolean24 = accessToken19.isExpired();
        java.util.Date date25 = accessToken19.getExpiresAt();
        java.lang.String str26 = accessToken19.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamConnector11.getGroup("org.osiam.client.exception.OsiamClientException: Cannot connect to server", accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Bearer " + "'", str22, "Bearer ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test15171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15171");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.AuthService authService7 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        java.lang.String str19 = accessToken17.getRefreshToken();
        boolean boolean20 = accessToken17.isClientOnly();
        java.lang.String str21 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getUserName();
        java.util.Date date31 = accessToken28.getRefreshTokenExpiresAt();
        java.lang.String str32 = osiamGroupService10.extractErrorMessageForbidden(accessToken28);
        java.lang.String str33 = accessToken28.getToken();
        java.lang.String str34 = accessToken28.getClientId();
        java.lang.String str35 = authService7.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.OsiamGroupService.Builder builder37 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService38 = builder37.build();
        javax.ws.rs.client.WebTarget webTarget39 = osiamGroupService38.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder41 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService42 = builder41.build();
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken50);
        java.lang.String str52 = osiamGroupService43.extractErrorMessageForbidden(accessToken50);
        java.util.Date date53 = accessToken50.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken50);
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean56 = accessToken50.equals((java.lang.Object) scope55);
        java.lang.String str57 = accessToken50.getRefreshToken();
        java.lang.String str58 = accessToken50.getToken();
        java.lang.String str59 = accessToken50.getUserId();
        java.lang.String str60 = osiamGroupService38.extractErrorMessageForbidden(accessToken50);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken50);
        java.lang.String str62 = authService7.extractErrorMessageForbidden(accessToken50);
        org.osiam.client.AuthService.Builder builder64 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder66 = builder64.setClientId("ME");
        org.osiam.client.AuthService.Builder builder68 = builder66.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder70 = builder68.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder72 = builder70.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder74 = builder70.setClientId("");
        org.osiam.client.AuthService.Builder builder76 = builder70.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService77 = builder76.build();
        org.osiam.client.oauth.Scope scope79 = new org.osiam.client.oauth.Scope("");
        java.lang.String str80 = scope79.getValue();
        org.osiam.client.oauth.Scope scope82 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray83 = new org.osiam.client.oauth.Scope[] { scope79, scope82 };
        java.net.URI uRI84 = authService77.getAuthorizationUri(scopeArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken85 = authService7.retrieveAccessToken(scopeArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client secret can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(authService7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Bearer " + "'", str33, "Bearer ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService38);
        org.junit.Assert.assertNotNull(webTarget39);
        org.junit.Assert.assertNotNull(osiamGroupService42);
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Bearer " + "'", str58, "Bearer ");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(authService77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(scopeArray83);
        org.junit.Assert.assertNotNull(uRI84);
    }

    @Test
    public void test15172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15172");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("");
        org.osiam.client.AuthService.Builder builder13 = builder7.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder17 = builder13.setClientId("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test15173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15173");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.getSortOrder();
        java.lang.String str23 = query20.getSortBy();
        java.lang.String str24 = query20.getFilter();
        java.lang.String str25 = query20.getSortOrder();
        java.lang.String str26 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder(query20);
        long long28 = query20.getStartIndex();
        org.osiam.client.query.Query query29 = query20.nextPage();
        java.lang.String str30 = query20.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder(query20);
        java.lang.String str32 = query20.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.Query query34 = query20.nextPage();
        java.lang.String str35 = query20.getSortOrder();
        java.lang.String str36 = query20.getFilter();
        java.lang.String str37 = query20.getSortOrder();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Authorization" + "'", str26, "Authorization");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "descending" + "'", str35, "descending");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "descending" + "'", str37, "descending");
    }

    @Test
    public void test15174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15174");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken12.getScopes();
        java.lang.String str15 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        boolean boolean16 = accessToken12.isExpired();
        java.lang.String str17 = osiamGroupService2.extractErrorMessageForbidden(accessToken12);
        org.osiam.resources.scim.Group group18 = null;
        org.osiam.client.OsiamGroupService.Builder builder20 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder20.build();
        org.osiam.client.OsiamGroupService osiamGroupService22 = builder20.build();
        org.osiam.client.OsiamGroupService osiamGroupService23 = builder20.build();
        org.osiam.client.OsiamGroupService osiamGroupService24 = builder20.build();
        org.osiam.client.OsiamGroupService osiamGroupService25 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        java.util.Date date34 = accessToken32.getExpiresAt();
        java.lang.String str35 = osiamGroupService25.extractErrorMessageForbidden(accessToken32);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamGroupService2.createGroup(group18, accessToken32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(osiamGroupService22);
        org.junit.Assert.assertNotNull(osiamGroupService23);
        org.junit.Assert.assertNotNull(osiamGroupService24);
        org.junit.Assert.assertNotNull(osiamGroupService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
    }

    @Test
    public void test15175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15175");
        org.osiam.client.exception.ForbiddenException forbiddenException1 = new org.osiam.client.exception.ForbiddenException("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]");
    }

    @Test
    public void test15176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15176");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = osiamGroupService2.extractErrorMessageDefault("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
    }

    @Test
    public void test15177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15177");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageUnauthorized("org.osiam.client.exception.ForbiddenException: hi!", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test15178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15178");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str28 = osiamGroupService3.extractErrorMessageForbidden(accessToken22);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.addScope(scope32);
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        java.lang.String str38 = scope34.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder31.addScope(scope34);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.addScope(scope48);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder47.addScope(scope50);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder43.addScope(scope50);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder43.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder62.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder62.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope71 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.addScope(scope71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken79);
        java.util.Date date81 = accessToken79.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder72.setExpiresAt(date81);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder60.setExpiresAt(date81);
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        boolean boolean85 = accessToken84.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", accessToken84);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GET" + "'", str38, "GET");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(scope71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test15179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15179");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.Query query13 = query9.nextPage();
        int int14 = query9.getCount();
        java.lang.String str15 = query9.getSortBy();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test15180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15180");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        boolean boolean8 = accessToken6.isExpired();
        org.osiam.client.AuthService.Builder builder10 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientId("ME");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder20 = builder16.setClientRedirectUri("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder22 = builder16.setClientSecret("authorization_code");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        boolean boolean25 = accessToken6.equals((java.lang.Object) "Bearer ");
        java.lang.String str26 = accessToken6.getUserName();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        java.lang.String str28 = accessToken6.getToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
    }

    @Test
    public void test15181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15181");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer4 = scopeDeserializer0.getDelegatee();
        boolean boolean5 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer6 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(wildcardJsonDeserializer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(objectIdReader8);
    }

    @Test
    public void test15182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15182");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder1.build();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getSortBy();
        java.lang.String str31 = query27.getFilter();
        java.lang.String str32 = query27.toString();
        boolean boolean33 = accessToken15.equals((java.lang.Object) query27);
        java.util.Date date34 = accessToken15.getExpiresAt();
        java.lang.String str35 = accessToken15.getUserName();
        java.lang.String str36 = accessToken15.getUserId();
        java.lang.String str37 = accessToken15.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group38 = osiamGroupService7.createResource(group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test15183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15183");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder13.setType("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder13.setType("org.osiam.client.exception.OsiamRequestException: descending");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test15184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15184");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        java.lang.String str23 = query19.getFilter();
        java.lang.String str24 = query19.getSortOrder();
        java.lang.String str25 = query19.getAttributes();
        long long26 = query19.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector9.createQueryBuilder(query19);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken29 = osiamConnector9.retrieveAccessToken("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Authorization" + "'", str25, "Authorization");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder27);
    }

    @Test
    public void test15185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15185");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder19 = osiamConnector5.createQueryBuilder(query15);
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.descending("hi!");
        org.osiam.client.query.Query query29 = queryBuilder28.build();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder28.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder28.filter("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder28.descending("ME");
        org.osiam.client.query.Query query36 = queryBuilder28.build();
        java.lang.String str37 = query36.getFilter();
        org.osiam.client.query.Query query38 = query36.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder39 = osiamConnector5.createQueryBuilder(query36);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.osiam.client.exception.ForbiddenException: hi!" + "'", str37, "org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertNotNull(queryBuilder39);
    }

    @Test
    public void test15186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15186");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        boolean boolean7 = scopeSetJsonDeserializer6.isCachable();
        java.util.Collection<java.lang.Object> objCollection8 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeSetJsonDeserializer6.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeSetJsonDeserializer6.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertNull(objectIdReader10);
    }

    @Test
    public void test15187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15187");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getEmptyValue();
        boolean boolean9 = scopeDeserializer0.isCachable();
        boolean boolean10 = scopeDeserializer0.isCachable();
        boolean boolean11 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader12 = scopeDeserializer0.getObjectIdReader();
        java.lang.Class<?> wildcardClass13 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser14 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = scopeDeserializer0.deserialize(jsonParser14, deserializationContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objectIdReader12);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test15188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15188");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count((int) (byte) 1);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder10.descending("2024-03-22T13:51:20.388");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count((-1));
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.ascending("PUT");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.startIndex((long) 100);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
    }

    @Test
    public void test15189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15189");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeSetJsonDeserializer5.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader11 = scopeSetJsonDeserializer5.getObjectIdReader();
        java.lang.Class<?> wildcardClass12 = scopeSetJsonDeserializer5.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader13 = scopeSetJsonDeserializer5.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeSetJsonDeserializer5.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNull(objectIdReader11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(objectIdReader13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
    }

    @Test
    public void test15190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15190");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        java.lang.String str8 = accessToken6.getRefreshToken();
        java.lang.String str9 = accessToken6.getType();
        java.lang.String str10 = accessToken6.getClientId();
        java.lang.String str11 = accessToken6.getUserName();
        java.lang.String str12 = accessToken6.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        java.lang.String str14 = accessToken6.getClientId();
        java.lang.String str15 = accessToken6.getUserId();
        org.osiam.client.AuthService.Builder builder17 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientId("ME");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService22 = builder21.build();
        org.osiam.client.OsiamGroupService.Builder builder24 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet34 = accessToken32.getScopes();
        java.lang.String str35 = osiamGroupService25.extractErrorMessageForbidden(accessToken32);
        boolean boolean36 = accessToken32.isClientOnly();
        java.lang.String str37 = authService22.extractErrorMessageForbidden(accessToken32);
        java.util.Date date38 = accessToken32.getRefreshTokenExpiresAt();
        boolean boolean39 = accessToken6.equals((java.lang.Object) accessToken32);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(authService22);
        org.junit.Assert.assertNotNull(osiamGroupService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(scopeSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test15191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15191");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.addScope(scope10);
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException14 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean15 = scope12.equals((java.lang.Object) invalidAttributeException14);
        java.lang.String str16 = scope12.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken28 = builder23.build();
        java.lang.String str29 = accessToken28.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet30 = accessToken28.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        java.util.Date date60 = accessToken59.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder50.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder50.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder50.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.Scope scope67 = new org.osiam.client.oauth.Scope("");
        java.lang.String str68 = scope67.toString();
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.addScope(scope67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder48.addScope(scope67);
        boolean boolean71 = accessToken28.equals((java.lang.Object) scope67);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group73 = osiamGroupService4.updateGroup("org.osiam.client.exception.OsiamClientException: client_credentials", group7, accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GET" + "'", str16, "GET");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(scopeSet30);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test15192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15192");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService9 = builder8.build();
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken19.getScopes();
        java.lang.String str22 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        boolean boolean23 = accessToken19.isClientOnly();
        java.lang.String str24 = authService9.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken33 = builder30.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        java.lang.String str35 = accessToken33.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.lang.String str37 = authService9.extractErrorMessageForbidden(accessToken33);
        java.lang.String str38 = accessToken33.toString();
        java.lang.String str39 = osiamGroupService2.extractErrorMessageForbidden(accessToken33);
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(authService9);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(scopeSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str35, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str38, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
    }

    @Test
    public void test15193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15193");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Cannot connect to server");
        org.osiam.client.query.Query query14 = queryBuilder11.build();
        java.lang.String str15 = query14.getFilter();
        org.osiam.client.query.Query query16 = query14.nextPage();
        org.osiam.client.query.Query query17 = query14.previousPage();
        int int18 = query17.getCount();
        java.lang.String str19 = query17.toString();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=90, count=10]" + "'", str19, "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=90, count=10]");
    }

    @Test
    public void test15194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15194");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.startIndex((long) 100);
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        org.osiam.client.query.Query query14 = query13.previousPage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(query14);
    }

    @Test
    public void test15195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15195");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setEndpoint("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientRedirectUri("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.resources.scim.User user22 = null;
        org.osiam.client.oauth.AccessToken accessToken23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user24 = osiamConnector21.createUser(user22, accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
    }

    @Test
    public void test15196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15196");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken8 = builder5.build();
        java.lang.String str9 = accessToken8.getRefreshToken();
        java.lang.String str10 = accessToken8.getUserId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test15197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15197");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder1.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder1.setUserId("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str27 = scope26.toString();
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str30 = scope29.getValue();
        java.lang.String str31 = scope29.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean43 = scope40.equals((java.lang.Object) invalidAttributeException42);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        boolean boolean48 = scope46.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray50 = new org.osiam.client.oauth.Scope[] { scope19, scope20, scope25, scope26, scope28, scope29, scope32, scope37, scope38, scope39, scope40, scope44, scope45, scope46, scope49 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet51 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet51, scopeArray50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder16.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        java.util.Date date61 = accessToken60.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder53.setExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder14.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder14.setClientId("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setClientId("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.setType("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ME" + "'", str27, "ME");
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PATCH" + "'", str30, "PATCH");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scopeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test15198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15198");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder1.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder1.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder1.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken23.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.addScopes(scopeSet25);
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.lang.String str28 = accessToken27.getType();
        java.util.Date date29 = accessToken27.getExpiresAt();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15199");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.DELETE;
        java.lang.String str1 = scope0.toString();
        org.osiam.client.OsiamGroupService.Builder builder3 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken11);
        boolean boolean15 = accessToken11.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = accessToken11.getScopes();
        boolean boolean17 = accessToken11.isRefreshTokenExpired();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = accessToken11.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken11.getScopes();
        boolean boolean21 = scope0.equals((java.lang.Object) scopeSet20);
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DELETE" + "'", str1, "DELETE");
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(scopeSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test15200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15200");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.OsiamGroupService.Builder builder23 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService24 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet33 = accessToken31.getScopes();
        java.lang.String str34 = osiamGroupService24.extractErrorMessageForbidden(accessToken31);
        boolean boolean35 = accessToken31.isClientOnly();
        java.lang.String str36 = authService21.extractErrorMessageForbidden(accessToken31);
        java.lang.String str37 = accessToken31.getUserId();
        java.lang.String str38 = accessToken31.getToken();
        java.lang.String str39 = osiamGroupService3.extractErrorMessageForbidden(accessToken31);
        javax.ws.rs.core.Response.StatusType statusType41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = osiamGroupService3.extractErrorMessageUnauthorized("org.osiam.client.exception.OsiamClientException: client_credentials", statusType41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(osiamGroupService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(scopeSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Bearer " + "'", str38, "Bearer ");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
    }

    @Test
    public void test15201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15201");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder9.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder7.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.addScope(scope24);
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder23.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder41 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService42 = builder41.build();
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken50);
        java.lang.String str52 = osiamGroupService43.extractErrorMessageForbidden(accessToken50);
        java.util.Date date53 = accessToken50.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder37.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder7.setExpiresAt(date53);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str57 = scope56.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder7.addScope(scope56);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setType("org.osiam.client.exception.OsiamRequestException: PUT");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(osiamGroupService42);
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PATCH" + "'", str57, "PATCH");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test15202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15202");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        java.lang.String str10 = accessToken6.getClientId();
        java.lang.String str11 = accessToken6.toString();
        java.lang.String str12 = accessToken6.getUserName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test15203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15203");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder26.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder14.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder14.setUserId("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setType("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService.Builder builder42 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder42.build();
        org.osiam.client.OsiamGroupService osiamGroupService44 = builder42.build();
        javax.ws.rs.client.WebTarget webTarget45 = osiamGroupService44.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget46 = osiamGroupService44.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.lang.String str55 = accessToken53.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet56 = accessToken53.getScopes();
        java.lang.String str57 = osiamGroupService44.extractErrorMessageForbidden(accessToken53);
        java.lang.String str58 = accessToken53.getUserId();
        java.util.Date date59 = accessToken53.getRefreshTokenExpiresAt();
        java.util.Date date60 = accessToken53.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder40.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder40.setType("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.addScope(scope66);
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException70 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean71 = scope68.equals((java.lang.Object) invalidAttributeException70);
        java.lang.String str72 = scope68.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder65.addScope(scope68);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope80 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.addScope(scope80);
        org.osiam.client.oauth.GrantType grantType82 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str83 = grantType82.getUrlParam();
        boolean boolean84 = scope80.equals((java.lang.Object) grantType82);
        java.lang.String str85 = scope80.getValue();
        java.lang.String str86 = scope80.getValue();
        java.lang.String str87 = scope80.toString();
        java.lang.String str88 = scope80.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder40.addScope(scope80);
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder89.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE, PUT], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(osiamGroupService44);
        org.junit.Assert.assertNotNull(webTarget45);
        org.junit.Assert.assertNotNull(webTarget46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(scopeSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GET" + "'", str72, "GET");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(scope80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + grantType82 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType82.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "client_credentials" + "'", str83, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "PATCH" + "'", str85, "PATCH");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PATCH" + "'", str86, "PATCH");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PATCH" + "'", str87, "PATCH");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PATCH" + "'", str88, "PATCH");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test15204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15204");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        java.lang.String str50 = accessToken48.getUserId();
        java.lang.String str51 = accessToken48.getClientId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken48.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider54 = null;
        scopeSerializer0.serialize(scopeSet52, jsonGenerator53, serializerProvider54);
        boolean boolean56 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper57 = null;
        com.fasterxml.jackson.databind.JavaType javaType58 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper57, javaType58);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test15205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15205");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test15206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15206");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService2.extractErrorMessage("PUT", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test15207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15207");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider2 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer3 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken10.getScopes();
        boolean boolean14 = scopeSerializer3.isEmpty(scopeSet13);
        boolean boolean15 = scopeSerializer0.isEmpty(serializerProvider2, scopeSet13);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider16 = null;
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = null;
        boolean boolean18 = scopeSerializer0.isEmpty(serializerProvider16, scopeSet17);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test15208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15208");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientRedirectUri("Authorization");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientId("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setClientSecret("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder15 = builder2.setClientRedirectUri("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=101, count=100]");
        org.osiam.client.OsiamConnector.Builder builder17 = builder15.setResourceServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=ascending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test15209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15209");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getRefreshToken();
        boolean boolean10 = accessToken6.isExpired();
        boolean boolean11 = accessToken6.isExpired();
        java.lang.String str12 = accessToken6.toString();
        java.lang.String str13 = accessToken6.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        boolean boolean15 = accessToken6.isExpired();
        java.lang.String str16 = accessToken6.getType();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test15210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15210");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getClientId();
        java.lang.String str10 = accessToken6.getClientId();
        java.util.Date date11 = accessToken6.getRefreshTokenExpiresAt();
        java.lang.String str12 = accessToken6.toString();
        java.util.Date date13 = accessToken6.getRefreshTokenExpiresAt();
        java.lang.String str14 = accessToken6.getRefreshToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test15211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15211");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder26.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder14.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder14.setUserId("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setType("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService.Builder builder42 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder42.build();
        org.osiam.client.OsiamGroupService osiamGroupService44 = builder42.build();
        javax.ws.rs.client.WebTarget webTarget45 = osiamGroupService44.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget46 = osiamGroupService44.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.lang.String str55 = accessToken53.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet56 = accessToken53.getScopes();
        java.lang.String str57 = osiamGroupService44.extractErrorMessageForbidden(accessToken53);
        java.lang.String str58 = accessToken53.getUserId();
        java.util.Date date59 = accessToken53.getRefreshTokenExpiresAt();
        java.util.Date date60 = accessToken53.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder40.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder40.setClientId("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder40.setRefreshToken("org.osiam.client.exception.UnauthorizedException: GET POST PUT PATCH DELETE");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(osiamGroupService44);
        org.junit.Assert.assertNotNull(webTarget45);
        org.junit.Assert.assertNotNull(webTarget46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(scopeSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test15212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15212");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
    }

    @Test
    public void test15213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15213");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser5 = null;
        org.osiam.client.oauth.AccessToken accessToken6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user7 = osiamUserService3.updateUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ", updateUser5, accessToken6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
    }

    @Test
    public void test15214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15214");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getClientId();
        boolean boolean37 = accessToken33.isClientOnly();
        boolean boolean38 = accessToken23.equals((java.lang.Object) accessToken33);
        java.lang.String str39 = accessToken33.getUserId();
        boolean boolean40 = accessToken33.isExpired();
        java.lang.String str41 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        javax.ws.rs.client.WebTarget webTarget42 = osiamGroupService3.targetEndpoint;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group44 = osiamGroupService3.mapToResource("org.osiam.client.exception.OsiamClientException: descending");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.OsiamClientException: descending");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget42);
    }

    @Test
    public void test15215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15215");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientId("authorization_code");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test15216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15216");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientSecret("");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test15217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15217");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.GET;
        boolean boolean2 = scope0.equals((java.lang.Object) '#');
        java.lang.String str3 = scope0.toString();
        java.lang.String str4 = scope0.toString();
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GET" + "'", str3, "GET");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
    }

    @Test
    public void test15218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15218");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("Bearer ");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.OsiamConnector.Builder builder5 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder7 = builder5.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder9 = builder7.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector14 = builder11.build();
        org.osiam.client.OsiamConnector.Builder builder16 = builder11.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector19 = builder16.build();
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService30 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.lang.String str39 = accessToken37.getUserId();
        java.lang.String str40 = accessToken37.getToken();
        java.lang.String str41 = authService30.extractErrorMessageForbidden(accessToken37);
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str43 = scope42.getValue();
        java.lang.String str44 = scope42.toString();
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray46 = new org.osiam.client.oauth.Scope[] { scope42, scope45 };
        java.net.URI uRI47 = authService30.getAuthorizationUri(scopeArray46);
        java.net.URI uRI48 = osiamConnector19.getAuthorizationUri(scopeArray46);
        org.osiam.client.AuthService.Builder builder50 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder52 = builder50.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder54 = builder52.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder56 = builder54.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder58 = builder56.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder60 = builder58.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder62 = builder58.setClientSecret("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.AuthService authService65 = builder64.build();
        org.osiam.client.oauth.AccessToken.Builder builder67 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.addScope(scope68);
        org.osiam.client.oauth.Scope scope70 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException72 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean73 = scope70.equals((java.lang.Object) invalidAttributeException72);
        java.lang.String str74 = scope70.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder67.addScope(scope70);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.Scope scope82 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str83 = scope82.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder81.addScope(scope82);
        java.lang.String str85 = scope82.toString();
        org.osiam.client.oauth.Scope[] scopeArray86 = new org.osiam.client.oauth.Scope[] { scope82 };
        java.net.URI uRI87 = authService65.getAuthorizationUri(scopeArray86);
        java.net.URI uRI88 = osiamConnector19.getAuthorizationUri(scopeArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI89 = authService4.getAuthorizationUri(scopeArray86);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to create redirect URI");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Bearer " + "'", str40, "Bearer ");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PATCH" + "'", str43, "PATCH");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PATCH" + "'", str44, "PATCH");
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scopeArray46);
        org.junit.Assert.assertNotNull(uRI47);
        org.junit.Assert.assertNotNull(uRI48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(authService65);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "GET" + "'", str74, "GET");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(scope82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "PUT" + "'", str83, "PUT");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "PUT" + "'", str85, "PUT");
        org.junit.Assert.assertNotNull(scopeArray86);
        org.junit.Assert.assertNotNull(uRI87);
        org.junit.Assert.assertNotNull(uRI88);
    }

    @Test
    public void test15219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15219");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.AuthService authService3 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken5 = authService3.retrieveAccessToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PUT], refreshTokenId=org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(authService3);
    }

    @Test
    public void test15220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15220");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test15221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15221");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(403, "org.osiam.client.exception.ConnectionInitializationException: Bearer ");
    }

    @Test
    public void test15222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15222");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Bearer ");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.descending("");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("GET");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
    }

    @Test
    public void test15223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15223");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = accessToken6.getScopes();
        boolean boolean9 = accessToken6.isRefreshTokenExpired();
        boolean boolean10 = accessToken6.isExpired();
        org.osiam.client.AuthService.Builder builder12 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("ME");
        org.osiam.client.AuthService.Builder builder16 = builder12.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService17 = builder12.build();
        boolean boolean18 = accessToken6.equals((java.lang.Object) builder12);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken6.getScopes();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(authService17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scopeSet19);
    }

    @Test
    public void test15224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15224");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        java.util.Date date13 = accessToken10.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean16 = accessToken10.equals((java.lang.Object) scope15);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.util.Date date18 = accessToken10.getExpiresAt();
        java.lang.String str19 = accessToken10.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        boolean boolean21 = accessToken10.isExpired();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test15225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15225");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.lang.String str14 = osiamGroupService3.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.lang.String str22 = accessToken21.toString();
        java.lang.String str23 = accessToken21.getType();
        boolean boolean24 = accessToken21.isExpired();
        java.lang.String str25 = accessToken21.getToken();
        java.lang.String str26 = osiamGroupService3.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.lang.String str34 = accessToken33.toString();
        java.lang.String str35 = accessToken33.getType();
        boolean boolean36 = accessToken33.isExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet37 = accessToken33.getScopes();
        boolean boolean38 = accessToken33.isExpired();
        java.lang.String str39 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        javax.ws.rs.core.Response.StatusType statusType41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = osiamGroupService3.extractErrorMessageUnauthorized("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]", statusType41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str34, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(scopeSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
    }

    @Test
    public void test15226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15226");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.addScope(scope45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder40.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder13.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserName("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder54.setUserId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder54.setClientId("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test15227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15227");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer67 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer68 = scopeSerializer0.unwrappingSerializer(nameTransformer67);
        boolean boolean69 = scopeSetJsonSerializer68.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper70 = null;
        com.fasterxml.jackson.databind.JavaType javaType71 = null;
        scopeSetJsonSerializer68.acceptJsonFormatVisitor(jsonFormatVisitorWrapper70, javaType71);
        boolean boolean73 = scopeSetJsonSerializer68.usesObjectId();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test15228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15228");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.descending("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(403);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
    }

    @Test
    public void test15229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15229");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        java.lang.String str8 = accessToken6.getRefreshToken();
        java.lang.String str9 = accessToken6.getType();
        java.lang.String str10 = accessToken6.toString();
        java.lang.String str11 = accessToken6.getUserId();
        java.lang.String str12 = accessToken6.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15230");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.AuthService.Builder builder15 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientId("ME");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.lang.String str29 = accessToken27.getUserId();
        java.lang.String str30 = accessToken27.getClientId();
        boolean boolean31 = accessToken27.isClientOnly();
        java.lang.String str32 = authService20.extractErrorMessageForbidden(accessToken27);
        org.osiam.client.OsiamGroupService.Builder builder34 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService35 = builder34.build();
        org.osiam.client.OsiamGroupService osiamGroupService36 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken43);
        java.lang.String str45 = osiamGroupService36.extractErrorMessageForbidden(accessToken43);
        java.util.Date date46 = accessToken43.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken43);
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean49 = accessToken43.equals((java.lang.Object) scope48);
        java.lang.String str50 = accessToken43.getRefreshToken();
        boolean boolean51 = accessToken43.isRefreshTokenExpired();
        java.lang.String str52 = authService20.extractErrorMessageForbidden(accessToken43);
        java.lang.String str53 = osiamGroupService2.extractErrorMessageForbidden(accessToken43);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group55 = osiamGroupService2.mapToResource("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: descending");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: descending");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(authService20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService35);
        org.junit.Assert.assertNotNull(osiamGroupService36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
    }

    @Test
    public void test15231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15231");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("authorization_code");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder7 = builder3.setClientSecret("refresh_token");
        org.osiam.client.AuthService authService8 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserId();
        java.lang.String str18 = accessToken15.getToken();
        java.lang.String str19 = accessToken15.getClientId();
        boolean boolean20 = accessToken15.isExpired();
        java.util.Date date21 = accessToken15.getExpiresAt();
        java.lang.String str22 = accessToken15.getClientId();
        java.lang.String str23 = accessToken15.getToken();
        java.lang.String str24 = accessToken15.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken15.getScopes();
        java.lang.String str26 = authService8.extractErrorMessageForbidden(accessToken15);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(authService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Bearer " + "'", str18, "Bearer ");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
    }

    @Test
    public void test15232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15232");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test15233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15233");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass2 = scopeSerializer0.handledType();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str15 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        java.util.Date date16 = accessToken13.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str18 = accessToken13.getRefreshToken();
        org.osiam.client.exception.NoResultException noResultException20 = new org.osiam.client.exception.NoResultException("Insufficient scopes: []");
        boolean boolean21 = accessToken13.equals((java.lang.Object) "Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder22 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector29 = builder28.build();
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector29.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.attributes("org.osiam.client.exception.UnauthorizedException: PATCH");
        boolean boolean33 = accessToken13.equals((java.lang.Object) queryBuilder32);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet34 = accessToken13.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider36 = null;
        scopeSerializer0.serialize(scopeSet34, jsonGenerator35, serializerProvider36);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(scopeSetClass2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(osiamConnector29);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(scopeSet34);
    }

    @Test
    public void test15234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15234");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientId("");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.toString();
        java.lang.String str30 = query27.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector17.createQueryBuilder(query27);
        java.lang.String str32 = query27.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector9.createQueryBuilder(query27);
        org.osiam.resources.scim.User user35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user44 = osiamConnector9.replaceUser("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ", user35, accessToken42);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Authorization" + "'", str32, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test15235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15235");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.NoResultException: refresh_token");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        java.lang.String str12 = accessToken10.getType();
        boolean boolean13 = accessToken10.isExpired();
        java.lang.String str14 = accessToken10.getToken();
        java.lang.String str15 = accessToken10.getUserName();
        boolean boolean16 = accessToken10.isClientOnly();
        java.lang.String str17 = accessToken10.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Bearer " + "'", str14, "Bearer ");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test15236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15236");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        boolean boolean2 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer4 = scopeSerializer0.unwrappingSerializer(nameTransformer3);
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.OsiamGroupService.Builder builder13 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = accessToken21.getScopes();
        java.lang.String str24 = osiamGroupService14.extractErrorMessageForbidden(accessToken21);
        boolean boolean25 = accessToken21.isClientOnly();
        java.lang.String str26 = authService11.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken35 = builder32.build();
        java.lang.String str36 = accessToken35.toString();
        java.lang.String str37 = authService11.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.util.Date date45 = accessToken44.getExpiresAt();
        java.lang.String str46 = accessToken44.getRefreshToken();
        java.lang.String str47 = accessToken44.getType();
        java.lang.String str48 = accessToken44.getClientId();
        java.lang.String str49 = accessToken44.getUserName();
        java.lang.String str50 = authService11.extractErrorMessageForbidden(accessToken44);
        org.osiam.client.exception.UnauthorizedException unauthorizedException52 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int53 = unauthorizedException52.getHttpStatusCode();
        int int54 = unauthorizedException52.getHttpStatusCode();
        java.lang.Throwable[] throwableArray55 = unauthorizedException52.getSuppressed();
        boolean boolean56 = accessToken44.equals((java.lang.Object) unauthorizedException52);
        java.lang.String str57 = accessToken44.getType();
        java.lang.String str58 = accessToken44.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet59 = accessToken44.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator60 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider61 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer62 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSetJsonSerializer4.serializeWithType(scopeSet59, jsonGenerator60, serializerProvider61, typeSerializer62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(scopeSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str36, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 401 + "'", int53 == 401);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 401 + "'", int54 == 401);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(scopeSet59);
    }

    @Test
    public void test15237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15237");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setEndpoint("org.osiam.client.exception.OsiamClientException: client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientSecret("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test15238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15238");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.startIndex((long) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(0);
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.query.Query query25 = query24.previousPage();
        org.osiam.client.query.Query query26 = query25.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector5.createQueryBuilder(query25);
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        java.lang.String str43 = accessToken42.toString();
        java.lang.String str44 = accessToken42.getType();
        java.lang.String str45 = accessToken42.getType();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("org.osiam.client.exception.UnauthorizedException: ", accessToken42);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]" + "'", str43, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test15239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15239");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder12.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
    }

    @Test
    public void test15240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15240");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection11 = scopeDeserializer0.getKnownPropertyNames();
        boolean boolean12 = scopeDeserializer0.isCachable();
        java.lang.Class<?> wildcardClass13 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser14 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext15 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = scopeDeserializer0.deserializeWithType(jsonParser14, deserializationContext15, typeDeserializer16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test15241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15241");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        java.lang.String str13 = accessToken9.getRefreshToken();
        java.lang.String str14 = accessToken9.getRefreshToken();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test15242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15242");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService4.targetEndpoint;
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
    }

    @Test
    public void test15243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15243");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder10.setClientSecret("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector osiamConnector19 = builder16.build();
        org.osiam.client.OsiamConnector osiamConnector20 = builder16.build();
        org.osiam.resources.scim.Group group21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isClientOnly();
        java.lang.String str34 = accessToken32.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group35 = osiamConnector20.createGroup(group21, accessToken32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test15244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15244");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        boolean boolean16 = accessToken11.isRefreshTokenExpired();
        java.lang.String str17 = accessToken11.getToken();
        java.util.Date date18 = accessToken11.getRefreshTokenExpiresAt();
        boolean boolean19 = accessToken11.isClientOnly();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.descending("hi!");
        org.osiam.client.query.Query query29 = queryBuilder28.build();
        java.lang.String str30 = query29.toString();
        java.lang.String str31 = query29.toString();
        org.osiam.client.query.Query query32 = query29.nextPage();
        org.osiam.client.query.Query query33 = query29.nextPage();
        boolean boolean34 = accessToken11.equals((java.lang.Object) query29);
        java.lang.String str35 = osiamGroupService4.extractErrorMessageForbidden(accessToken11);
        java.lang.String str36 = accessToken11.toString();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Bearer " + "'", str17, "Bearer ");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str30, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str36, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15245");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
    }

    @Test
    public void test15246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15246");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("hi!");
        org.osiam.client.AuthService authService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.lang.String str17 = accessToken16.toString();
        boolean boolean18 = accessToken16.isRefreshTokenExpired();
        java.lang.String str19 = authService9.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList21 = osiamGroupService4.getAllGroups(accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(authService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
    }

    @Test
    public void test15247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15247");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(0, "org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
    }

    @Test
    public void test15248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15248");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("ascending");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("GET");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientRedirectUri("org.osiam.client.exception.ConflictException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test15249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15249");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken8 = builder5.build();
        java.lang.String str9 = accessToken8.getClientId();
        org.osiam.client.exception.NoResultException noResultException11 = new org.osiam.client.exception.NoResultException("authorization_code");
        boolean boolean12 = accessToken8.equals((java.lang.Object) "authorization_code");
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.getSortOrder();
        java.lang.String str28 = query22.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder(query22);
        long long30 = query22.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder(query22);
        long long32 = query22.getStartIndex();
        boolean boolean33 = accessToken8.equals((java.lang.Object) query22);
        java.lang.String str34 = query22.toString();
        org.osiam.client.query.Query query35 = query22.nextPage();
        java.lang.String str36 = query35.getSortBy();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Authorization" + "'", str28, "Authorization");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
    }

    @Test
    public void test15250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15250");
        org.osiam.client.exception.ForbiddenException forbiddenException1 = new org.osiam.client.exception.ForbiddenException("GET");
        org.osiam.client.exception.OsiamRequestException osiamRequestException4 = new org.osiam.client.exception.OsiamRequestException(403, "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException11 = new org.osiam.client.exception.ConnectionInitializationException("client_credentials", (java.lang.Throwable) invalidAttributeException9);
        org.osiam.client.exception.OsiamClientException osiamClientException12 = new org.osiam.client.exception.OsiamClientException("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", (java.lang.Throwable) connectionInitializationException11);
        osiamRequestException4.addSuppressed((java.lang.Throwable) osiamClientException12);
        forbiddenException1.addSuppressed((java.lang.Throwable) osiamRequestException4);
        org.osiam.client.exception.OsiamClientException osiamClientException16 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamClientException: hi!");
        forbiddenException1.addSuppressed((java.lang.Throwable) osiamClientException16);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15251");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test15252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15252");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.addScope(scope19);
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder18.addScope(scope21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.addScope(scope33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder30.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        org.osiam.client.oauth.AccessToken accessToken38 = builder36.build();
        java.lang.String str39 = osiamGroupService4.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        java.lang.Object obj48 = null;
        boolean boolean49 = accessToken47.equals(obj48);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group50 = osiamGroupService4.getResource("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", accessToken47);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]" + "'", str39, "Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test15253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15253");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test15254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15254");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("org.osiam.client.exception.NoResultException: refresh_token");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count((int) (short) 0);
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query21);
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector13.createQueryBuilder(query21);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder23);
    }

    @Test
    public void test15255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15255");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector23 = builder18.build();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector31 = builder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector31.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector31.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector23.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector9.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder59 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder61.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.descending("hi!");
        org.osiam.client.query.Query query68 = queryBuilder67.build();
        java.lang.String str69 = query68.toString();
        java.lang.String str70 = query68.getSortOrder();
        java.lang.String str71 = query68.getSortBy();
        int int72 = query68.getCount();
        int int73 = query68.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder74 = osiamConnector9.createQueryBuilder(query68);
        org.osiam.resources.scim.User user75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder81.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken84 = builder81.build();
        org.osiam.client.oauth.AccessToken accessToken85 = builder81.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken85);
        java.lang.String str87 = accessToken85.getUserName();
        org.osiam.client.exception.ForbiddenException forbiddenException89 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray90 = forbiddenException89.getSuppressed();
        boolean boolean91 = accessToken85.equals((java.lang.Object) forbiddenException89);
        java.lang.String str92 = accessToken85.getUserName();
        boolean boolean93 = accessToken85.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user94 = osiamConnector9.createUser(user75, accessToken85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(query68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str69, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "descending" + "'", str70, "descending");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertNotNull(accessToken85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test15256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15256");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.lang.String str12 = accessToken11.toString();
        java.lang.String str13 = accessToken11.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        java.lang.String str15 = accessToken11.getClientId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        boolean boolean17 = accessToken11.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            authService4.revokeAccessToken(accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test15257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15257");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: ADMIN");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
    }

    @Test
    public void test15258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15258");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        boolean boolean9 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer11);
        java.lang.Class<?> wildcardClass13 = scopeSetJsonDeserializer5.handledType();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty15 = scopeSetJsonDeserializer5.findBackReference("org.osiam.client.exception.OsiamClientException: client_credentials");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.OsiamClientException: client_credentials': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test15259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15259");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        java.lang.String str8 = accessToken6.getRefreshToken();
        java.lang.String str9 = accessToken6.getType();
        java.lang.String str10 = accessToken6.getClientId();
        java.lang.String str11 = accessToken6.getUserName();
        boolean boolean12 = accessToken6.isClientOnly();
        boolean boolean13 = accessToken6.isRefreshTokenExpired();
        java.lang.String str14 = accessToken6.getUserName();
        java.util.Date date15 = accessToken6.getExpiresAt();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15260");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        java.lang.String str8 = accessToken6.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = accessToken6.getScopes();
        java.lang.String str10 = accessToken6.getUserId();
        java.lang.String str11 = accessToken6.toString();
        java.lang.String str12 = accessToken6.getType();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(scopeSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test15261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15261");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = osiamConnector13.createQueryBuilder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken73 = osiamConnector13.retrieveAccessToken("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder71);
    }

    @Test
    public void test15262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15262");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.descending("hi!");
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        java.lang.String str22 = query21.toString();
        java.lang.String str23 = query21.getSortOrder();
        java.lang.String str24 = query21.getSortBy();
        java.lang.String str25 = query21.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        java.lang.String str35 = accessToken33.getRefreshToken();
        java.lang.String str36 = accessToken33.getType();
        java.lang.String str37 = accessToken33.getClientId();
        java.lang.String str38 = accessToken33.getUserName();
        boolean boolean39 = accessToken33.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user40 = osiamConnector7.getCurrentUser(accessToken33);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "descending" + "'", str23, "descending");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test15263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15263");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query20 = query19.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(query19);
    }

    @Test
    public void test15264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15264");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.getAttributes();
        java.lang.String str17 = query15.toString();
        java.lang.String str18 = query15.getSortBy();
        org.osiam.client.query.Query query19 = query15.nextPage();
        java.lang.String str20 = query19.getAttributes();
        java.lang.String str21 = query19.getFilter();
        org.osiam.client.query.Query query22 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector5.createQueryBuilder(query19);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.Query query26 = queryBuilder23.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Authorization" + "'", str16, "Authorization");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Authorization" + "'", str20, "Authorization");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
    }

    @Test
    public void test15265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15265");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PUT], refreshTokenId=org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test15266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15266");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder7 = builder4.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder9 = builder4.setResourceServerEndpoint("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector10 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
    }

    @Test
    public void test15267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15267");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder9 = builder6.setClientId("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector osiamConnector10 = builder9.build();
        org.osiam.client.OsiamConnector.Builder builder11 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector16 = builder15.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.lang.String str25 = accessToken23.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder28.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.descending("hi!");
        org.osiam.client.query.Query query35 = queryBuilder34.build();
        java.lang.String str36 = query35.toString();
        java.lang.String str37 = query35.getSortOrder();
        java.lang.String str38 = query35.getSortBy();
        java.lang.String str39 = query35.getFilter();
        java.lang.String str40 = query35.toString();
        boolean boolean41 = accessToken23.equals((java.lang.Object) query35);
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector16.createQueryBuilder(query35);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.getAttributes();
        java.lang.String str54 = query52.toString();
        java.lang.String str55 = query52.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector16.createQueryBuilder(query52);
        long long57 = query52.getStartIndex();
        java.lang.String str58 = query52.toString();
        int int59 = query52.getCount();
        org.osiam.client.query.Query query60 = query52.nextPage();
        org.osiam.client.query.Query query61 = query52.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder62 = osiamConnector10.createQueryBuilder(query61);
        org.osiam.client.query.Query query63 = query61.nextPage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(osiamConnector16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str36, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "descending" + "'", str37, "descending");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Authorization" + "'", str53, "Authorization");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "descending" + "'", str55, "descending");
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str58, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertNotNull(query61);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(query63);
    }

    @Test
    public void test15268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15268");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.descending("hi!");
        org.osiam.client.query.Query query29 = queryBuilder28.build();
        java.lang.String str30 = query29.toString();
        java.lang.String str31 = query29.getSortOrder();
        java.lang.String str32 = query29.getSortBy();
        java.lang.String str33 = query29.getFilter();
        java.lang.String str34 = query29.getSortOrder();
        java.lang.String str35 = query29.getAttributes();
        boolean boolean36 = accessToken17.equals((java.lang.Object) query29);
        java.lang.String str37 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.AuthService.Builder builder39 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientId("ME");
        org.osiam.client.AuthService.Builder builder43 = builder41.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder45 = builder43.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService48 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.lang.String str57 = authService48.extractErrorMessageForbidden(accessToken55);
        boolean boolean58 = accessToken55.isRefreshTokenExpired();
        java.lang.String str59 = accessToken55.getType();
        java.lang.String str60 = authService10.extractErrorMessageForbidden(accessToken55);
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        java.lang.String str69 = accessToken67.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder70 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder72 = queryBuilder70.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder74 = queryBuilder72.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder76 = queryBuilder72.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder78 = queryBuilder76.descending("hi!");
        org.osiam.client.query.Query query79 = queryBuilder78.build();
        java.lang.String str80 = query79.toString();
        java.lang.String str81 = query79.getSortOrder();
        java.lang.String str82 = query79.getSortBy();
        java.lang.String str83 = query79.getFilter();
        java.lang.String str84 = query79.getSortOrder();
        java.lang.String str85 = query79.getAttributes();
        boolean boolean86 = accessToken67.equals((java.lang.Object) query79);
        java.lang.String str87 = accessToken67.getToken();
        java.lang.String str88 = authService10.extractErrorMessageForbidden(accessToken67);
        java.lang.String str89 = accessToken67.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser90 = osiamUserService3.getCurrentUserBasic(accessToken67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str30, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "descending" + "'", str34, "descending");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Authorization" + "'", str35, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(authService48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(queryBuilder76);
        org.junit.Assert.assertNotNull(queryBuilder78);
        org.junit.Assert.assertNotNull(query79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str80, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "descending" + "'", str81, "descending");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "descending" + "'", str84, "descending");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Authorization" + "'", str85, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Bearer " + "'", str87, "Bearer ");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Insufficient scopes: []" + "'", str88, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test15269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15269");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.toString();
        org.osiam.client.query.Query query55 = query52.nextPage();
        java.lang.String str56 = query52.toString();
        org.osiam.client.query.Query query57 = query52.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector7.createQueryBuilder(query57);
        org.osiam.resources.scim.UpdateGroup updateGroup60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        java.lang.String str69 = accessToken67.getUserId();
        java.lang.String str70 = accessToken67.getClientId();
        boolean boolean71 = accessToken67.isClientOnly();
        java.lang.String str72 = accessToken67.getClientId();
        java.lang.String str73 = accessToken67.getRefreshToken();
        boolean boolean74 = accessToken67.isRefreshTokenExpired();
        boolean boolean75 = accessToken67.isRefreshTokenExpired();
        java.util.Date date76 = accessToken67.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group77 = osiamConnector7.updateGroup("", updateGroup60, accessToken67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15270");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.resources.scim.UpdateGroup updateGroup7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        boolean boolean16 = accessToken14.isClientOnly();
        java.lang.String str17 = accessToken14.getRefreshToken();
        boolean boolean18 = accessToken14.isExpired();
        boolean boolean19 = accessToken14.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group21 = osiamConnector5.updateGroup("org.osiam.client.exception.OsiamRequestException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]", updateGroup7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test15271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15271");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        org.osiam.client.query.Query query12 = query9.nextPage();
        org.osiam.client.query.Query query13 = query12.previousPage();
        java.lang.String str14 = query13.getSortBy();
        java.lang.String str15 = query13.getAttributes();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
    }

    @Test
    public void test15272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15272");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.addScope(scope45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder40.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder13.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str60 = scope59.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder54.addScope(scope59);
        org.osiam.client.OsiamConnector.Builder builder62 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder64 = builder62.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder66 = builder64.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder68 = builder66.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder70 = builder68.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder72 = builder68.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder74 = builder68.setClientRedirectUri("client_credentials");
        boolean boolean75 = scope59.equals((java.lang.Object) builder68);
        java.lang.String str76 = scope59.getValue();
        java.lang.String str77 = scope59.getValue();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PUT" + "'", str60, "PUT");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PUT" + "'", str76, "PUT");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PUT" + "'", str77, "PUT");
    }

    @Test
    public void test15273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15273");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType19 = null;
        org.osiam.client.OsiamGroupService.Builder builder21 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService22 = builder21.build();
        org.osiam.client.OsiamGroupService osiamGroupService23 = builder21.build();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.addScope(scope26);
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException30 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean31 = scope28.equals((java.lang.Object) invalidAttributeException30);
        java.lang.String str32 = scope28.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder25.addScope(scope28);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        java.lang.String str39 = accessToken38.toString();
        boolean boolean40 = accessToken38.isExpired();
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.addScope(scope43);
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException47 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean48 = scope45.equals((java.lang.Object) invalidAttributeException47);
        java.lang.String str49 = scope45.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder42.addScope(scope45);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder56.setType("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        boolean boolean63 = accessToken38.equals((java.lang.Object) "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        java.lang.String str64 = osiamGroupService23.extractErrorMessageForbidden(accessToken38);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.checkAndHandleResponse("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]", statusType19, accessToken38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(osiamGroupService22);
        org.junit.Assert.assertNotNull(osiamGroupService23);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GET" + "'", str32, "GET");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GET" + "'", str49, "GET");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str64, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
    }

    @Test
    public void test15274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15274");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        org.osiam.client.query.Query query11 = query10.nextPage();
        java.lang.String str12 = query11.toString();
        java.lang.String str13 = query11.getAttributes();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertNotNull(query11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str12, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Authorization" + "'", str13, "Authorization");
    }

    @Test
    public void test15275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15275");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder16 = builder10.setEndpoint("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder18 = builder10.setClientId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder20 = builder10.setClientId("Cannot connect to server");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test15276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15276");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query16);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.Query query21 = queryBuilder18.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector5.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder25 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder37 = builder33.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService40 = builder37.build();
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        java.lang.String str42 = scope41.getValue();
        java.lang.String str43 = scope41.getValue();
        java.lang.String str44 = scope41.toString();
        java.lang.String str45 = scope41.toString();
        org.osiam.client.oauth.Scope[] scopeArray46 = new org.osiam.client.oauth.Scope[] { scope41 };
        java.net.URI uRI47 = authService40.getAuthorizationUri(scopeArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI48 = osiamConnector5.getAuthorizationUri(scopeArray46);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(authService40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "GET" + "'", str43, "GET");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "GET" + "'", str44, "GET");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(scopeArray46);
        org.junit.Assert.assertNotNull(uRI47);
    }

    @Test
    public void test15277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15277");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("password");
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setClientId("org.osiam.client.exception.OsiamClientException: client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setRefreshToken("org.osiam.client.exception.OsiamClientException: ascending");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test15278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15278");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str17 = query9.getSortBy();
        org.osiam.client.query.Query query18 = query9.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder(query18);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(query18);
    }

    @Test
    public void test15279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15279");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(403);
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.descending("org.osiam.client.exception.OsiamRequestException: descending");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test15280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15280");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector osiamConnector8 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        org.osiam.client.query.Query query19 = queryBuilder17.build();
        long long20 = query19.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder(query19);
        java.lang.String str22 = query19.getSortOrder();
        int int23 = query19.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector8.createQueryBuilder(query19);
        org.osiam.client.query.QueryBuilder queryBuilder25 = osiamConnector8.createQueryBuilder();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamConnector8);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder25);
    }

    @Test
    public void test15281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15281");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.filter("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder8.ascending("org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.query.Query query15 = queryBuilder8.build();
        org.osiam.client.query.Query query16 = queryBuilder8.build();
        org.osiam.client.query.Query query17 = query16.nextPage();
        java.lang.String str18 = query16.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.osiam.client.exception.NoResultException: authorization_code" + "'", str18, "org.osiam.client.exception.NoResultException: authorization_code");
    }

    @Test
    public void test15282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15282");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService4.replaceGroup("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", group7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15283");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.AuthService.Builder builder7 = builder1.setClientId("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService.Builder builder9 = builder1.setClientId("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("org.osiam.client.exception.NoResultException: ");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("Authorization");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test15284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15284");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        boolean boolean20 = accessToken17.isRefreshTokenExpired();
        java.lang.String str21 = accessToken17.getType();
        boolean boolean22 = accessToken17.isExpired();
        java.lang.String str23 = accessToken17.getToken();
        java.util.Date date24 = accessToken17.getExpiresAt();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15285");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService10 = builder7.build();
        org.osiam.client.AuthService.Builder builder12 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("ME");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = authService21.extractErrorMessageForbidden(accessToken28);
        boolean boolean31 = accessToken28.isRefreshTokenExpired();
        java.lang.String str32 = accessToken28.getType();
        java.lang.String str33 = accessToken28.getToken();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str45 = scope44.toString();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder39.addScope(scope44);
        boolean boolean47 = accessToken28.equals((java.lang.Object) builder39);
        java.lang.String str48 = authService10.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.lang.String str57 = accessToken55.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder58 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder58.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.descending("hi!");
        org.osiam.client.query.Query query67 = queryBuilder66.build();
        java.lang.String str68 = query67.toString();
        java.lang.String str69 = query67.getSortOrder();
        java.lang.String str70 = query67.getSortBy();
        java.lang.String str71 = query67.getFilter();
        java.lang.String str72 = query67.toString();
        boolean boolean73 = accessToken55.equals((java.lang.Object) query67);
        java.util.Date date74 = accessToken55.getExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet75 = accessToken55.getScopes();
        java.lang.String str76 = authService10.extractErrorMessageForbidden(accessToken55);
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setRefreshTokenExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder78.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken83 = builder82.build();
        boolean boolean84 = accessToken83.isRefreshTokenExpired();
        java.lang.String str85 = accessToken83.getUserId();
        java.lang.String str86 = accessToken83.getClientId();
        java.util.Date date87 = accessToken83.getRefreshTokenExpiresAt();
        java.util.Date date88 = accessToken83.getExpiresAt();
        java.lang.String str89 = accessToken83.toString();
        java.lang.String str90 = authService10.extractErrorMessageForbidden(accessToken83);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Bearer " + "'", str33, "Bearer ");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PUT" + "'", str45, "PUT");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str68, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "descending" + "'", str69, "descending");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str72, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Insufficient scopes: []" + "'", str76, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(accessToken83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str89, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Insufficient scopes: []" + "'", str90, "Insufficient scopes: []");
    }

    @Test
    public void test15286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15286");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService.Builder builder17 = builder13.setClientId("ME");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientSecret("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.AuthService authService20 = builder17.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(authService20);
    }

    @Test
    public void test15287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15287");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("POST");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.descending("hi!");
        org.osiam.client.query.Query query29 = queryBuilder28.build();
        java.lang.String str30 = query29.toString();
        java.lang.String str31 = query29.getSortOrder();
        java.lang.String str32 = query29.getSortBy();
        java.lang.String str33 = query29.getFilter();
        java.lang.String str34 = query29.getSortOrder();
        java.lang.String str35 = query29.getAttributes();
        boolean boolean36 = accessToken17.equals((java.lang.Object) query29);
        org.osiam.client.OsiamConnector.Builder builder37 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder39 = builder37.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder41 = builder39.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder43 = builder41.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder45 = builder41.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder47 = builder41.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder49 = builder47.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder51 = builder47.setClientRedirectUri("PUT");
        boolean boolean52 = accessToken17.equals((java.lang.Object) builder51);
        java.lang.String str53 = accessToken17.getClientId();
        java.lang.String str54 = accessToken17.getToken();
        java.lang.String str55 = accessToken17.getRefreshToken();
        java.util.Date date56 = accessToken17.getRefreshTokenExpiresAt();
        java.lang.String str57 = accessToken17.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user58 = osiamConnector9.getUser("org.osiam.client.exception.OsiamClientException: hi!", accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str30, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "descending" + "'", str34, "descending");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Authorization" + "'", str35, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Bearer " + "'", str54, "Bearer ");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test15288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15288");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService24 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        boolean boolean33 = accessToken31.isClientOnly();
        java.lang.String str34 = accessToken31.getClientId();
        java.lang.String str35 = authService24.extractErrorMessageForbidden(accessToken31);
        java.util.Date date36 = accessToken31.getExpiresAt();
        java.lang.String str37 = accessToken31.toString();
        java.util.Date date38 = accessToken31.getExpiresAt();
        java.lang.String str39 = osiamGroupService2.extractErrorMessageForbidden(accessToken31);
        org.osiam.client.OsiamGroupService.Builder builder42 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder42.build();
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken50.getScopes();
        java.lang.String str53 = osiamGroupService43.extractErrorMessageForbidden(accessToken50);
        boolean boolean54 = accessToken50.isClientOnly();
        java.lang.String str55 = accessToken50.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group56 = osiamGroupService2.getGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(authService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str37, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test15289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15289");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder15.setType("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshToken("ME");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setClientId("org.osiam.client.exception.InvalidAttributeException: authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setClientId("org.osiam.client.exception.OsiamClientException: ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setType("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setType("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test15290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15290");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService7.targetEndpoint;
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        java.lang.String str37 = accessToken32.getUserId();
        java.lang.String str38 = accessToken32.getClientId();
        java.lang.String str39 = osiamGroupService7.extractErrorMessageForbidden(accessToken32);
        boolean boolean40 = accessToken32.isRefreshTokenExpired();
        java.lang.String str41 = accessToken32.getRefreshToken();
        java.util.Date date42 = accessToken32.getExpiresAt();
        java.lang.String str43 = accessToken32.getRefreshToken();
        java.lang.String str44 = osiamGroupService2.extractErrorMessageForbidden(accessToken32);
        org.osiam.client.AuthService.Builder builder46 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientId("ME");
        org.osiam.client.AuthService.Builder builder50 = builder48.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService51 = builder50.build();
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        boolean boolean60 = accessToken58.isClientOnly();
        java.lang.String str61 = accessToken58.getClientId();
        java.lang.String str62 = authService51.extractErrorMessageForbidden(accessToken58);
        java.lang.String str63 = accessToken58.getUserId();
        java.lang.String str64 = accessToken58.getClientId();
        java.lang.String str65 = osiamGroupService2.extractErrorMessageForbidden(accessToken58);
        javax.ws.rs.core.Response.StatusType statusType67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = osiamGroupService2.extractErrorMessage("org.osiam.client.exception.ForbiddenException: Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]", statusType67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(authService51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Insufficient scopes: []" + "'", str65, "Insufficient scopes: []");
    }

    @Test
    public void test15291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15291");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        long long13 = query9.getStartIndex();
        org.osiam.client.query.Query query14 = query9.nextPage();
        org.osiam.client.query.Query query15 = query14.nextPage();
        org.osiam.client.query.Query query16 = query14.nextPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
    }

    @Test
    public void test15292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15292");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group3 = null;
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientId("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.OsiamGroupService.Builder builder16 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken24.getScopes();
        java.lang.String str27 = osiamGroupService17.extractErrorMessageForbidden(accessToken24);
        boolean boolean28 = accessToken24.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.lang.String str30 = authService14.extractErrorMessageForbidden(accessToken24);
        java.lang.String str31 = accessToken24.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.util.Date date33 = accessToken24.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamGroupService2.createGroup(group3, accessToken24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(scopeSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15293");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.ADMIN;
        java.lang.String str1 = scope0.toString();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder3.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken8 = builder7.build();
        java.util.Date date9 = accessToken8.getExpiresAt();
        java.lang.String str10 = accessToken8.toString();
        boolean boolean11 = scope0.equals((java.lang.Object) accessToken8);
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ADMIN" + "'", str1, "ADMIN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15294");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        boolean boolean18 = accessToken16.isClientOnly();
        java.lang.String str19 = accessToken16.getClientId();
        java.lang.String str20 = accessToken16.getClientId();
        java.lang.String str21 = accessToken16.getToken();
        java.lang.String str22 = accessToken16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user23 = osiamConnector7.getCurrentUser(accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15295");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer6.getNullValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer8 = scopeSetJsonDeserializer6.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeSetJsonDeserializer6.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeSetJsonDeserializer6.getDelegatee();
        boolean boolean11 = scopeSetJsonDeserializer6.isCachable();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(wildcardJsonDeserializer8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertNull(wildcardJsonDeserializer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test15296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15296");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15297");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientId("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        java.lang.String str23 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean24 = accessToken20.isClientOnly();
        java.lang.String str25 = authService10.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken34 = builder31.build();
        java.lang.String str35 = accessToken34.toString();
        java.lang.String str36 = authService10.extractErrorMessageForbidden(accessToken34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.util.Date date44 = accessToken43.getExpiresAt();
        java.lang.String str45 = accessToken43.getRefreshToken();
        java.lang.String str46 = accessToken43.getType();
        java.lang.String str47 = accessToken43.getClientId();
        java.lang.String str48 = accessToken43.getUserName();
        java.lang.String str49 = authService10.extractErrorMessageForbidden(accessToken43);
        org.osiam.client.exception.UnauthorizedException unauthorizedException51 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int52 = unauthorizedException51.getHttpStatusCode();
        int int53 = unauthorizedException51.getHttpStatusCode();
        java.lang.Throwable[] throwableArray54 = unauthorizedException51.getSuppressed();
        boolean boolean55 = accessToken43.equals((java.lang.Object) unauthorizedException51);
        java.lang.String str56 = accessToken43.toString();
        java.lang.String str57 = accessToken43.getToken();
        org.osiam.client.OsiamConnector.Builder builder58 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder60 = builder58.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder62 = builder60.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder64 = builder62.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder66 = builder62.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector67 = builder66.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder72 = queryBuilder70.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder74 = queryBuilder70.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder76 = queryBuilder74.descending("hi!");
        org.osiam.client.query.Query query77 = queryBuilder76.build();
        java.lang.String str78 = query77.toString();
        java.lang.String str79 = query77.getSortOrder();
        java.lang.String str80 = query77.getSortBy();
        org.osiam.client.query.Query query81 = query77.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder82 = osiamConnector67.createQueryBuilder(query81);
        boolean boolean83 = accessToken43.equals((java.lang.Object) queryBuilder82);
        java.lang.String str84 = osiamGroupService2.extractErrorMessageForbidden(accessToken43);
        boolean boolean85 = accessToken43.isExpired();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str35, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 401 + "'", int52 == 401);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 401 + "'", int53 == 401);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str56, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Bearer " + "'", str57, "Bearer ");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(osiamConnector67);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(queryBuilder76);
        org.junit.Assert.assertNotNull(query77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str78, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "descending" + "'", str79, "descending");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(query81);
        org.junit.Assert.assertNotNull(queryBuilder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Insufficient scopes: []" + "'", str84, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test15298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15298");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer4 = scopeDeserializer0.getDelegatee();
        boolean boolean5 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeDeserializer0.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer7.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeSetJsonDeserializer7.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer7.getNullValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeSetJsonDeserializer7.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(wildcardJsonDeserializer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
    }

    @Test
    public void test15299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15299");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.Query query13 = query9.nextPage();
        java.lang.String str14 = query9.getSortOrder();
        int int15 = query9.getCount();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test15300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15300");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str12 = query9.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(queryBuilder16);
    }

    @Test
    public void test15301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15301");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("PUT");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.AuthService.Builder builder8 = builder5.setClientRedirectUri("org.osiam.client.exception.OsiamRequestException: descending");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test15302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15302");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder(query13);
        java.lang.String str16 = query13.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder(query13);
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query13);
        org.osiam.client.OsiamGroupService.Builder builder20 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder20.build();
        org.osiam.client.OsiamGroupService osiamGroupService22 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        java.lang.String str31 = osiamGroupService22.extractErrorMessageForbidden(accessToken29);
        java.util.Date date32 = accessToken29.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult34 = osiamGroupService3.searchGroups(query13, accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(osiamGroupService22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15303");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder0.filter("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder0.count((int) (short) 10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder0.filter("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder0.startIndex((long) 100);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
    }

    @Test
    public void test15304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15304");
        org.osiam.client.oauth.Scope scope0 = org.osiam.client.oauth.Scope.POST;
        org.osiam.client.OsiamGroupService.Builder builder2 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder2.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder2.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        java.lang.String str13 = osiamGroupService4.extractErrorMessageForbidden(accessToken11);
        java.util.Date date14 = accessToken11.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean17 = accessToken11.equals((java.lang.Object) scope16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getClientId();
        boolean boolean28 = accessToken24.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.addScope(scope31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException35 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean36 = scope33.equals((java.lang.Object) invalidAttributeException35);
        java.lang.String str37 = scope33.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder30.addScope(scope33);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserName("Authorization");
        boolean boolean45 = accessToken24.equals((java.lang.Object) builder42);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.addScope(scope48);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException52 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean53 = scope50.equals((java.lang.Object) invalidAttributeException52);
        java.lang.String str54 = scope50.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder47.addScope(scope50);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.addScope(scope62);
        org.osiam.client.oauth.GrantType grantType64 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str65 = grantType64.getUrlParam();
        boolean boolean66 = scope62.equals((java.lang.Object) grantType64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder42.addScope(scope62);
        boolean boolean68 = scope16.equals((java.lang.Object) builder67);
        boolean boolean69 = scope0.equals((java.lang.Object) builder67);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder67.setClientId("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setType("Insufficient scopes: []");
        org.osiam.client.OsiamGroupService.Builder builder75 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService76 = builder75.build();
        org.osiam.client.OsiamGroupService osiamGroupService77 = builder75.build();
        javax.ws.rs.client.WebTarget webTarget78 = osiamGroupService77.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget79 = osiamGroupService77.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder81 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date82 = null;
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder81.setRefreshTokenExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder81.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken86 = builder85.build();
        boolean boolean87 = accessToken86.isRefreshTokenExpired();
        java.lang.String str88 = accessToken86.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet89 = accessToken86.getScopes();
        java.lang.String str90 = osiamGroupService77.extractErrorMessageForbidden(accessToken86);
        java.lang.String str91 = accessToken86.getUserId();
        java.util.Date date92 = accessToken86.getRefreshTokenExpiresAt();
        java.util.Date date93 = accessToken86.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder94 = builder73.setRefreshTokenExpiresAt(date93);
        org.osiam.client.oauth.Scope scope96 = new org.osiam.client.oauth.Scope("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder97 = builder94.addScope(scope96);
        org.junit.Assert.assertNotNull(scope0);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GET" + "'", str37, "GET");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GET" + "'", str54, "GET");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + grantType64 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType64.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "client_credentials" + "'", str65, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(osiamGroupService76);
        org.junit.Assert.assertNotNull(osiamGroupService77);
        org.junit.Assert.assertNotNull(webTarget78);
        org.junit.Assert.assertNotNull(webTarget79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(accessToken86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(scopeSet89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Insufficient scopes: []" + "'", str90, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test15305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15305");
        org.osiam.client.exception.UnauthorizedException unauthorizedException2 = new org.osiam.client.exception.UnauthorizedException("POST");
        org.osiam.client.exception.OsiamClientException osiamClientException3 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamClientException: ascending", (java.lang.Throwable) unauthorizedException2);
    }

    @Test
    public void test15306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15306");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setResourceServerEndpoint("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector osiamConnector11 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        java.lang.String str20 = accessToken18.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        boolean boolean30 = accessToken28.isClientOnly();
        java.lang.String str31 = accessToken28.getClientId();
        boolean boolean32 = accessToken28.isClientOnly();
        boolean boolean33 = accessToken18.equals((java.lang.Object) accessToken28);
        java.lang.String str34 = accessToken18.getToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector11.revokeAccessToken(accessToken18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Bearer " + "'", str34, "Bearer ");
    }

    @Test
    public void test15307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15307");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserId();
        java.lang.String str21 = accessToken18.getClientId();
        boolean boolean22 = accessToken18.isClientOnly();
        java.lang.String str23 = authService11.extractErrorMessageForbidden(accessToken18);
        java.lang.String str24 = accessToken18.toString();
        java.lang.String str25 = accessToken18.getClientId();
        java.lang.String str26 = osiamGroupService3.extractErrorMessageForbidden(accessToken18);
        javax.ws.rs.client.WebTarget webTarget27 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken48);
        java.lang.String str50 = accessToken48.getUserName();
        java.lang.String str51 = osiamGroupService3.extractErrorMessageForbidden(accessToken48);
        javax.ws.rs.core.Response.StatusType statusType53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = osiamGroupService3.extractErrorMessageUnauthorized("org.osiam.client.exception.OsiamClientException: descending", statusType53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget27);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Authorization" + "'", str50, "Authorization");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str51, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
    }

    @Test
    public void test15308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15308");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder9 = builder6.setClientId("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientId("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: password");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test15309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15309");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        java.lang.String str17 = authService6.extractErrorMessageForbidden(accessToken13);
        java.lang.String str18 = accessToken13.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = accessToken25.getUserId();
        boolean boolean28 = accessToken25.isRefreshTokenExpired();
        boolean boolean29 = accessToken13.equals((java.lang.Object) accessToken25);
        java.lang.String str30 = accessToken13.getUserName();
        java.lang.String str31 = accessToken13.getRefreshToken();
        java.lang.String str32 = accessToken13.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str32, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15310");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken13.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str19 = osiamGroupService2.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = osiamGroupService2.extractErrorMessageDefault("org.osiam.client.exception.OsiamClientException: PATCH", statusType23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(webTarget21);
    }

    @Test
    public void test15311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15311");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        boolean boolean9 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer11);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer13 = scopeSetJsonDeserializer5.getDelegatee();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeSetJsonDeserializer5.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(wildcardJsonDeserializer13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
    }

    @Test
    public void test15312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15312");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget27 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.lang.String str37 = accessToken36.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType29, accessToken36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(webTarget27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str37, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15313");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer67 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer68 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer69 = scopeSerializer0.unwrappingSerializer(nameTransformer68);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer70 = scopeSetJsonSerializer69.getDelegatee();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass71 = scopeSetJsonSerializer69.handledType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer67);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer69);
        org.junit.Assert.assertNull(wildcardJsonSerializer70);
        org.junit.Assert.assertNull(scopeSetClass71);
    }

    @Test
    public void test15314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15314");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = authService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean23 = accessToken20.isRefreshTokenExpired();
        java.lang.String str24 = accessToken20.getType();
        java.util.Date date25 = accessToken20.getExpiresAt();
        boolean boolean26 = accessToken20.isClientOnly();
        java.lang.String str27 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.AuthService.Builder builder29 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder41 = builder37.setClientSecret("PATCH");
        org.osiam.client.AuthService authService42 = builder41.build();
        org.osiam.client.AuthService authService43 = builder41.build();
        org.osiam.client.AuthService.Builder builder45 = builder41.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.AuthService authService46 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setType("authorization_code");
        org.osiam.client.oauth.AccessToken accessToken57 = builder52.build();
        boolean boolean58 = accessToken57.isClientOnly();
        java.lang.String str59 = authService46.extractErrorMessageForbidden(accessToken57);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList60 = osiamGroupService2.getAllResources(accessToken57);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(authService42);
        org.junit.Assert.assertNotNull(authService43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(authService46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
    }

    @Test
    public void test15315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15315");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.util.Collection<java.lang.Object> objCollection2 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(objCollection2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(objectIdReader5);
    }

    @Test
    public void test15316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15316");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getRefreshToken();
        boolean boolean10 = accessToken6.isExpired();
        boolean boolean11 = accessToken6.isExpired();
        java.lang.String str12 = accessToken6.toString();
        org.osiam.client.OsiamConnector.Builder builder13 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder17 = builder15.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder19 = builder17.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder21 = builder17.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder23 = builder21.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder25 = builder23.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder27 = builder25.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        boolean boolean28 = accessToken6.equals((java.lang.Object) builder27);
        org.osiam.client.OsiamConnector.Builder builder30 = builder27.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setClientSecret("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test15317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15317");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConflictException: , userId=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=], userName=]");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test15318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15318");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("PUT");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientId("ADMIN");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test15319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15319");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("ME");
        org.osiam.client.AuthService authService4 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        java.lang.String str17 = accessToken14.toString();
        java.lang.String str18 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        boolean boolean19 = accessToken14.isClientOnly();
        java.lang.String str20 = authService4.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.lang.String str28 = accessToken27.toString();
        java.lang.String str29 = accessToken27.getType();
        boolean boolean30 = accessToken27.isExpired();
        java.util.Date date31 = accessToken27.getExpiresAt();
        java.lang.String str32 = authService4.extractErrorMessageForbidden(accessToken27);
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder42 = builder40.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder44 = builder42.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder46 = builder42.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService49 = builder46.build();
        org.osiam.client.AuthService.Builder builder51 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientId("ME");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder61 = builder57.setClientId("");
        org.osiam.client.AuthService.Builder builder63 = builder57.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService64 = builder63.build();
        org.osiam.client.oauth.Scope scope66 = new org.osiam.client.oauth.Scope("");
        java.lang.String str67 = scope66.getValue();
        org.osiam.client.oauth.Scope scope69 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray70 = new org.osiam.client.oauth.Scope[] { scope66, scope69 };
        java.net.URI uRI71 = authService64.getAuthorizationUri(scopeArray70);
        java.net.URI uRI72 = authService49.getAuthorizationUri(scopeArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken73 = authService4.retrieveAccessToken(scopeArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str28, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(authService49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(authService64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(scopeArray70);
        org.junit.Assert.assertNotNull(uRI71);
        org.junit.Assert.assertNotNull(uRI72);
    }

    @Test
    public void test15320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15320");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        java.lang.String str42 = query37.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder44 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.descending("hi!");
        org.osiam.client.query.Query query53 = queryBuilder52.build();
        java.lang.String str54 = query53.toString();
        java.lang.String str55 = query53.toString();
        org.osiam.client.query.Query query56 = query53.nextPage();
        java.lang.String str57 = query53.toString();
        org.osiam.client.query.Query query58 = query53.nextPage();
        int int59 = query53.getCount();
        java.lang.String str60 = query53.getSortBy();
        java.lang.String str61 = query53.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder62 = osiamConnector7.createQueryBuilder(query53);
        org.osiam.client.query.QueryBuilder queryBuilder63 = osiamConnector7.createQueryBuilder();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "descending" + "'", str42, "descending");
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str55, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder63);
    }

    @Test
    public void test15321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15321");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getDescription();
        java.lang.String str2 = scimErrorMessage0.getDescription();
        java.lang.String str3 = scimErrorMessage0.getErrorCode();
        java.lang.String str4 = scimErrorMessage0.getErrorCode();
        java.lang.String str5 = scimErrorMessage0.getErrorCode();
        java.lang.String str6 = scimErrorMessage0.getErrorCode();
        java.lang.String str7 = scimErrorMessage0.getDescription();
        java.lang.String str8 = scimErrorMessage0.getErrorCode();
        java.lang.String str9 = scimErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test15322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15322");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getSortBy();
        java.lang.String str31 = query27.getFilter();
        java.lang.String str32 = query27.getSortOrder();
        java.lang.String str33 = query27.getAttributes();
        boolean boolean34 = accessToken15.equals((java.lang.Object) query27);
        org.osiam.client.OsiamConnector.Builder builder35 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder37 = builder35.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder39 = builder37.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder41 = builder39.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder43 = builder39.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder45 = builder39.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder47 = builder45.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder49 = builder45.setClientRedirectUri("PUT");
        boolean boolean50 = accessToken15.equals((java.lang.Object) builder49);
        java.lang.String str51 = accessToken15.getClientId();
        boolean boolean52 = accessToken15.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group54 = osiamGroupService6.updateResource("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "descending" + "'", str32, "descending");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Authorization" + "'", str33, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test15323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15323");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer0.unwrappingDeserializer(nameTransformer9);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer13 = scopeDeserializer0.unwrappingDeserializer(nameTransformer12);
        boolean boolean14 = scopeDeserializer0.isCachable();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
        org.junit.Assert.assertNull(scopeSet11);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15324");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        java.util.Date date30 = accessToken29.getExpiresAt();
        java.lang.String str31 = accessToken29.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        java.lang.String str33 = accessToken29.getClientId();
        boolean boolean34 = accessToken29.isRefreshTokenExpired();
        java.lang.String str35 = accessToken29.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group36 = osiamConnector21.getGroup("org.osiam.client.exception.OsiamClientException: ascending", accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test15325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15325");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.AuthService.Builder builder9 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientId("ME");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService18 = builder17.build();
        org.osiam.client.OsiamGroupService.Builder builder20 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet30 = accessToken28.getScopes();
        java.lang.String str31 = osiamGroupService21.extractErrorMessageForbidden(accessToken28);
        boolean boolean32 = accessToken28.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str34 = authService18.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        java.util.Date date43 = accessToken41.getExpiresAt();
        boolean boolean44 = accessToken41.isClientOnly();
        boolean boolean45 = accessToken41.isClientOnly();
        java.lang.String str46 = authService18.extractErrorMessageForbidden(accessToken41);
        boolean boolean47 = accessToken41.isExpired();
        java.lang.String str48 = accessToken41.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group49 = osiamGroupService4.getGroup("org.osiam.client.exception.NoResultException: ME", accessToken41);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(scopeSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test15326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15326");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer8);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
    }

    @Test
    public void test15327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15327");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessageDefault("PUT", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test15328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15328");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("hi!");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("Cannot connect to server");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.oauth.AccessToken accessToken15 = null;
        // The following exception was thrown during execution in test generation
        try {
            authService14.revokeAccessToken(accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
    }

    @Test
    public void test15329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15329");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        java.lang.String str8 = accessToken7.toString();
        java.lang.String str9 = accessToken7.getUserId();
        java.lang.String str10 = accessToken7.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken7);
        java.lang.String str12 = accessToken7.getUserName();
        boolean boolean13 = accessToken7.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", statusType4, accessToken7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str8, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "client_credentials" + "'", str10, "client_credentials");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test15330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15330");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder40.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder13.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        java.util.Date date62 = accessToken61.getExpiresAt();
        java.util.Date date63 = accessToken61.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder52.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder52.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder52.setType("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder68.setType("ascending");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder68.setUserId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder68.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test15331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15331");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserId();
        java.lang.String str9 = accessToken6.getToken();
        java.lang.String str10 = accessToken6.getClientId();
        boolean boolean11 = accessToken6.isExpired();
        java.util.Date date12 = accessToken6.getExpiresAt();
        java.lang.String str13 = accessToken6.getClientId();
        java.lang.String str14 = accessToken6.getToken();
        java.lang.String str15 = accessToken6.getUserName();
        boolean boolean16 = accessToken6.isClientOnly();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Bearer " + "'", str9, "Bearer ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Bearer " + "'", str14, "Bearer ");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test15332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15332");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService12 = builder7.build();
        org.osiam.client.AuthService authService13 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            authService13.revokeAccessToken(accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test15333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15333");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setEndpoint("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientRedirectUri("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector21 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet30 = accessToken28.getScopes();
        boolean boolean31 = accessToken28.isClientOnly();
        java.lang.Object obj32 = null;
        boolean boolean33 = accessToken28.equals(obj32);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str35 = accessToken28.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser36 = osiamConnector21.getCurrentUserBasic(accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(scopeSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Bearer " + "'", str35, "Bearer ");
    }

    @Test
    public void test15334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15334");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector11 = builder6.build();
        org.osiam.resources.scim.User user12 = null;
        org.osiam.client.oauth.AccessToken accessToken13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamConnector11.createUser(user12, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
    }

    @Test
    public void test15335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15335");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder10.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(403);
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        java.lang.String str22 = query21.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector5.createQueryBuilder(query21);
        org.osiam.resources.scim.UpdateGroup updateGroup25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken34 = builder31.build();
        java.lang.String str35 = accessToken34.toString();
        java.lang.String str36 = accessToken34.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group37 = osiamConnector5.updateGroup("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", updateGroup25, accessToken34);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str35, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test15336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15336");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.addScope(scope45);
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder40.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder13.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserName("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder54.setUserId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test15337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15337");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Cannot connect to server");
    }

    @Test
    public void test15338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15338");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET], refreshTokenId=org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=PATCH, userName=org.osiam.client.exception.UnauthorizedException: GET]");
    }

    @Test
    public void test15339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15339");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientSecret("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder15 = builder11.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientSecret("org.osiam.client.exception.OsiamClientException: ascending");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test15340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15340");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean1 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer3 = scopeDeserializer0.unwrappingDeserializer(nameTransformer2);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getNullValue();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
    }

    @Test
    public void test15341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15341");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getSortBy();
        java.lang.String str14 = query9.getFilter();
        java.lang.String str15 = query9.getSortBy();
        java.lang.String str16 = query9.toString();
        long long17 = query9.getStartIndex();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test15342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15342");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("refresh_token");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder7.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.addScope(scope24);
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder23.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder19.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder19.setRefreshToken("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        java.lang.String str36 = accessToken35.getUserId();
        java.lang.String str37 = accessToken35.toString();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.deleteResource("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", accessToken35);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]" + "'", str37, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
    }

    @Test
    public void test15343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15343");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConnectionInitializationException: Bearer , userId=, userName=org.osiam.client.exception.NoResultException: refresh_token]");
        int int2 = noResultException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 404 + "'", int2 == 404);
    }

    @Test
    public void test15344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15344");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.util.Date date26 = accessToken24.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder17.setExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder17.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder31.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        java.util.Date date49 = accessToken48.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder39.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder37.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder29.setExpiresAt(date49);
        java.lang.Class<?> wildcardClass53 = builder52.getClass();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test15345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15345");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.UpdateGroup updateGroup5 = null;
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("ME");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        boolean boolean21 = accessToken19.isClientOnly();
        java.lang.String str22 = accessToken19.getClientId();
        java.lang.String str23 = authService12.extractErrorMessageForbidden(accessToken19);
        java.lang.String str24 = accessToken19.getUserId();
        java.util.Date date25 = accessToken19.getRefreshTokenExpiresAt();
        java.lang.String str26 = accessToken19.getUserName();
        java.lang.String str27 = accessToken19.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group28 = osiamGroupService3.updateGroup("org.osiam.client.exception.ConflictException: PATCH", updateGroup5, accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Bearer " + "'", str27, "Bearer ");
    }

    @Test
    public void test15346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15346");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSerializer0.handledType();
        boolean boolean5 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer7 = scopeSerializer0.unwrappingSerializer(nameTransformer6);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper8 = null;
        com.fasterxml.jackson.databind.JavaType javaType9 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper8, javaType9);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer7);
    }

    @Test
    public void test15347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15347");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector osiamConnector6 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        java.lang.String str18 = query16.toString();
        org.osiam.client.query.Query query19 = query16.nextPage();
        java.lang.String str20 = query16.toString();
        int int21 = query16.getCount();
        org.osiam.client.query.Query query22 = query16.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector6.createQueryBuilder(query22);
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.descending("hi!");
        org.osiam.client.query.Query query33 = queryBuilder32.build();
        java.lang.String str34 = query33.toString();
        java.lang.String str35 = query33.getSortOrder();
        java.lang.String str36 = query33.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder(query33);
        java.lang.String str38 = query33.toString();
        java.lang.String str39 = query33.toString();
        org.osiam.client.query.QueryBuilder queryBuilder40 = new org.osiam.client.query.QueryBuilder(query33);
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        org.osiam.client.query.Query query42 = query41.nextPage();
        org.osiam.client.query.Query query43 = query42.previousPage();
        int int44 = query42.getCount();
        java.lang.String str45 = query42.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector6.createQueryBuilder(query42);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(osiamConnector6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "descending" + "'", str35, "descending");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str38, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertNotNull(query43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Authorization" + "'", str45, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder46);
    }

    @Test
    public void test15348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15348");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("GET POST PUT PATCH DELETE");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientRedirectUri("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test15349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15349");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.addScope(scope19);
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder18.addScope(scope21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.addScope(scope33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder30.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        org.osiam.client.oauth.AccessToken accessToken38 = builder36.build();
        java.lang.String str39 = osiamGroupService4.extractErrorMessageForbidden(accessToken38);
        javax.ws.rs.client.WebTarget webTarget40 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = osiamGroupService4.extractErrorMessageDefault("PATCH", statusType42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]" + "'", str39, "Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(webTarget40);
    }

    @Test
    public void test15350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15350");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        org.osiam.client.query.Query query12 = query9.nextPage();
        java.lang.String str13 = query9.toString();
        org.osiam.client.query.Query query14 = query9.nextPage();
        java.lang.String str15 = query14.toString();
        org.osiam.client.query.Query query16 = query14.nextPage();
        java.lang.String str17 = query16.getSortOrder();
        java.lang.String str18 = query16.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test15351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15351");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = osiamGroupService2.extractErrorMessageUnauthorized("Insufficient scopes: [GET, GET POST PUT PATCH DELETE, PUT]", statusType4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test15352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15352");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientId("Bearer ");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setClientId("refresh_token");
        org.osiam.client.OsiamConnector osiamConnector12 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        java.lang.String str17 = accessToken16.toString();
        java.lang.String str18 = accessToken16.getToken();
        boolean boolean19 = accessToken16.isExpired();
        java.lang.String str20 = accessToken16.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group21 = osiamConnector12.getGroup("org.osiam.client.exception.OsiamRequestException: descending", accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(osiamConnector12);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "client_credentials" + "'", str18, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test15353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15353");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
    }

    @Test
    public void test15354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15354");
        org.osiam.client.exception.ForbiddenException forbiddenException1 = new org.osiam.client.exception.ForbiddenException("ADMIN");
        int int2 = forbiddenException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 403 + "'", int2 == 403);
    }

    @Test
    public void test15355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15355");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str28 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        java.util.Date date29 = accessToken26.getExpiresAt();
        boolean boolean30 = accessToken26.isRefreshTokenExpired();
        java.lang.String str31 = accessToken26.getUserId();
        java.lang.String str32 = accessToken26.getType();
        java.lang.String str33 = osiamGroupService2.extractErrorMessageForbidden(accessToken26);
        javax.ws.rs.core.Response.StatusType statusType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = osiamGroupService2.extractErrorMessage("", statusType35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
    }

    @Test
    public void test15356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15356");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query13 = queryBuilder10.build();
        org.osiam.client.query.Query query14 = query13.nextPage();
        org.osiam.client.query.Query query15 = query14.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query15);
        int int17 = query15.getCount();
        java.lang.String str18 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder19 = osiamConnector5.createQueryBuilder(query15);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        java.lang.String str31 = accessToken26.getClientId();
        java.lang.String str32 = accessToken26.getType();
        boolean boolean33 = accessToken26.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList34 = osiamConnector5.getAllUsers(accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test15357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15357");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken20 = builder17.build();
        boolean boolean21 = accessToken20.isClientOnly();
        java.lang.String str22 = accessToken20.toString();
        org.osiam.client.AuthService.Builder builder24 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder36 = builder32.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService39 = builder36.build();
        org.osiam.client.AuthService.Builder builder41 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder43 = builder41.setClientId("ME");
        org.osiam.client.AuthService.Builder builder45 = builder43.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder51 = builder47.setClientId("");
        org.osiam.client.AuthService.Builder builder53 = builder47.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService54 = builder53.build();
        org.osiam.client.oauth.Scope scope56 = new org.osiam.client.oauth.Scope("");
        java.lang.String str57 = scope56.getValue();
        org.osiam.client.oauth.Scope scope59 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray60 = new org.osiam.client.oauth.Scope[] { scope56, scope59 };
        java.net.URI uRI61 = authService54.getAuthorizationUri(scopeArray60);
        java.net.URI uRI62 = authService39.getAuthorizationUri(scopeArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken63 = osiamConnector11.refreshAccessToken(accessToken20, scopeArray60);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(authService39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(authService54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(scopeArray60);
        org.junit.Assert.assertNotNull(uRI61);
        org.junit.Assert.assertNotNull(uRI62);
    }

    @Test
    public void test15358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15358");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str28 = osiamGroupService3.extractErrorMessageForbidden(accessToken22);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.util.Date date37 = accessToken35.getExpiresAt();
        boolean boolean38 = accessToken35.isRefreshTokenExpired();
        java.util.Date date39 = accessToken35.getExpiresAt();
        java.util.Date date40 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str41 = accessToken35.getUserId();
        java.util.Date date42 = accessToken35.getRefreshTokenExpiresAt();
        java.lang.String str43 = osiamGroupService3.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        java.util.Date date51 = accessToken50.getExpiresAt();
        java.lang.String str52 = accessToken50.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = accessToken50.getScopes();
        java.util.Date date54 = accessToken50.getRefreshTokenExpiresAt();
        java.lang.String str55 = osiamGroupService3.extractErrorMessageForbidden(accessToken50);
        javax.ws.rs.client.WebTarget webTarget56 = osiamGroupService3.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder57 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder63.descending("hi!");
        org.osiam.client.query.Query query66 = queryBuilder65.build();
        java.lang.String str67 = query66.toString();
        java.lang.String str68 = query66.getSortOrder();
        java.lang.String str69 = query66.getSortBy();
        java.lang.String str70 = query66.getFilter();
        java.lang.String str71 = query66.getSortOrder();
        java.lang.String str72 = query66.getAttributes();
        long long73 = query66.getStartIndex();
        org.osiam.client.oauth.AccessToken accessToken74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult75 = osiamGroupService3.searchResources(query66, accessToken74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(scopeSet53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget56);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(query66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str67, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "descending" + "'", str68, "descending");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "descending" + "'", str71, "descending");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Authorization" + "'", str72, "Authorization");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
    }

    @Test
    public void test15359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15359");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("Cannot connect to server");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException6 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", (java.lang.Throwable) connectionInitializationException5);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException7 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", (java.lang.Throwable) connectionInitializationException6);
        org.osiam.client.exception.OsiamClientException osiamClientException8 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.UnauthorizedException: PATCH", (java.lang.Throwable) connectionInitializationException6);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException9 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", (java.lang.Throwable) osiamClientException8);
        java.lang.Throwable[] throwableArray10 = connectionInitializationException9.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test15360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15360");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = accessToken6.getScopes();
        boolean boolean9 = accessToken6.isExpired();
        java.lang.String str10 = accessToken6.getRefreshToken();
        java.lang.String str11 = accessToken6.getUserId();
        java.lang.String str12 = accessToken6.getRefreshToken();
        boolean boolean13 = accessToken6.isRefreshTokenExpired();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test15361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15361");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService7 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService8 = builder1.build();
        org.osiam.resources.scim.User user10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken17.getScopes();
        boolean boolean20 = accessToken17.isClientOnly();
        java.lang.String str21 = accessToken17.getUserId();
        java.lang.String str22 = accessToken17.getToken();
        java.lang.String str23 = accessToken17.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user24 = osiamUserService8.replaceUser("POST", user10, accessToken17);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(osiamUserService7);
        org.junit.Assert.assertNotNull(osiamUserService8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(scopeSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Bearer " + "'", str22, "Bearer ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test15362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15362");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.getAttributes();
        long long16 = query9.getStartIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query17 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test15363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15363");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.toString();
        java.lang.String str14 = query12.getSortOrder();
        org.osiam.client.query.Query query15 = query12.nextPage();
        long long16 = query15.getStartIndex();
        java.lang.String str17 = query15.getSortBy();
        java.lang.String str18 = query15.getSortOrder();
        org.osiam.client.query.Query query19 = query15.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder(query15);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken29 = builder26.build();
        java.lang.String str30 = accessToken29.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet31 = accessToken29.getScopes();
        org.osiam.client.OsiamGroupService.Builder builder33 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService34 = builder33.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.lang.String str43 = accessToken41.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet44 = accessToken41.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer45 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean46 = scopeSerializer45.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        java.lang.String str56 = scope52.getValue();
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str59 = scope58.toString();
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str62 = scope61.getValue();
        java.lang.String str63 = scope61.getValue();
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException66 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean67 = scope64.equals((java.lang.Object) invalidAttributeException66);
        java.lang.String str68 = scope64.getValue();
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope70 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope71 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException74 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean75 = scope72.equals((java.lang.Object) invalidAttributeException74);
        org.osiam.client.oauth.Scope scope76 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope77 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope78 = org.osiam.client.oauth.Scope.GET;
        boolean boolean80 = scope78.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope81 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray82 = new org.osiam.client.oauth.Scope[] { scope51, scope52, scope57, scope58, scope60, scope61, scope64, scope69, scope70, scope71, scope72, scope76, scope77, scope78, scope81 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet83 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet83, scopeArray82);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder48.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet83);
        boolean boolean86 = scopeSerializer45.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet83);
        boolean boolean87 = accessToken41.equals((java.lang.Object) scopeSet83);
        java.lang.String str88 = osiamGroupService34.extractErrorMessageForbidden(accessToken41);
        java.util.Date date89 = accessToken41.getRefreshTokenExpiresAt();
        boolean boolean90 = accessToken29.equals((java.lang.Object) accessToken41);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult91 = osiamGroupService2.searchGroups(query15, accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 11L + "'", long16 == 11L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "descending" + "'", str18, "descending");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str30, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(scopeSet31);
        org.junit.Assert.assertNotNull(osiamGroupService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(scopeSet44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ME" + "'", str59, "ME");
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PATCH" + "'", str62, "PATCH");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PATCH" + "'", str63, "PATCH");
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "GET" + "'", str68, "GET");
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertNotNull(scope71);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(scope76);
        org.junit.Assert.assertNotNull(scope77);
        org.junit.Assert.assertNotNull(scope78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(scope81);
        org.junit.Assert.assertNotNull(scopeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Insufficient scopes: []" + "'", str88, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test15364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15364");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean5 = scopeSerializer4.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer7 = scopeSerializer4.unwrappingSerializer(nameTransformer6);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str21 = scope20.toString();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str24 = scope23.getValue();
        java.lang.String str25 = scope23.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        boolean boolean42 = scope40.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope13, scope14, scope19, scope20, scope22, scope23, scope26, scope31, scope32, scope33, scope34, scope38, scope39, scope40, scope43 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet45 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet45, scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder10.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean48 = scopeSetJsonSerializer7.isEmpty(serializerProvider8, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean49 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass50 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer51 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer52 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer53 = scopeSerializer0.unwrappingSerializer(nameTransformer52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        boolean boolean62 = accessToken60.isClientOnly();
        java.lang.String str63 = accessToken60.getClientId();
        java.lang.String str64 = accessToken60.getUserId();
        java.lang.String str65 = accessToken60.getClientId();
        java.lang.String str66 = accessToken60.getRefreshToken();
        java.lang.String str67 = accessToken60.getClientId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet68 = accessToken60.getScopes();
        boolean boolean69 = scopeSerializer0.isEmpty(scopeSet68);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ME" + "'", str21, "ME");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(scopeSetClass50);
        org.junit.Assert.assertNull(wildcardJsonSerializer51);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(scopeSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test15365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15365");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query39 = queryBuilder36.build();
        org.osiam.client.query.Query query40 = query39.nextPage();
        org.osiam.client.query.Query query41 = query40.previousPage();
        java.lang.String str42 = query40.getSortOrder();
        java.lang.String str43 = query40.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder44 = osiamConnector5.createQueryBuilder(query40);
        java.lang.String str45 = query40.getFilter();
        long long46 = query40.getStartIndex();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 11L + "'", long46 == 11L);
    }

    @Test
    public void test15366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15366");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.exception.UnauthorizedException unauthorizedException47 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int48 = unauthorizedException47.getHttpStatusCode();
        int int49 = unauthorizedException47.getHttpStatusCode();
        java.lang.Throwable[] throwableArray50 = unauthorizedException47.getSuppressed();
        boolean boolean51 = accessToken39.equals((java.lang.Object) unauthorizedException47);
        java.lang.String str52 = accessToken39.getType();
        java.util.Date date53 = accessToken39.getExpiresAt();
        java.util.Date date54 = accessToken39.getRefreshTokenExpiresAt();
        java.util.Date date55 = accessToken39.getExpiresAt();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 401 + "'", int48 == 401);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 401 + "'", int49 == 401);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15367");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder16.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.ascending("password");
        org.osiam.client.query.Query query25 = queryBuilder22.build();
        java.lang.String str26 = query25.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector9.createQueryBuilder(query25);
        org.osiam.resources.scim.UpdateGroup updateGroup29 = null;
        org.osiam.client.AuthService.Builder builder31 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientId("ME");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService36 = builder35.build();
        org.osiam.client.OsiamGroupService.Builder builder38 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService39 = builder38.build();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet48 = accessToken46.getScopes();
        java.lang.String str49 = osiamGroupService39.extractErrorMessageForbidden(accessToken46);
        boolean boolean50 = accessToken46.isClientOnly();
        java.lang.String str51 = authService36.extractErrorMessageForbidden(accessToken46);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken60 = builder57.build();
        java.lang.String str61 = accessToken60.toString();
        java.lang.String str62 = authService36.extractErrorMessageForbidden(accessToken60);
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        java.util.Date date70 = accessToken69.getExpiresAt();
        java.lang.String str71 = accessToken69.getRefreshToken();
        java.lang.String str72 = accessToken69.getType();
        java.lang.String str73 = accessToken69.getClientId();
        java.lang.String str74 = accessToken69.getUserName();
        java.lang.String str75 = authService36.extractErrorMessageForbidden(accessToken69);
        org.osiam.client.exception.UnauthorizedException unauthorizedException77 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int78 = unauthorizedException77.getHttpStatusCode();
        int int79 = unauthorizedException77.getHttpStatusCode();
        java.lang.Throwable[] throwableArray80 = unauthorizedException77.getSuppressed();
        boolean boolean81 = accessToken69.equals((java.lang.Object) unauthorizedException77);
        java.lang.String str82 = accessToken69.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet83 = accessToken69.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken69);
        java.lang.String str85 = accessToken69.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group86 = osiamConnector9.updateGroup("ascending", updateGroup29, accessToken69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(authService36);
        org.junit.Assert.assertNotNull(osiamGroupService39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(scopeSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str61, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Insufficient scopes: []" + "'", str75, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 401 + "'", int78 == 401);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 401 + "'", int79 == 401);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(scopeSet83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test15368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15368");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector.Builder builder10 = builder6.setResourceServerEndpoint("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector osiamConnector11 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        java.lang.String str20 = accessToken18.getUserName();
        boolean boolean21 = accessToken18.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken22 = osiamConnector11.validateAccessToken(accessToken18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test15369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15369");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        java.lang.String str21 = query20.toString();
        java.lang.String str22 = query20.toString();
        java.lang.String str23 = query20.toString();
        int int24 = query20.getCount();
        long long25 = query20.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector7.createQueryBuilder(query20);
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        org.osiam.client.query.Query query37 = queryBuilder35.build();
        java.lang.String str38 = query37.getSortBy();
        java.lang.String str39 = query37.getFilter();
        int int40 = query37.getCount();
        long long41 = query37.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector7.createQueryBuilder(query37);
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.toString();
        java.lang.String str54 = query52.toString();
        org.osiam.client.query.Query query55 = query52.nextPage();
        java.lang.String str56 = query52.toString();
        org.osiam.client.query.Query query57 = query52.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector7.createQueryBuilder(query57);
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector7.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder62 = new org.osiam.client.AuthService.Builder("PUT");
        org.osiam.client.AuthService authService63 = builder62.build();
        org.osiam.client.oauth.AccessToken.Builder builder65 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        boolean boolean71 = accessToken70.isRefreshTokenExpired();
        java.lang.String str72 = accessToken70.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder73 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder75 = queryBuilder73.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder77 = queryBuilder75.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder79 = queryBuilder75.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder81 = queryBuilder79.descending("hi!");
        org.osiam.client.query.Query query82 = queryBuilder81.build();
        java.lang.String str83 = query82.toString();
        java.lang.String str84 = query82.getSortOrder();
        java.lang.String str85 = query82.getSortBy();
        java.lang.String str86 = query82.getFilter();
        java.lang.String str87 = query82.toString();
        boolean boolean88 = accessToken70.equals((java.lang.Object) query82);
        java.util.Date date89 = accessToken70.getExpiresAt();
        java.lang.String str90 = accessToken70.getUserName();
        java.lang.String str91 = authService63.extractErrorMessageForbidden(accessToken70);
        java.lang.String str92 = accessToken70.getUserName();
        java.lang.String str93 = accessToken70.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group94 = osiamConnector7.getGroup("Query [attributes=Authorization, filter=org.osiam.client.exception.NoResultException: authorization_code, sortBy=org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10], sortOrder=ascending, startIndex=1, count=10]", accessToken70);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str21, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str53, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(authService63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder77);
        org.junit.Assert.assertNotNull(queryBuilder79);
        org.junit.Assert.assertNotNull(queryBuilder81);
        org.junit.Assert.assertNotNull(query82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str83, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "descending" + "'", str84, "descending");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str87, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Insufficient scopes: []" + "'", str91, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str93, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15370");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder14.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.startIndex((long) (byte) 10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(0);
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        org.osiam.client.query.Query query25 = query24.previousPage();
        org.osiam.client.query.Query query26 = query25.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder27 = osiamConnector5.createQueryBuilder(query25);
        java.lang.String str28 = query25.getFilter();
        int int29 = query25.getCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
    }

    @Test
    public void test15371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15371");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        boolean boolean15 = accessToken12.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("ADMIN", accessToken12);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test15372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15372");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getDescription();
        java.lang.String str4 = oAuthErrorMessage0.getDescription();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str6 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str7 = oAuthErrorMessage0.getDescription();
        java.lang.String str8 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str9 = oAuthErrorMessage0.getDescription();
        java.lang.String str10 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str11 = oAuthErrorMessage0.getDescription();
        java.lang.String str12 = oAuthErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test15373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15373");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setAuthServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test15374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15374");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector23 = builder18.build();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector31 = builder30.build();
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector31.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        org.osiam.client.query.QueryBuilder queryBuilder56 = osiamConnector31.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder57 = osiamConnector23.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector9.createQueryBuilder(query55);
        long long59 = query55.getStartIndex();
        java.lang.String str60 = query55.getSortBy();
        long long61 = query55.getStartIndex();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(osiamConnector31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
    }

    @Test
    public void test15375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15375");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService16 = builder13.build();
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder28 = builder24.setClientId("");
        org.osiam.client.AuthService.Builder builder30 = builder24.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService31 = builder30.build();
        org.osiam.client.oauth.Scope scope33 = new org.osiam.client.oauth.Scope("");
        java.lang.String str34 = scope33.getValue();
        org.osiam.client.oauth.Scope scope36 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope33, scope36 };
        java.net.URI uRI38 = authService31.getAuthorizationUri(scopeArray37);
        java.net.URI uRI39 = authService16.getAuthorizationUri(scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        java.lang.String str43 = accessToken42.toString();
        java.lang.String str44 = accessToken42.getToken();
        boolean boolean45 = accessToken42.isExpired();
        java.lang.String str46 = accessToken42.getClientId();
        boolean boolean47 = accessToken42.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet48 = accessToken42.getScopes();
        java.lang.String str49 = authService16.extractErrorMessageForbidden(accessToken42);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(authService31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertNotNull(uRI38);
        org.junit.Assert.assertNotNull(uRI39);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str43, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "client_credentials" + "'", str44, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(scopeSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
    }

    @Test
    public void test15376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15376");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setResourceServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder24 = builder18.setClientId("PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test15377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15377");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientId("hi!");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        java.lang.String str23 = query19.getFilter();
        java.lang.String str24 = query19.toString();
        java.lang.String str25 = query19.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder(query19);
        java.lang.String str27 = query19.getSortBy();
        long long28 = query19.getStartIndex();
        int int29 = query19.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder30 = osiamConnector9.createQueryBuilder(query19);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str24, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(queryBuilder30);
    }

    @Test
    public void test15378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15378");
        org.osiam.client.exception.UnauthorizedException unauthorizedException2 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.ConnectionInitializationException: ");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamClientException: ADMIN", (java.lang.Throwable) unauthorizedException2);
    }

    @Test
    public void test15379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15379");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = osiamConnector9.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder13 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder25 = builder21.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService28 = builder25.build();
        org.osiam.client.AuthService.Builder builder30 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientId("ME");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder40 = builder36.setClientId("");
        org.osiam.client.AuthService.Builder builder42 = builder36.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService43 = builder42.build();
        org.osiam.client.oauth.Scope scope45 = new org.osiam.client.oauth.Scope("");
        java.lang.String str46 = scope45.getValue();
        org.osiam.client.oauth.Scope scope48 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray49 = new org.osiam.client.oauth.Scope[] { scope45, scope48 };
        java.net.URI uRI50 = authService43.getAuthorizationUri(scopeArray49);
        java.net.URI uRI51 = authService28.getAuthorizationUri(scopeArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken52 = osiamConnector9.retrieveAccessToken(scopeArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(authService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(authService43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(scopeArray49);
        org.junit.Assert.assertNotNull(uRI50);
        org.junit.Assert.assertNotNull(uRI51);
    }

    @Test
    public void test15380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15380");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector21.createQueryBuilder();
        org.osiam.client.query.Query query23 = queryBuilder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query23);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
    }

    @Test
    public void test15381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15381");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        int int2 = conflictException1.getHttpStatusCode();
        java.lang.Throwable[] throwableArray3 = conflictException1.getSuppressed();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 409 + "'", int2 == 409);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test15382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15382");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.toString();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        java.util.Date date14 = accessToken9.getRefreshTokenExpiresAt();
        java.util.Date date15 = accessToken9.getRefreshTokenExpiresAt();
        boolean boolean16 = accessToken9.isClientOnly();
        boolean boolean17 = accessToken9.isClientOnly();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test15383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15383");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken13.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str19 = osiamGroupService2.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder22 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientId("ME");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService27 = builder26.build();
        org.osiam.client.OsiamGroupService.Builder builder29 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService30 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet39 = accessToken37.getScopes();
        java.lang.String str40 = osiamGroupService30.extractErrorMessageForbidden(accessToken37);
        boolean boolean41 = accessToken37.isClientOnly();
        java.lang.String str42 = authService27.extractErrorMessageForbidden(accessToken37);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken51 = builder48.build();
        java.lang.String str52 = accessToken51.toString();
        java.lang.String str53 = authService27.extractErrorMessageForbidden(accessToken51);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet54 = accessToken51.getScopes();
        org.osiam.client.OsiamConnector.Builder builder55 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder57 = builder55.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder59 = builder55.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        boolean boolean60 = accessToken51.equals((java.lang.Object) "org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.String str61 = osiamGroupService2.extractErrorMessageForbidden(accessToken51);
        javax.ws.rs.client.WebTarget webTarget62 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget63 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        java.lang.String str68 = accessToken67.toString();
        java.lang.String str69 = accessToken67.getUserId();
        java.lang.String str70 = accessToken67.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken67);
        java.lang.String str72 = accessToken67.getUserName();
        java.lang.String str73 = accessToken67.getToken();
        java.lang.String str74 = accessToken67.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group75 = osiamGroupService2.getGroup("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: client_credentials", accessToken67);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(authService27);
        org.junit.Assert.assertNotNull(osiamGroupService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(scopeSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str52, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeSet54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Insufficient scopes: []" + "'", str61, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget62);
        org.junit.Assert.assertNotNull(webTarget63);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str68, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "client_credentials" + "'", str70, "client_credentials");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "client_credentials" + "'", str73, "client_credentials");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test15384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15384");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeSetJsonDeserializer4.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty9 = scopeSetJsonDeserializer6.findBackReference("org.osiam.client.exception.OsiamClientException: descending");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.OsiamClientException: descending': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
    }

    @Test
    public void test15385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15385");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("hi!");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder3.setClientSecret("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: client_credentials");
        org.osiam.client.AuthService.Builder builder9 = builder3.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test15386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15386");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = builder1.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.AuthService.Builder builder6 = builder1.setClientSecret("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: PATCH");
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test15387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15387");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        java.lang.String str13 = accessToken10.getClientId();
        boolean boolean14 = accessToken10.isClientOnly();
        java.lang.String str15 = accessToken10.getClientId();
        java.lang.String str16 = accessToken10.getType();
        boolean boolean17 = accessToken10.isClientOnly();
        java.lang.String str18 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        boolean boolean19 = accessToken10.isClientOnly();
        boolean boolean20 = accessToken10.isRefreshTokenExpired();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test15388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15388");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.toString();
        org.osiam.client.query.Query query58 = query55.nextPage();
        java.lang.String str59 = query55.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder61 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.count((int) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder61.count((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
    }

    @Test
    public void test15389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15389");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortBy();
        org.osiam.client.query.Query query59 = query55.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.filter("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.count(409);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder62.attributes("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConflictException: , userId=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=], userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(query59);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
    }

    @Test
    public void test15390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15390");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("");
        org.osiam.client.AuthService.Builder builder9 = builder5.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("GET POST PUT PATCH DELETE");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder28 = builder24.setClientSecret("PATCH");
        org.osiam.client.AuthService authService29 = builder28.build();
        org.osiam.client.AuthService authService30 = builder28.build();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.addScope(scope34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder33.addScope(scope36);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setUserId("");
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.addScope(scope46);
        org.osiam.client.oauth.Scope scope49 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope51 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope[] scopeArray52 = new org.osiam.client.oauth.Scope[] { scope31, scope46, scope49, scope51 };
        java.net.URI uRI53 = authService30.getAuthorizationUri(scopeArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken54 = authService12.retrieveAccessToken("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", "org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", scopeArray52);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(authService29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scopeArray52);
        org.junit.Assert.assertNotNull(uRI53);
    }

    @Test
    public void test15391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15391");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setClientId("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("org.osiam.client.exception.ForbiddenException: Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder18.setAuthServerEndpoint("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test15392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15392");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test15393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15393");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        boolean boolean7 = scopeDeserializer0.isCachable();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test15394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15394");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService7.targetEndpoint;
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        java.lang.String str37 = accessToken32.getUserId();
        java.lang.String str38 = accessToken32.getClientId();
        java.lang.String str39 = osiamGroupService7.extractErrorMessageForbidden(accessToken32);
        boolean boolean40 = accessToken32.isRefreshTokenExpired();
        java.lang.String str41 = accessToken32.getRefreshToken();
        java.util.Date date42 = accessToken32.getExpiresAt();
        java.lang.String str43 = accessToken32.getRefreshToken();
        java.lang.String str44 = osiamGroupService2.extractErrorMessageForbidden(accessToken32);
        org.osiam.client.AuthService.Builder builder46 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientId("ME");
        org.osiam.client.AuthService.Builder builder50 = builder48.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService51 = builder50.build();
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        boolean boolean60 = accessToken58.isClientOnly();
        java.lang.String str61 = accessToken58.getClientId();
        java.lang.String str62 = authService51.extractErrorMessageForbidden(accessToken58);
        java.lang.String str63 = accessToken58.getUserId();
        java.lang.String str64 = accessToken58.getClientId();
        java.lang.String str65 = osiamGroupService2.extractErrorMessageForbidden(accessToken58);
        org.osiam.resources.scim.Group group67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date74 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setRefreshTokenExpiresAt(date74);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder73.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken78 = builder77.build();
        java.util.Date date79 = accessToken78.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder69.setRefreshTokenExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder69.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder69.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder86 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date87 = null;
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder86.setRefreshTokenExpiresAt(date87);
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder86.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken91 = builder90.build();
        boolean boolean92 = accessToken91.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet93 = accessToken91.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder94 = builder84.addScopes(scopeSet93);
        org.osiam.client.oauth.AccessToken accessToken95 = builder94.build();
        java.lang.String str96 = accessToken95.getType();
        boolean boolean97 = accessToken95.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group98 = osiamGroupService2.replaceResource("org.osiam.client.exception.NoResultException: authorization_code", group67, accessToken95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(authService51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Insufficient scopes: []" + "'", str65, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(accessToken78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(accessToken91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(scopeSet93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(accessToken95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "descending" + "'", str96, "descending");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test15395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15395");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.getSortOrder();
        java.lang.String str16 = query9.getSortOrder();
        java.lang.String str17 = query9.getAttributes();
        long long18 = query9.getStartIndex();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "descending" + "'", str16, "descending");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Authorization" + "'", str17, "Authorization");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test15396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15396");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientSecret("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("org.osiam.client.exception.ConnectionInitializationException: Bearer ");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientRedirectUri("org.osiam.client.exception.UnauthorizedException: client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder10.setResourceServerEndpoint("PATCH");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.util.Date date26 = accessToken25.getExpiresAt();
        java.lang.String str27 = accessToken25.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken25);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        boolean boolean37 = accessToken35.isClientOnly();
        java.lang.String str38 = accessToken35.getClientId();
        boolean boolean39 = accessToken35.isClientOnly();
        boolean boolean40 = accessToken25.equals((java.lang.Object) accessToken35);
        org.osiam.client.query.QueryBuilder queryBuilder41 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder41.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder47.descending("hi!");
        org.osiam.client.query.Query query50 = queryBuilder49.build();
        org.osiam.client.query.Query query51 = queryBuilder49.build();
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder49.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean54 = accessToken25.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str55 = accessToken25.getRefreshToken();
        java.util.Date date56 = accessToken25.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector17.deleteUser("", accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(query50);
        org.junit.Assert.assertNotNull(query51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15397");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector17 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.getAttributes();
        java.lang.String str29 = query27.toString();
        java.lang.String str30 = query27.getSortOrder();
        org.osiam.client.query.Query query31 = query27.nextPage();
        java.lang.String str32 = query27.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.query.QueryBuilder queryBuilder34 = osiamConnector17.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder38 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientId("ME");
        org.osiam.client.AuthService.Builder builder42 = builder38.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder44 = builder38.setClientRedirectUri("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService authService45 = builder38.build();
        org.osiam.client.AuthService.Builder builder47 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientId("ME");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder57 = builder53.setClientId("");
        org.osiam.client.AuthService.Builder builder59 = builder53.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService60 = builder59.build();
        org.osiam.client.oauth.Scope scope62 = new org.osiam.client.oauth.Scope("");
        java.lang.String str63 = scope62.getValue();
        org.osiam.client.oauth.Scope scope65 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray66 = new org.osiam.client.oauth.Scope[] { scope62, scope65 };
        java.net.URI uRI67 = authService60.getAuthorizationUri(scopeArray66);
        java.net.URI uRI68 = authService45.getAuthorizationUri(scopeArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken69 = osiamConnector17.retrieveAccessToken("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", "org.osiam.client.exception.ConnectionInitializationException: ", scopeArray66);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Authorization" + "'", str28, "Authorization");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(authService45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(authService60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(scopeArray66);
        org.junit.Assert.assertNotNull(uRI67);
        org.junit.Assert.assertNotNull(uRI68);
    }

    @Test
    public void test15398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15398");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty7 = scopeDeserializer0.findBackReference("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
    }

    @Test
    public void test15399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15399");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder0.build();
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        boolean boolean22 = accessToken20.isClientOnly();
        java.lang.String str23 = accessToken20.getClientId();
        java.lang.String str24 = authService13.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        java.util.Date date36 = accessToken35.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder26.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder26.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder26.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet50 = accessToken48.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder41.addScopes(scopeSet50);
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        boolean boolean53 = accessToken52.isRefreshTokenExpired();
        java.lang.String str54 = accessToken52.getType();
        java.lang.String str55 = authService13.extractErrorMessageForbidden(accessToken52);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken52);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group57 = osiamConnector5.createGroup(group6, accessToken52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(scopeSet50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "descending" + "'", str54, "descending");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
    }

    @Test
    public void test15400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15400");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.OsiamConnector osiamConnector16 = builder10.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = osiamConnector16.createQueryBuilder();
        org.osiam.resources.scim.Group group19 = null;
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getClientId();
        java.lang.String str37 = authService26.extractErrorMessageForbidden(accessToken33);
        java.lang.String str38 = accessToken33.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        java.lang.String str47 = accessToken45.getUserId();
        boolean boolean48 = accessToken45.isRefreshTokenExpired();
        boolean boolean49 = accessToken33.equals((java.lang.Object) accessToken45);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group50 = osiamConnector16.replaceGroup("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH", group19, accessToken33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(osiamConnector16);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test15401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15401");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) (byte) 0, "org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
    }

    @Test
    public void test15402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15402");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        boolean boolean7 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeDeserializer0.getNullValue();
        boolean boolean10 = scopeDeserializer0.isCachable();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test15403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15403");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.OsiamGroupService.Builder builder23 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService24 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet33 = accessToken31.getScopes();
        java.lang.String str34 = osiamGroupService24.extractErrorMessageForbidden(accessToken31);
        boolean boolean35 = accessToken31.isClientOnly();
        java.lang.String str36 = authService21.extractErrorMessageForbidden(accessToken31);
        java.lang.String str37 = accessToken31.getUserId();
        java.lang.String str38 = accessToken31.getToken();
        java.lang.String str39 = osiamGroupService3.extractErrorMessageForbidden(accessToken31);
        boolean boolean40 = accessToken31.isRefreshTokenExpired();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(osiamGroupService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(scopeSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Bearer " + "'", str38, "Bearer ");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test15404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15404");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder7 = builder1.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder9 = builder1.setClientId("org.osiam.client.exception.ConflictException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test15405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15405");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Authorization");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.lang.String str21 = accessToken19.getClientId();
        boolean boolean22 = accessToken9.equals((java.lang.Object) accessToken19);
        java.lang.String str23 = accessToken19.getUserId();
        java.lang.String str24 = accessToken19.getToken();
        java.lang.String str25 = accessToken19.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser26 = osiamUserService2.getCurrentUserBasic(accessToken19);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Bearer " + "'", str24, "Bearer ");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test15406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15406");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("client_credentials");
        java.lang.Throwable[] throwableArray2 = noResultException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test15407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15407");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getDescription();
        java.lang.String str4 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str6 = oAuthErrorMessage0.getDescription();
        java.lang.String str7 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str8 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str9 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str10 = oAuthErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test15408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15408");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientRedirectUri("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder13 = builder7.setClientSecret("authorization_code");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientSecret("GET POST PUT PATCH DELETE");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientRedirectUri("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test15409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15409");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.Query query8 = null;
        org.osiam.client.OsiamGroupService.Builder builder10 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder10.build();
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder10.build();
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService12.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService12.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken21.getScopes();
        java.lang.String str25 = osiamGroupService12.extractErrorMessageForbidden(accessToken21);
        java.lang.String str26 = accessToken21.getUserId();
        java.lang.String str27 = accessToken21.getClientId();
        java.lang.String str28 = accessToken21.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult29 = osiamConnector7.searchGroups(query8, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given query must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str28, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test15410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15410");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getRefreshToken();
        java.lang.String str13 = accessToken10.getType();
        java.util.Date date14 = accessToken10.getExpiresAt();
        java.lang.String str15 = accessToken10.getUserId();
        java.util.Date date16 = accessToken10.getExpiresAt();
        java.util.Date date17 = accessToken10.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15411");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder26.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder14.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder14.setUserId("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setType("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService.Builder builder42 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService43 = builder42.build();
        org.osiam.client.OsiamGroupService osiamGroupService44 = builder42.build();
        javax.ws.rs.client.WebTarget webTarget45 = osiamGroupService44.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget46 = osiamGroupService44.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.lang.String str55 = accessToken53.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet56 = accessToken53.getScopes();
        java.lang.String str57 = osiamGroupService44.extractErrorMessageForbidden(accessToken53);
        java.lang.String str58 = accessToken53.getUserId();
        java.util.Date date59 = accessToken53.getRefreshTokenExpiresAt();
        java.util.Date date60 = accessToken53.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder40.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder40.setUserId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder63.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder63.setType("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken72 = builder71.build();
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder71.setClientId("Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(osiamGroupService43);
        org.junit.Assert.assertNotNull(osiamGroupService44);
        org.junit.Assert.assertNotNull(webTarget45);
        org.junit.Assert.assertNotNull(webTarget46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(scopeSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(accessToken72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test15412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15412");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.Query query14 = queryBuilder13.build();
        java.lang.String str15 = query14.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test15413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15413");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        long long13 = query9.getStartIndex();
        java.lang.String str14 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str16 = query9.getSortOrder();
        int int17 = query9.getCount();
        java.lang.String str18 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder19 = new org.osiam.client.query.QueryBuilder(query9);
        long long20 = query9.getStartIndex();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "descending" + "'", str16, "descending");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test15414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15414");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.resources.scim.User user5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getClientId();
        boolean boolean26 = accessToken22.isClientOnly();
        boolean boolean27 = accessToken12.equals((java.lang.Object) accessToken22);
        java.util.Date date28 = accessToken22.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user29 = osiamUserService4.createUser(user5, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test15415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15415");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken19.getScopes();
        java.lang.String str22 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        boolean boolean23 = accessToken19.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        java.lang.String str25 = accessToken19.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser26 = osiamConnector9.getCurrentUserBasic(accessToken19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(scopeSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
    }

    @Test
    public void test15416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15416");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        java.lang.Class<?> wildcardClass7 = scopeDeserializer0.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer0.unwrappingDeserializer(nameTransformer9);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty12 = scopeSetJsonDeserializer10.findBackReference("org.osiam.client.exception.OsiamClientException: ADMIN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.OsiamClientException: ADMIN': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
    }

    @Test
    public void test15417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15417");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.util.Date date16 = accessToken14.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        org.osiam.client.query.Query query29 = query26.nextPage();
        boolean boolean30 = accessToken14.equals((java.lang.Object) query26);
        java.lang.String str31 = accessToken14.getType();
        java.lang.String str32 = accessToken14.getType();
        java.lang.String str33 = accessToken14.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamGroupService4.replaceGroup("Query [attributes=Authorization, filter=org.osiam.client.exception.ForbiddenException: hi!, sortBy=ME, sortOrder=descending, startIndex=90, count=10]", group7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test15418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15418");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.ascending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder2.count((int) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder2.count((int) (short) 10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.ascending("org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
    }

    @Test
    public void test15419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15419");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientId("");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.Query query10 = null;
        org.osiam.client.oauth.AccessToken accessToken11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult12 = osiamConnector9.searchUsers(query10, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given query must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
    }

    @Test
    public void test15420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15420");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        java.lang.String str19 = query18.toString();
        java.lang.String str20 = query18.getSortOrder();
        java.lang.String str21 = query18.getSortBy();
        java.lang.String str22 = query18.getFilter();
        java.lang.String str23 = query18.getSortOrder();
        java.lang.String str24 = query18.getAttributes();
        boolean boolean25 = accessToken6.equals((java.lang.Object) query18);
        java.lang.String str26 = accessToken6.getToken();
        boolean boolean27 = accessToken6.isClientOnly();
        boolean boolean28 = accessToken6.isClientOnly();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "descending" + "'", str23, "descending");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Authorization" + "'", str24, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Bearer " + "'", str26, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test15421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15421");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ConflictException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.addScope(scope5);
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder4.addScope(scope7);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken23.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList26 = osiamUserService2.getAllUsers(accessToken23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(scopeSet24);
    }

    @Test
    public void test15422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15422");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConnectionInitializationException: PATCH, userId=org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]]");
    }

    @Test
    public void test15423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15423");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector osiamConnector11 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = osiamConnector11.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = osiamConnector11.createQueryBuilder();
        org.osiam.resources.scim.UpdateUser updateUser15 = null;
        org.osiam.client.AuthService.Builder builder17 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.util.Date date28 = accessToken27.getExpiresAt();
        java.lang.String str29 = accessToken27.getRefreshToken();
        java.lang.String str30 = accessToken27.getType();
        java.lang.String str31 = accessToken27.getClientId();
        java.lang.String str32 = accessToken27.getUserName();
        java.lang.String str33 = accessToken27.toString();
        java.lang.String str34 = accessToken27.getUserName();
        java.lang.String str35 = authService20.extractErrorMessageForbidden(accessToken27);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserId();
        java.lang.String str45 = accessToken42.getClientId();
        boolean boolean46 = accessToken42.isClientOnly();
        java.lang.String str47 = accessToken42.getRefreshToken();
        java.lang.String str48 = authService20.extractErrorMessageForbidden(accessToken42);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken42);
        java.lang.String str50 = accessToken42.getToken();
        boolean boolean51 = accessToken42.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user52 = osiamConnector11.updateUser("org.osiam.client.exception.UnauthorizedException: ", updateUser15, accessToken42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(authService20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str33, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Bearer " + "'", str50, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test15424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15424");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        boolean boolean28 = accessToken26.isClientOnly();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserName("Authorization");
        boolean boolean47 = accessToken26.equals((java.lang.Object) builder44);
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.addScope(scope50);
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        java.lang.String str56 = scope52.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder49.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.addScope(scope64);
        org.osiam.client.oauth.GrantType grantType66 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str67 = grantType66.getUrlParam();
        boolean boolean68 = scope64.equals((java.lang.Object) grantType66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder44.addScope(scope64);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder17.addScope(scope64);
        java.lang.String str71 = scope64.toString();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + grantType66 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType66.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "client_credentials" + "'", str67, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PATCH" + "'", str71, "PATCH");
    }

    @Test
    public void test15425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15425");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessage("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test15426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15426");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientSecret("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder15 = builder11.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.AuthService.Builder builder17 = builder11.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientRedirectUri("Insufficient scopes: [GET, GET POST PUT PATCH DELETE, PUT]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test15427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15427");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count((int) (short) -1);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.startIndex(10L);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.attributes("org.osiam.client.exception.NoResultException: ME");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
    }

    @Test
    public void test15428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15428");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.startIndex((long) (byte) 10);
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        org.osiam.client.query.Query query18 = query16.nextPage();
        java.lang.String str19 = query16.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]" + "'", str17, "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test15429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15429");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(scopeSet8);
    }

    @Test
    public void test15430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15430");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.Query query18 = query9.nextPage();
        java.lang.String str19 = query9.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str21 = query9.getAttributes();
        java.lang.String str22 = query9.getFilter();
        org.osiam.client.query.Query query23 = query9.nextPage();
        java.lang.String str24 = query23.toString();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str24, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
    }

    @Test
    public void test15431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15431");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.lang.String str17 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        java.util.Date date18 = accessToken15.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean21 = accessToken15.equals((java.lang.Object) scope20);
        java.lang.String str22 = accessToken15.getRefreshToken();
        java.lang.String str23 = accessToken15.getUserName();
        java.util.Date date24 = accessToken15.getExpiresAt();
        java.lang.String str25 = accessToken15.getType();
        boolean boolean26 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken15.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser28 = osiamUserService4.getCurrentUserBasic(accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
    }

    @Test
    public void test15432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15432");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.util.Date date29 = accessToken10.getExpiresAt();
        java.lang.String str30 = accessToken10.getUserName();
        java.lang.String str31 = osiamGroupService2.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        boolean boolean40 = accessToken38.isClientOnly();
        java.lang.String str41 = accessToken38.getClientId();
        boolean boolean42 = accessToken38.isClientOnly();
        java.lang.String str43 = accessToken38.getToken();
        java.lang.String str44 = accessToken38.getToken();
        boolean boolean45 = accessToken38.isRefreshTokenExpired();
        java.lang.String str46 = osiamGroupService2.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.AuthService.Builder builder49 = new org.osiam.client.AuthService.Builder("PUT");
        org.osiam.client.AuthService authService50 = builder49.build();
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.lang.String str59 = accessToken57.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder66.descending("hi!");
        org.osiam.client.query.Query query69 = queryBuilder68.build();
        java.lang.String str70 = query69.toString();
        java.lang.String str71 = query69.getSortOrder();
        java.lang.String str72 = query69.getSortBy();
        java.lang.String str73 = query69.getFilter();
        java.lang.String str74 = query69.toString();
        boolean boolean75 = accessToken57.equals((java.lang.Object) query69);
        java.util.Date date76 = accessToken57.getExpiresAt();
        java.lang.String str77 = accessToken57.getUserName();
        java.lang.String str78 = authService50.extractErrorMessageForbidden(accessToken57);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group79 = osiamGroupService2.getGroup("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", accessToken57);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Bearer " + "'", str43, "Bearer ");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Bearer " + "'", str44, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(authService50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(query69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str70, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "descending" + "'", str71, "descending");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str74, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Insufficient scopes: []" + "'", str78, "Insufficient scopes: []");
    }

    @Test
    public void test15433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15433");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getRefreshTokenExpiresAt();
        java.lang.String str11 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.core.Response.StatusType statusType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = osiamGroupService2.extractErrorMessageUnauthorized("Query [attributes=Authorization, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=ascending, startIndex=1, count=10]", statusType13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Insufficient scopes: []" + "'", str11, "Insufficient scopes: []");
    }

    @Test
    public void test15434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15434");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getAttributes();
        int int19 = query15.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder20 = osiamConnector5.createQueryBuilder(query15);
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        java.lang.String str35 = accessToken33.getRefreshToken();
        java.lang.String str36 = accessToken33.getType();
        java.lang.String str37 = accessToken33.getClientId();
        java.lang.String str38 = accessToken33.getUserName();
        java.lang.String str39 = accessToken33.toString();
        java.lang.String str40 = accessToken33.getUserName();
        java.lang.String str41 = authService26.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        java.util.Date date49 = accessToken48.getExpiresAt();
        java.lang.String str50 = accessToken48.getRefreshToken();
        boolean boolean51 = accessToken48.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken48);
        java.lang.String str53 = authService26.extractErrorMessageForbidden(accessToken48);
        org.osiam.client.helper.ScopeSerializer scopeSerializer54 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean55 = scopeSerializer54.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer56 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer57 = scopeSerializer54.unwrappingSerializer(nameTransformer56);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider58 = null;
        org.osiam.client.OsiamGroupService.Builder builder60 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService61 = builder60.build();
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken68 = builder67.build();
        boolean boolean69 = accessToken68.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet70 = accessToken68.getScopes();
        java.lang.String str71 = osiamGroupService61.extractErrorMessageForbidden(accessToken68);
        boolean boolean72 = accessToken68.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet73 = accessToken68.getScopes();
        boolean boolean74 = scopeSerializer54.isEmpty(serializerProvider58, scopeSet73);
        boolean boolean75 = accessToken48.equals((java.lang.Object) scopeSerializer54);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group76 = osiamConnector5.getGroup("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer57);
        org.junit.Assert.assertNotNull(osiamGroupService61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(scopeSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Insufficient scopes: []" + "'", str71, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(scopeSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test15435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15435");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortOrder();
        java.lang.String str16 = query13.getSortBy();
        java.lang.String str17 = query13.getFilter();
        java.lang.String str18 = query13.getSortOrder();
        java.lang.String str19 = query13.getAttributes();
        java.lang.String str20 = query13.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder(query13);
        java.lang.String str22 = query13.getAttributes();
        org.osiam.client.query.Query query23 = query13.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector3.createQueryBuilder(query13);
        org.osiam.resources.scim.Group group26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getRefreshToken();
        boolean boolean37 = accessToken33.isExpired();
        boolean boolean38 = accessToken33.isRefreshTokenExpired();
        java.lang.String str39 = accessToken33.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group41 = osiamConnector3.replaceGroup("org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", group26, accessToken33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "descending" + "'", str18, "descending");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Authorization" + "'", str19, "Authorization");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Authorization" + "'", str22, "Authorization");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Bearer " + "'", str39, "Bearer ");
    }

    @Test
    public void test15436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15436");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = osiamGroupService4.extractErrorMessage("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
    }

    @Test
    public void test15437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15437");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        java.lang.String str14 = accessToken11.getType();
        java.lang.String str15 = accessToken11.getClientId();
        java.lang.String str16 = accessToken11.getUserName();
        java.lang.String str17 = accessToken11.toString();
        java.lang.String str18 = accessToken11.getUserName();
        java.lang.String str19 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getRefreshToken();
        boolean boolean29 = accessToken26.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str31 = authService4.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken38);
        java.util.Date date40 = accessToken38.getExpiresAt();
        boolean boolean41 = accessToken38.isClientOnly();
        boolean boolean42 = accessToken38.isClientOnly();
        java.lang.String str43 = authService4.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.lang.String str52 = accessToken50.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder53 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder55.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.descending("hi!");
        org.osiam.client.query.Query query62 = queryBuilder61.build();
        java.lang.String str63 = query62.toString();
        java.lang.String str64 = query62.getSortOrder();
        java.lang.String str65 = query62.getSortBy();
        java.lang.String str66 = query62.getFilter();
        java.lang.String str67 = query62.getSortOrder();
        java.lang.String str68 = query62.getAttributes();
        boolean boolean69 = accessToken50.equals((java.lang.Object) query62);
        org.osiam.client.OsiamConnector.Builder builder70 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder72 = builder70.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder74 = builder72.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder76 = builder74.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder78 = builder74.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder80 = builder74.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder82 = builder80.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder84 = builder80.setClientRedirectUri("PUT");
        boolean boolean85 = accessToken50.equals((java.lang.Object) builder84);
        java.lang.String str86 = accessToken50.getClientId();
        java.lang.String str87 = accessToken50.getToken();
        java.lang.String str88 = accessToken50.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken89 = authService4.validateAccessToken(accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str17, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(query62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str63, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "descending" + "'", str64, "descending");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "descending" + "'", str67, "descending");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Authorization" + "'", str68, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Bearer " + "'", str87, "Bearer ");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test15438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15438");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.util.Date date29 = accessToken10.getExpiresAt();
        java.lang.String str30 = accessToken10.getUserName();
        java.lang.String str31 = osiamGroupService2.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        boolean boolean40 = accessToken38.isClientOnly();
        java.lang.String str41 = accessToken38.getClientId();
        boolean boolean42 = accessToken38.isClientOnly();
        java.lang.String str43 = accessToken38.getToken();
        java.lang.String str44 = accessToken38.getToken();
        boolean boolean45 = accessToken38.isRefreshTokenExpired();
        java.lang.String str46 = osiamGroupService2.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.AuthService.Builder builder49 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientSecret("");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService58 = builder55.build();
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        boolean boolean66 = accessToken65.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet67 = accessToken65.getScopes();
        boolean boolean68 = accessToken65.isExpired();
        java.lang.String str69 = accessToken65.getRefreshToken();
        java.lang.String str70 = accessToken65.getUserId();
        java.lang.String str71 = accessToken65.getRefreshToken();
        java.lang.String str72 = authService58.extractErrorMessageForbidden(accessToken65);
        java.lang.String str73 = accessToken65.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group74 = osiamGroupService2.getResource("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: PATCH", accessToken65);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Bearer " + "'", str43, "Bearer ");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Bearer " + "'", str44, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(authService58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(scopeSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Insufficient scopes: []" + "'", str72, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test15439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15439");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("refresh_token");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getClientId();
        boolean boolean28 = accessToken24.isClientOnly();
        boolean boolean29 = accessToken14.equals((java.lang.Object) accessToken24);
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.descending("hi!");
        org.osiam.client.query.Query query39 = queryBuilder38.build();
        org.osiam.client.query.Query query40 = queryBuilder38.build();
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.ascending("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        boolean boolean43 = accessToken14.equals((java.lang.Object) "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        java.lang.String str44 = accessToken14.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.checkAndHandleResponse("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388", statusType7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test15440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15440");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
    }

    @Test
    public void test15441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15441");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        long long38 = query34.getStartIndex();
        org.osiam.client.query.Query query39 = query34.nextPage();
        org.osiam.client.query.Query query40 = query39.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder41 = new org.osiam.client.query.QueryBuilder(query39);
        org.osiam.client.query.Query query42 = query39.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector23.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(52);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder43.descending("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: ADMIN");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
    }

    @Test
    public void test15442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15442");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: PATCH");
    }

    @Test
    public void test15443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15443");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("org.osiam.client.exception.InvalidAttributeException: refresh_token");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        org.osiam.resources.scim.UpdateGroup updateGroup13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = accessToken20.getUserId();
        java.lang.String str23 = accessToken20.getToken();
        java.lang.String str24 = accessToken20.getClientId();
        java.lang.String str25 = accessToken20.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group26 = osiamConnector11.updateGroup("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", updateGroup13, accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
    }

    @Test
    public void test15444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15444");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        java.lang.String str2 = scope1.toString();
        java.lang.String str3 = scope1.toString();
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        java.util.Date date17 = accessToken14.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean20 = accessToken14.equals((java.lang.Object) scope19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        boolean boolean29 = accessToken27.isClientOnly();
        java.lang.String str30 = accessToken27.getClientId();
        boolean boolean31 = accessToken27.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.addScope(scope34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder33.addScope(scope36);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setUserName("Authorization");
        boolean boolean48 = accessToken27.equals((java.lang.Object) builder45);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.addScope(scope51);
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException55 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean56 = scope53.equals((java.lang.Object) invalidAttributeException55);
        java.lang.String str57 = scope53.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder50.addScope(scope53);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.addScope(scope65);
        org.osiam.client.oauth.GrantType grantType67 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str68 = grantType67.getUrlParam();
        boolean boolean69 = scope65.equals((java.lang.Object) grantType67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder45.addScope(scope65);
        boolean boolean71 = scope19.equals((java.lang.Object) builder70);
        java.lang.String str72 = scope19.getValue();
        java.lang.String str73 = scope19.getValue();
        boolean boolean74 = scope1.equals((java.lang.Object) str73);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]" + "'", str2, "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]" + "'", str3, "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GET" + "'", str57, "GET");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + grantType67 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType67.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "client_credentials" + "'", str68, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ADMIN" + "'", str72, "ADMIN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ADMIN" + "'", str73, "ADMIN");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test15445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15445");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getFilter();
        java.lang.String str31 = query27.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector17.createQueryBuilder(query27);
        java.lang.String str33 = query27.getSortBy();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
    }

    @Test
    public void test15446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15446");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken12.getScopes();
        java.lang.String str15 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        boolean boolean16 = accessToken12.isExpired();
        java.lang.String str17 = osiamGroupService2.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.core.Response.StatusType statusType19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.addScope(scope22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException26 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean27 = scope24.equals((java.lang.Object) invalidAttributeException26);
        java.lang.String str28 = scope24.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder21.addScope(scope24);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]", statusType19, accessToken34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GET" + "'", str28, "GET");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test15447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15447");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken16 = builder13.build();
        org.osiam.client.oauth.AccessToken accessToken17 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        java.lang.String str19 = accessToken17.getUserName();
        org.osiam.client.exception.ForbiddenException forbiddenException21 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray22 = forbiddenException21.getSuppressed();
        boolean boolean23 = accessToken17.equals((java.lang.Object) forbiddenException21);
        java.lang.String str24 = accessToken17.getType();
        java.lang.String str25 = osiamGroupService7.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.OsiamGroupService.Builder builder27 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        java.util.Date date36 = accessToken35.getExpiresAt();
        java.lang.String str37 = accessToken35.getRefreshToken();
        boolean boolean38 = accessToken35.isClientOnly();
        java.lang.String str39 = osiamGroupService28.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        java.util.Date date47 = accessToken46.getExpiresAt();
        java.lang.String str48 = accessToken46.getUserName();
        java.util.Date date49 = accessToken46.getRefreshTokenExpiresAt();
        java.lang.String str50 = osiamGroupService28.extractErrorMessageForbidden(accessToken46);
        java.lang.String str51 = accessToken46.getToken();
        java.lang.String str52 = accessToken46.getClientId();
        java.lang.String str53 = accessToken46.getUserId();
        java.lang.String str54 = accessToken46.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList55 = osiamGroupService7.getAllGroups(accessToken46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Bearer " + "'", str51, "Bearer ");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test15448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15448");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortOrder();
        java.lang.String str16 = query13.getSortBy();
        java.lang.String str17 = query13.getFilter();
        java.lang.String str18 = query13.getSortOrder();
        java.lang.String str19 = query13.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder(query13);
        long long21 = query13.getStartIndex();
        org.osiam.client.query.Query query22 = query13.nextPage();
        long long23 = query22.getStartIndex();
        int int24 = query22.getCount();
        org.osiam.client.query.Query query25 = query22.previousPage();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet34 = accessToken32.getScopes();
        boolean boolean35 = accessToken32.isClientOnly();
        java.lang.Object obj36 = null;
        boolean boolean37 = accessToken32.equals(obj36);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult40 = osiamGroupService2.searchGroups(query25, accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "descending" + "'", str18, "descending");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Authorization" + "'", str19, "Authorization");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 11L + "'", long23 == 11L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(scopeSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test15449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15449");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken8 = builder5.build();
        java.lang.String str9 = accessToken8.getClientId();
        org.osiam.client.OsiamConnector.Builder builder10 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.toString();
        java.lang.String str30 = query27.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector17.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.attributes("ME");
        org.osiam.client.query.Query query45 = queryBuilder42.build();
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder42.count((-1));
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder42.startIndex((long) (short) 100);
        boolean boolean50 = accessToken8.equals((java.lang.Object) queryBuilder49);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken8);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test15450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15450");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getRefreshToken();
        boolean boolean10 = accessToken6.isExpired();
        boolean boolean11 = accessToken6.isExpired();
        java.lang.String str12 = accessToken6.toString();
        org.osiam.client.OsiamConnector.Builder builder13 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder17 = builder15.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder19 = builder17.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder21 = builder17.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder23 = builder21.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder25 = builder23.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder27 = builder25.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        boolean boolean28 = accessToken6.equals((java.lang.Object) builder27);
        org.osiam.client.OsiamConnector.Builder builder30 = builder27.setClientSecret("org.osiam.client.exception.ForbiddenException: DELETE");
        org.osiam.client.OsiamConnector.Builder builder32 = builder27.setClientSecret("org.osiam.client.exception.ForbiddenException: DELETE");
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setClientSecret("authorization_code");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test15451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15451");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.AuthService.Builder builder7 = builder3.setClientSecret("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientSecret("Query [attributes=Authorization, filter=null, sortBy=ME, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test15452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15452");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken8 = builder7.build();
        java.lang.String str9 = accessToken8.toString();
        java.lang.String str10 = accessToken8.getUserId();
        java.lang.String str11 = accessToken8.getToken();
        java.util.Date date12 = accessToken8.getExpiresAt();
        boolean boolean13 = accessToken8.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamUserService3.updateUser("org.osiam.client.exception.InvalidAttributeException: 2024-03-22T13:51:20.388", updateUser5, accessToken8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str9, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "client_credentials" + "'", str11, "client_credentials");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test15453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15453");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        long long38 = query34.getStartIndex();
        org.osiam.client.query.Query query39 = query34.nextPage();
        org.osiam.client.query.Query query40 = query39.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder41 = new org.osiam.client.query.QueryBuilder(query39);
        org.osiam.client.query.Query query42 = query39.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector23.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder44 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.descending("hi!");
        org.osiam.client.query.Query query53 = queryBuilder52.build();
        java.lang.String str54 = query53.toString();
        java.lang.String str55 = query53.getSortOrder();
        java.lang.String str56 = query53.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder57 = new org.osiam.client.query.QueryBuilder(query53);
        org.osiam.client.query.Query query58 = query53.nextPage();
        java.lang.String str59 = query53.toString();
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder(query53);
        java.lang.String str61 = query53.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder62 = osiamConnector23.createQueryBuilder(query53);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "descending" + "'", str55, "descending");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(query58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str59, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(queryBuilder62);
    }

    @Test
    public void test15454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15454");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder15.setType("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshToken("ME");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setClientId("org.osiam.client.exception.InvalidAttributeException: authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserName("Query [attributes=Authorization, filter=org.osiam.client.exception.NoResultException: authorization_code, sortBy=org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10], sortOrder=ascending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test15455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15455");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet41 = accessToken39.getScopes();
        java.util.Date date42 = accessToken39.getExpiresAt();
        boolean boolean43 = accessToken39.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(scopeSet41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test15456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15456");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.startIndex(0L);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
    }

    @Test
    public void test15457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15457");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test15458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15458");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientSecret("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder15 = builder11.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test15459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15459");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException2 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]", (java.lang.Throwable) connectionInitializationException2);
        org.osiam.client.exception.OsiamRequestException osiamRequestException8 = new org.osiam.client.exception.OsiamRequestException((int) ' ', "POST");
        org.osiam.client.exception.OsiamClientException osiamClientException9 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConnectionInitializationException: ", (java.lang.Throwable) osiamRequestException8);
        org.osiam.client.exception.OsiamClientException osiamClientException10 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConnectionInitializationException: ", (java.lang.Throwable) osiamRequestException8);
        connectionInitializationException2.addSuppressed((java.lang.Throwable) osiamClientException10);
    }

    @Test
    public void test15460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15460");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.util.Collection<java.lang.Object> objCollection1 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection2 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection4 = scopeDeserializer0.getKnownPropertyNames();
        boolean boolean5 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer6 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeSetJsonDeserializer8.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer11 = scopeSetJsonDeserializer8.unwrappingDeserializer(nameTransformer10);
        org.junit.Assert.assertNull(objCollection1);
        org.junit.Assert.assertNull(objCollection2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer11);
    }

    @Test
    public void test15461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15461");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder40.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder13.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        java.util.Date date62 = accessToken61.getExpiresAt();
        java.util.Date date63 = accessToken61.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder52.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder52.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.Scope scope68 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder52.addScope(scope68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }
}

