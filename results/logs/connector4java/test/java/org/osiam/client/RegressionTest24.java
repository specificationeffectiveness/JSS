package org.osiam.client;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest24 {

    public static boolean debug = false;

    @Test
    public void test12001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12001");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getRefreshToken();
        boolean boolean10 = accessToken6.isExpired();
        java.lang.String str11 = accessToken6.getUserName();
        java.lang.String str12 = accessToken6.getUserId();
        boolean boolean13 = accessToken6.isRefreshTokenExpired();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test12002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12002");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getUserName();
        java.lang.String str15 = accessToken12.getType();
        java.lang.String str16 = accessToken12.toString();
        java.lang.String str17 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.getCurrentUser(accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
    }

    @Test
    public void test12003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12003");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.startIndex((long) (byte) 10);
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        java.lang.String str18 = query16.getSortBy();
        java.lang.String str19 = query16.getSortBy();
        org.osiam.client.query.Query query20 = query16.nextPage();
        org.osiam.client.query.Query query21 = query16.previousPage();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query22 = query21.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]" + "'", str17, "Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
    }

    @Test
    public void test12004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12004");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer67 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer68 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer69 = scopeSerializer0.unwrappingSerializer(nameTransformer68);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper70 = null;
        com.fasterxml.jackson.databind.JavaType javaType71 = null;
        scopeSetJsonSerializer69.acceptJsonFormatVisitor(jsonFormatVisitorWrapper70, javaType71);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer73 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer74 = scopeSetJsonSerializer69.unwrappingSerializer(nameTransformer73);
        boolean boolean75 = scopeSetJsonSerializer69.usesObjectId();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer67);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer69);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test12005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12005");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector17 = builder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.getAttributes();
        java.lang.String str29 = query27.toString();
        java.lang.String str30 = query27.getSortOrder();
        org.osiam.client.query.Query query31 = query27.nextPage();
        java.lang.String str32 = query27.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        boolean boolean43 = accessToken41.isClientOnly();
        java.lang.String str44 = accessToken41.getRefreshToken();
        java.lang.String str45 = accessToken41.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user46 = osiamConnector17.getUser("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]", accessToken41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Authorization" + "'", str28, "Authorization");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str45, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12006");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.lang.String str22 = accessToken20.getUserId();
        java.lang.String str23 = accessToken20.getToken();
        boolean boolean24 = accessToken20.isExpired();
        java.lang.String str25 = accessToken20.getClientId();
        java.lang.String str26 = accessToken20.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken20.getScopes();
        java.lang.String str28 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        org.osiam.resources.scim.Group group29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str42 = scope41.toString();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str45 = scope44.getValue();
        java.lang.String str46 = scope44.getValue();
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException57 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean58 = scope55.equals((java.lang.Object) invalidAttributeException57);
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.GET;
        boolean boolean63 = scope61.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray65 = new org.osiam.client.oauth.Scope[] { scope34, scope35, scope40, scope41, scope43, scope44, scope47, scope52, scope53, scope54, scope55, scope59, scope60, scope61, scope64 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet66 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet66, scopeArray65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder31.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet66);
        org.osiam.client.oauth.AccessToken accessToken69 = builder31.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group70 = osiamGroupService2.createResource(group29, accessToken69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ME" + "'", str42, "ME");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PATCH" + "'", str45, "PATCH");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PATCH" + "'", str46, "PATCH");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(scopeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
    }

    @Test
    public void test12007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12007");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder24 = builder20.setClientId("org.osiam.client.exception.OsiamClientException: password");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test12008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12008");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        boolean boolean7 = scopeSetJsonDeserializer6.isCachable();
        boolean boolean8 = scopeSetJsonDeserializer6.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer6.getEmptyValue();
        java.lang.Class<?> wildcardClass10 = scopeSetJsonDeserializer6.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeSetJsonDeserializer6.getDelegatee();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeSetJsonDeserializer6.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
        org.junit.Assert.assertNull(wildcardJsonDeserializer12);
    }

    @Test
    public void test12009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12009");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getSortOrder();
        java.lang.String str13 = query9.getAttributes();
        java.lang.String str14 = query9.getAttributes();
        long long15 = query9.getStartIndex();
        org.osiam.client.query.Query query16 = query9.nextPage();
        java.lang.String str17 = query16.getFilter();
        java.lang.String str18 = query16.getFilter();
        java.lang.String str19 = query16.getSortOrder();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "descending" + "'", str12, "descending");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Authorization" + "'", str13, "Authorization");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Authorization" + "'", str14, "Authorization");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
    }

    @Test
    public void test12010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12010");
        org.osiam.client.exception.ConflictException conflictException3 = new org.osiam.client.exception.ConflictException("descending");
        org.osiam.client.exception.OsiamClientException osiamClientException4 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", (java.lang.Throwable) conflictException3);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("ascending", (java.lang.Throwable) conflictException3);
    }

    @Test
    public void test12011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12011");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = osiamGroupService4.extractErrorMessageUnauthorized("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
    }

    @Test
    public void test12012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12012");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamClientException: descending");
    }

    @Test
    public void test12013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12013");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass42 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper43 = null;
        com.fasterxml.jackson.databind.JavaType javaType44 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper43, javaType44);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer46 = scopeSerializer0.getDelegatee();
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.lang.String str50 = accessToken49.toString();
        java.lang.String str51 = accessToken49.getToken();
        boolean boolean52 = accessToken49.isExpired();
        java.lang.String str53 = accessToken49.getClientId();
        boolean boolean54 = accessToken49.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet55 = accessToken49.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider57 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer58 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSerializer0.serializeWithType(scopeSet55, jsonGenerator56, serializerProvider57, typeSerializer58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(scopeSetClass42);
        org.junit.Assert.assertNull(wildcardJsonSerializer46);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str50, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "client_credentials" + "'", str51, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(scopeSet55);
    }

    @Test
    public void test12014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12014");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.addScope(scope12);
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder11.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.addScope(scope28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder23.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.addScope(scope39);
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        java.lang.String str45 = scope41.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder38.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setUserId("");
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.addScope(scope51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken59 = builder58.build();
        java.util.Date date60 = accessToken59.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder50.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder23.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder66 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken71 = builder70.build();
        java.util.Date date72 = accessToken71.getExpiresAt();
        java.util.Date date73 = accessToken71.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder62.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken accessToken75 = builder62.build();
        boolean boolean76 = accessToken75.isRefreshTokenExpired();
        java.lang.String str77 = accessToken75.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.deleteGroup("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken75);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(accessToken59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(accessToken71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test12015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12015");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder16 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder16.build();
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken25);
        java.lang.String str27 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.OsiamGroupService.Builder builder29 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService30 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet39 = accessToken37.getScopes();
        java.lang.String str40 = osiamGroupService30.extractErrorMessageForbidden(accessToken37);
        boolean boolean41 = accessToken37.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken37);
        java.lang.String str43 = osiamGroupService18.extractErrorMessageForbidden(accessToken37);
        org.osiam.client.AuthService.Builder builder45 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientId("ME");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService54 = builder53.build();
        org.osiam.client.OsiamGroupService.Builder builder56 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService57 = builder56.build();
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        boolean boolean65 = accessToken64.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet66 = accessToken64.getScopes();
        java.lang.String str67 = osiamGroupService57.extractErrorMessageForbidden(accessToken64);
        boolean boolean68 = accessToken64.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken64);
        java.lang.String str70 = authService54.extractErrorMessageForbidden(accessToken64);
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken77 = builder76.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken77);
        java.util.Date date79 = accessToken77.getExpiresAt();
        boolean boolean80 = accessToken77.isClientOnly();
        boolean boolean81 = accessToken77.isClientOnly();
        java.lang.String str82 = authService54.extractErrorMessageForbidden(accessToken77);
        org.osiam.client.oauth.AccessToken.Builder builder84 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setRefreshTokenExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder84.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken89 = builder88.build();
        boolean boolean90 = accessToken89.isRefreshTokenExpired();
        java.lang.String str91 = accessToken89.getUserId();
        java.lang.String str92 = accessToken89.getClientId();
        java.util.Date date93 = accessToken89.getRefreshTokenExpiresAt();
        java.lang.String str94 = authService54.extractErrorMessageForbidden(accessToken89);
        java.lang.String str95 = osiamGroupService18.extractErrorMessageForbidden(accessToken89);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("Query [attributes=Authorization, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=ascending, startIndex=1, count=10]", accessToken89);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(scopeSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(authService54);
        org.junit.Assert.assertNotNull(osiamGroupService57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(scopeSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Insufficient scopes: []" + "'", str67, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Insufficient scopes: []" + "'", str70, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(accessToken77);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Insufficient scopes: []" + "'", str82, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(accessToken89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Insufficient scopes: []" + "'", str94, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Insufficient scopes: []" + "'", str95, "Insufficient scopes: []");
    }

    @Test
    public void test12016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12016");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.Query query16 = query15.nextPage();
        long long17 = query16.getStartIndex();
        java.lang.String str18 = query16.getSortOrder();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 101L + "'", long17 == 101L);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test12017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12017");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getNullValue();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        java.lang.Class<?> wildcardClass7 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeDeserializer0.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(scopeSet5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
    }

    @Test
    public void test12018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12018");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector17 = builder14.build();
        org.osiam.client.OsiamConnector.Builder builder19 = builder14.setClientRedirectUri("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector osiamConnector20 = builder14.build();
        org.osiam.client.AuthService.Builder builder22 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientId("ME");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder32 = builder28.setClientId("");
        org.osiam.client.AuthService.Builder builder34 = builder28.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.oauth.Scope scope37 = new org.osiam.client.oauth.Scope("");
        java.lang.String str38 = scope37.getValue();
        org.osiam.client.oauth.Scope scope40 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray41 = new org.osiam.client.oauth.Scope[] { scope37, scope40 };
        java.net.URI uRI42 = authService35.getAuthorizationUri(scopeArray41);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken43 = osiamConnector20.retrieveAccessToken(scopeArray41);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(scopeArray41);
        org.junit.Assert.assertNotNull(uRI42);
    }

    @Test
    public void test12019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12019");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection9 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeDeserializer0.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(objCollection9);
        org.junit.Assert.assertNull(scopeSet10);
    }

    @Test
    public void test12020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12020");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(0, "Authorization");
        java.lang.String str3 = osiamRequestException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.osiam.client.exception.OsiamRequestException: Authorization" + "'", str3, "org.osiam.client.exception.OsiamRequestException: Authorization");
    }

    @Test
    public void test12021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12021");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder12.addScope(scope15);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.addScope(scope27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserName("DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        boolean boolean39 = accessToken37.isClientOnly();
        java.lang.String str40 = accessToken37.getClientId();
        boolean boolean41 = accessToken37.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.addScope(scope44);
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException48 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean49 = scope46.equals((java.lang.Object) invalidAttributeException48);
        java.lang.String str50 = scope46.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder43.addScope(scope46);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setUserName("Authorization");
        boolean boolean58 = accessToken37.equals((java.lang.Object) builder55);
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.addScope(scope61);
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException65 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean66 = scope63.equals((java.lang.Object) invalidAttributeException65);
        java.lang.String str67 = scope63.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder60.addScope(scope63);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.addScope(scope75);
        org.osiam.client.oauth.GrantType grantType77 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str78 = grantType77.getUrlParam();
        boolean boolean79 = scope75.equals((java.lang.Object) grantType77);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder55.addScope(scope75);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder28.addScope(scope75);
        org.osiam.client.oauth.AccessToken accessToken82 = builder81.build();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet83 = accessToken82.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken84 = authService10.validateAccessToken(accessToken82);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GET" + "'", str50, "GET");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "GET" + "'", str67, "GET");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + grantType77 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType77.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "client_credentials" + "'", str78, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
        org.junit.Assert.assertNotNull(scopeSet83);
    }

    @Test
    public void test12022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12022");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector12 = builder6.build();
        org.osiam.client.oauth.AccessToken accessToken14 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector12.revokeAllAccessTokens("org.osiam.client.exception.OsiamRequestException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]", accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(osiamConnector12);
    }

    @Test
    public void test12023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12023");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        java.lang.String str13 = accessToken10.getClientId();
        boolean boolean14 = accessToken10.isClientOnly();
        java.lang.String str15 = accessToken10.getClientId();
        java.lang.String str16 = accessToken10.getType();
        boolean boolean17 = accessToken10.isClientOnly();
        java.lang.String str18 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        java.lang.String str19 = accessToken10.getUserId();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test12024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12024");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientRedirectUri("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.AuthService.Builder builder7 = builder1.setClientId("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.AuthService.Builder builder9 = builder1.setClientSecret("org.osiam.client.exception.ConflictException: ");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        java.lang.String str19 = accessToken17.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        boolean boolean29 = accessToken27.isClientOnly();
        java.lang.String str30 = accessToken27.getClientId();
        boolean boolean31 = accessToken27.isClientOnly();
        boolean boolean32 = accessToken17.equals((java.lang.Object) accessToken27);
        java.lang.String str33 = accessToken27.getClientId();
        java.lang.String str34 = authService10.extractErrorMessageForbidden(accessToken27);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
    }

    @Test
    public void test12025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12025");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection8 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        boolean boolean9 = scopeSetJsonDeserializer6.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer6.getNullValue();
        java.util.Collection<java.lang.Object> objCollection11 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        com.fasterxml.jackson.core.JsonParser jsonParser12 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext13 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = scopeSetJsonDeserializer6.deserializeWithType(jsonParser12, deserializationContext13, typeDeserializer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNull(objCollection11);
    }

    @Test
    public void test12026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12026");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer6 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer0.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer11 = scopeSetJsonDeserializer9.unwrappingDeserializer(nameTransformer10);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer13 = scopeSetJsonDeserializer11.unwrappingDeserializer(nameTransformer12);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(wildcardJsonDeserializer6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer11);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer13);
    }

    @Test
    public void test12027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12027");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.util.Date date26 = accessToken24.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder17.setExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder17.setUserName("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder17.setUserName("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.addScope(scope34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder33.addScope(scope36);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.addScope(scope50);
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        java.lang.String str56 = scope52.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder49.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder45.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder45.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder64.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder64.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope73 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.addScope(scope73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date77 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setRefreshTokenExpiresAt(date77);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder76.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken81 = builder80.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken81);
        java.util.Date date83 = accessToken81.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder74.setExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder62.setExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder31.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder31.setRefreshToken("org.osiam.client.exception.NoResultException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder31.setUserId("Query [attributes=Authorization, filter=org.osiam.client.exception.ForbiddenException: hi!, sortBy=ME, sortOrder=descending, startIndex=90, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(scope73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(accessToken81);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test12028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12028");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.resources.scim.User user6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken15 = builder12.build();
        java.lang.String str16 = accessToken15.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = accessToken15.getClientId();
        java.lang.String str19 = accessToken15.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamUserService4.replaceUser("org.osiam.client.exception.OsiamClientException: PUT", user6, accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test12029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12029");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        org.osiam.client.query.Query query12 = query9.nextPage();
        int int13 = query9.getCount();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test12030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12030");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper7 = null;
        com.fasterxml.jackson.databind.JavaType javaType8 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper7, javaType8);
        boolean boolean10 = scopeSerializer0.usesObjectId();
        org.osiam.client.helper.ScopeSerializer scopeSerializer11 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean12 = scopeSerializer11.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer14 = scopeSerializer11.unwrappingSerializer(nameTransformer13);
        boolean boolean15 = scopeSerializer11.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer11.unwrappingSerializer(nameTransformer16);
        org.osiam.client.helper.ScopeSerializer scopeSerializer18 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean19 = scopeSerializer18.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str32 = scope31.toString();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str35 = scope34.getValue();
        java.lang.String str36 = scope34.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        java.lang.String str41 = scope37.getValue();
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException47 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean48 = scope45.equals((java.lang.Object) invalidAttributeException47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        boolean boolean53 = scope51.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray55 = new org.osiam.client.oauth.Scope[] { scope24, scope25, scope30, scope31, scope33, scope34, scope37, scope42, scope43, scope44, scope45, scope49, scope50, scope51, scope54 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet56 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet56, scopeArray55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder21.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet56);
        boolean boolean59 = scopeSerializer18.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet56);
        boolean boolean60 = scopeSetJsonSerializer17.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet56);
        boolean boolean61 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet56);
        org.osiam.client.helper.ScopeSerializer scopeSerializer62 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet71 = accessToken69.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider73 = null;
        scopeSerializer62.serialize(scopeSet71, jsonGenerator72, serializerProvider73);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper75 = null;
        com.fasterxml.jackson.databind.JavaType javaType76 = null;
        scopeSerializer62.acceptJsonFormatVisitor(jsonFormatVisitorWrapper75, javaType76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshTokenExpiresAt(date80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        java.util.Date date85 = accessToken84.getExpiresAt();
        java.lang.String str86 = accessToken84.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet87 = accessToken84.getScopes();
        boolean boolean88 = scopeSerializer62.isEmpty(scopeSet87);
        boolean boolean89 = scopeSerializer0.isEmpty(scopeSet87);
        java.lang.Class<?> wildcardClass90 = scopeSerializer0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ME" + "'", str32, "ME");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PATCH" + "'", str35, "PATCH");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PATCH" + "'", str36, "PATCH");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GET" + "'", str41, "GET");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scopeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(scopeSet71);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(scopeSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test12031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12031");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        java.lang.String str19 = query18.toString();
        java.lang.String str20 = query18.getSortOrder();
        java.lang.String str21 = query18.getSortBy();
        java.lang.String str22 = query18.getFilter();
        java.lang.String str23 = query18.getSortOrder();
        java.lang.String str24 = query18.getAttributes();
        boolean boolean25 = accessToken6.equals((java.lang.Object) query18);
        org.osiam.client.OsiamConnector.Builder builder26 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder28 = builder26.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder34 = builder30.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder36 = builder30.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder38 = builder36.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder40 = builder36.setClientRedirectUri("PUT");
        boolean boolean41 = accessToken6.equals((java.lang.Object) builder40);
        org.osiam.client.OsiamConnector osiamConnector42 = builder40.build();
        org.osiam.client.query.QueryBuilder queryBuilder43 = osiamConnector42.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.startIndex((long) (byte) 1);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.ascending("Query [attributes=Authorization, filter=org.osiam.client.exception.ForbiddenException: hi!, sortBy=ME, sortOrder=descending, startIndex=90, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "descending" + "'", str23, "descending");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Authorization" + "'", str24, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(osiamConnector42);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
    }

    @Test
    public void test12032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12032");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientRedirectUri("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setResourceServerEndpoint("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12033");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        java.lang.String str38 = query34.getFilter();
        java.lang.String str39 = query34.getSortOrder();
        java.lang.String str40 = query34.getAttributes();
        long long41 = query34.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector9.createQueryBuilder(query34);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.lang.String str52 = accessToken50.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder53 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder55.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.descending("hi!");
        org.osiam.client.query.Query query62 = queryBuilder61.build();
        java.lang.String str63 = query62.toString();
        java.lang.String str64 = query62.getSortOrder();
        java.lang.String str65 = query62.getSortBy();
        java.lang.String str66 = query62.getFilter();
        java.lang.String str67 = query62.toString();
        boolean boolean68 = accessToken50.equals((java.lang.Object) query62);
        java.lang.String str69 = accessToken50.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector9.revokeAllAccessTokens("org.osiam.client.exception.ForbiddenException: Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]", accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(query62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str63, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "descending" + "'", str64, "descending");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str67, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test12034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12034");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        java.lang.String str8 = accessToken6.getUserName();
        java.lang.String str9 = accessToken6.getType();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer10 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer10.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer12 = scopeDeserializer10.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection13 = scopeDeserializer10.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeDeserializer10.getDelegatee();
        boolean boolean15 = scopeDeserializer10.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer17 = scopeDeserializer10.unwrappingDeserializer(nameTransformer16);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = scopeSetJsonDeserializer17.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader19 = scopeSetJsonDeserializer17.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = scopeSetJsonDeserializer17.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer21 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer22 = scopeSetJsonDeserializer17.unwrappingDeserializer(nameTransformer21);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader23 = scopeSetJsonDeserializer17.getObjectIdReader();
        boolean boolean24 = accessToken6.equals((java.lang.Object) objectIdReader23);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardJsonDeserializer12);
        org.junit.Assert.assertNull(objCollection13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer17);
        org.junit.Assert.assertNull(scopeSet18);
        org.junit.Assert.assertNull(objectIdReader19);
        org.junit.Assert.assertNull(scopeSet20);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer22);
        org.junit.Assert.assertNull(objectIdReader23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12035");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
    }

    @Test
    public void test12036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12036");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService7.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder10 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder10.build();
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        java.lang.String str21 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        java.util.Date date22 = accessToken19.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean25 = accessToken19.equals((java.lang.Object) scope24);
        java.lang.String str26 = accessToken19.getRefreshToken();
        java.lang.String str27 = accessToken19.getToken();
        java.lang.String str28 = accessToken19.getUserId();
        java.lang.String str29 = osiamGroupService7.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken38 = builder35.build();
        java.util.Date date39 = accessToken38.getExpiresAt();
        java.lang.String str40 = accessToken38.getClientId();
        java.lang.String str41 = accessToken38.getType();
        java.lang.String str42 = osiamGroupService7.extractErrorMessageForbidden(accessToken38);
        java.lang.String str43 = osiamGroupService3.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.OsiamGroupService.Builder builder46 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService47 = builder46.build();
        org.osiam.client.OsiamGroupService osiamGroupService48 = builder46.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.lang.String str57 = accessToken55.getUserId();
        java.lang.String str58 = accessToken55.getClientId();
        boolean boolean59 = accessToken55.isClientOnly();
        java.lang.String str60 = accessToken55.getClientId();
        java.lang.String str61 = accessToken55.getType();
        boolean boolean62 = accessToken55.isClientOnly();
        java.lang.String str63 = osiamGroupService48.extractErrorMessageForbidden(accessToken55);
        boolean boolean64 = accessToken55.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.deleteGroup("password", accessToken55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Bearer " + "'", str27, "Bearer ");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService47);
        org.junit.Assert.assertNotNull(osiamGroupService48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test12037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12037");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = osiamGroupService4.extractErrorMessage("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending", statusType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
    }

    @Test
    public void test12038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12038");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.util.Collection<java.lang.Object> objCollection1 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet2 = scopeDeserializer0.getEmptyValue();
        boolean boolean3 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        org.junit.Assert.assertNull(objCollection1);
        org.junit.Assert.assertNull(scopeSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objectIdReader7);
    }

    @Test
    public void test12039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12039");
        org.osiam.client.exception.OsiamClientException osiamClientException3 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.exception.OsiamClientException osiamClientException4 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamRequestException: hi!", (java.lang.Throwable) osiamClientException3);
        org.osiam.client.exception.OsiamClientException osiamClientException5 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH", (java.lang.Throwable) osiamClientException4);
    }

    @Test
    public void test12040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12040");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("PUT");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken accessToken8 = null;
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAllAccessTokens("org.osiam.client.exception.UnauthorizedException: GET", accessToken8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
    }

    @Test
    public void test12041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12041");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.GrantType grantType18 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str19 = grantType18.getUrlParam();
        boolean boolean20 = scope16.equals((java.lang.Object) grantType18);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        boolean boolean25 = scope16.equals((java.lang.Object) builder22);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.addScope(scope28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder22.addScope(scope30);
        java.lang.String str37 = scope30.toString();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + grantType18 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType18.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "client_credentials" + "'", str19, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GET" + "'", str37, "GET");
    }

    @Test
    public void test12042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12042");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("GET");
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test12043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12043");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.exception.UnauthorizedException unauthorizedException47 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int48 = unauthorizedException47.getHttpStatusCode();
        int int49 = unauthorizedException47.getHttpStatusCode();
        java.lang.Throwable[] throwableArray50 = unauthorizedException47.getSuppressed();
        boolean boolean51 = accessToken39.equals((java.lang.Object) unauthorizedException47);
        java.lang.String str52 = accessToken39.toString();
        java.lang.String str53 = accessToken39.getUserName();
        java.util.Date date54 = accessToken39.getExpiresAt();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 401 + "'", int48 == 401);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 401 + "'", int49 == 401);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str52, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12044");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.NoResultException: refresh_token");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        java.lang.String str15 = accessToken11.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user16 = osiamUserService2.replaceUser("org.osiam.client.exception.ConnectionInitializationException: ", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Bearer " + "'", str15, "Bearer ");
    }

    @Test
    public void test12045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12045");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.toString();
        java.lang.String str14 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str32 = accessToken28.getClientId();
        boolean boolean33 = accessToken28.isRefreshTokenExpired();
        java.lang.String str34 = authService21.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        boolean boolean43 = accessToken41.isClientOnly();
        java.lang.String str44 = accessToken41.getClientId();
        java.lang.String str45 = accessToken41.getClientId();
        java.util.Date date46 = accessToken41.getRefreshTokenExpiresAt();
        java.lang.String str47 = authService21.extractErrorMessageForbidden(accessToken41);
        org.osiam.client.OsiamGroupService.Builder builder49 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService50 = builder49.build();
        org.osiam.client.OsiamGroupService osiamGroupService51 = builder49.build();
        javax.ws.rs.client.WebTarget webTarget52 = osiamGroupService51.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget53 = osiamGroupService51.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget54 = osiamGroupService51.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget55 = osiamGroupService51.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        boolean boolean63 = accessToken62.isRefreshTokenExpired();
        java.lang.String str64 = accessToken62.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder65 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder69 = queryBuilder67.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder71 = queryBuilder67.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.descending("hi!");
        org.osiam.client.query.Query query74 = queryBuilder73.build();
        java.lang.String str75 = query74.toString();
        java.lang.String str76 = query74.getSortOrder();
        java.lang.String str77 = query74.getSortBy();
        java.lang.String str78 = query74.getFilter();
        java.lang.String str79 = query74.toString();
        boolean boolean80 = accessToken62.equals((java.lang.Object) query74);
        java.lang.String str81 = osiamGroupService51.extractErrorMessageForbidden(accessToken62);
        java.lang.String str82 = authService21.extractErrorMessageForbidden(accessToken62);
        java.lang.String str83 = accessToken62.getUserName();
        java.util.Date date84 = accessToken62.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList85 = osiamGroupService2.getAllGroups(accessToken62);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService50);
        org.junit.Assert.assertNotNull(osiamGroupService51);
        org.junit.Assert.assertNotNull(webTarget52);
        org.junit.Assert.assertNotNull(webTarget53);
        org.junit.Assert.assertNotNull(webTarget54);
        org.junit.Assert.assertNotNull(webTarget55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(queryBuilder69);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(query74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str75, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "descending" + "'", str76, "descending");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str79, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Insufficient scopes: []" + "'", str81, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Insufficient scopes: []" + "'", str82, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12046");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.GrantType grantType18 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str19 = grantType18.getUrlParam();
        boolean boolean20 = scope16.equals((java.lang.Object) grantType18);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        boolean boolean25 = scope16.equals((java.lang.Object) builder22);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.addScope(scope28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder22.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder36.setClientId("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        boolean boolean50 = accessToken49.isRefreshTokenExpired();
        java.lang.String str51 = accessToken49.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder52 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder54.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder58.descending("hi!");
        org.osiam.client.query.Query query61 = queryBuilder60.build();
        java.lang.String str62 = query61.toString();
        java.lang.String str63 = query61.getSortOrder();
        java.lang.String str64 = query61.getSortBy();
        java.lang.String str65 = query61.getFilter();
        java.lang.String str66 = query61.toString();
        boolean boolean67 = accessToken49.equals((java.lang.Object) query61);
        java.util.Date date68 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder36.setExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder36.setUserName("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setUserId("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder71.setUserId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken82 = builder81.build();
        java.util.Date date83 = accessToken82.getExpiresAt();
        java.lang.String str84 = accessToken82.getRefreshToken();
        java.lang.String str85 = accessToken82.getType();
        java.lang.String str86 = accessToken82.getClientId();
        java.lang.String str87 = accessToken82.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet88 = accessToken82.getScopes();
        java.util.Date date89 = accessToken82.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder71.setExpiresAt(date89);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + grantType18 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType18.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "client_credentials" + "'", str19, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(query61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str62, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "descending" + "'", str63, "descending");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str66, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str87, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(scopeSet88);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test12047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12047");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.toString();
        org.osiam.client.query.Query query45 = query42.nextPage();
        java.lang.String str46 = query42.toString();
        int int47 = query42.getCount();
        java.lang.String str48 = query42.getSortOrder();
        int int49 = query42.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet60 = accessToken58.getScopes();
        java.lang.String str61 = accessToken58.getUserId();
        java.util.Date date62 = accessToken58.getExpiresAt();
        java.util.Date date63 = accessToken58.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group64 = osiamConnector5.getGroup("org.osiam.client.exception.ForbiddenException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str46, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "descending" + "'", str48, "descending");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(scopeSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12048");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        java.util.Date date24 = accessToken23.getExpiresAt();
        java.lang.String str25 = accessToken23.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getClientId();
        boolean boolean37 = accessToken33.isClientOnly();
        boolean boolean38 = accessToken23.equals((java.lang.Object) accessToken33);
        java.lang.String str39 = accessToken33.getUserId();
        boolean boolean40 = accessToken33.isExpired();
        java.lang.String str41 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        javax.ws.rs.client.WebTarget webTarget42 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.UpdateGroup updateGroup44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        boolean boolean53 = accessToken51.isClientOnly();
        java.lang.String str54 = accessToken51.getRefreshToken();
        boolean boolean55 = accessToken51.isExpired();
        boolean boolean56 = accessToken51.isExpired();
        java.lang.String str57 = accessToken51.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group58 = osiamGroupService3.updateGroup("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", updateGroup44, accessToken51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str57, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12049");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getDescription();
        java.lang.String str4 = oAuthErrorMessage0.getDescription();
        java.lang.String str5 = oAuthErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test12050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12050");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.getSortOrder();
        java.lang.String str28 = query22.getAttributes();
        boolean boolean29 = accessToken10.equals((java.lang.Object) query22);
        org.osiam.client.OsiamConnector.Builder builder30 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder38 = builder34.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder40 = builder34.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder42 = builder40.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder44 = builder40.setClientRedirectUri("PUT");
        boolean boolean45 = accessToken10.equals((java.lang.Object) builder44);
        java.lang.String str46 = accessToken10.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user47 = osiamUserService2.getUser("PUT", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Authorization" + "'", str28, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test12051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12051");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeSetJsonDeserializer6.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
    }

    @Test
    public void test12052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12052");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        java.util.Date date8 = accessToken6.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        java.lang.String str19 = query18.toString();
        java.lang.String str20 = query18.getSortOrder();
        org.osiam.client.query.Query query21 = query18.nextPage();
        boolean boolean22 = accessToken6.equals((java.lang.Object) query18);
        java.lang.String str23 = accessToken6.getType();
        java.lang.String str24 = accessToken6.getType();
        boolean boolean25 = accessToken6.isRefreshTokenExpired();
        java.lang.String str26 = accessToken6.getType();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test12053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12053");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer67 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer68 = scopeSerializer0.getDelegatee();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer67);
        org.junit.Assert.assertNull(wildcardJsonSerializer68);
    }

    @Test
    public void test12054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12054");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        boolean boolean34 = accessToken32.isExpired();
        java.lang.String str35 = osiamGroupService2.extractErrorMessageForbidden(accessToken32);
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget37 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = osiamGroupService2.extractErrorMessageDefault("org.osiam.client.exception.OsiamClientException: client_credentials", statusType39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget36);
        org.junit.Assert.assertNotNull(webTarget37);
    }

    @Test
    public void test12055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12055");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("ascending");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientId("ADMIN");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.filter("org.osiam.client.exception.OsiamClientException: ADMIN");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder8.attributes("PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
    }

    @Test
    public void test12056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12056");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserName();
        java.lang.String str14 = accessToken11.getRefreshToken();
        java.lang.String str15 = accessToken11.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group16 = osiamGroupService2.createResource(group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test12057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12057");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientRedirectUri("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientId("Query [attributes=Authorization, filter=null, sortBy=ME, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test12058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12058");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder28.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder28.setRefreshToken("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.lang.String str45 = accessToken44.getUserId();
        java.lang.String str46 = osiamGroupService3.extractErrorMessageForbidden(accessToken44);
        javax.ws.rs.client.WebTarget webTarget47 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget48 = osiamGroupService3.targetEndpoint;
        org.osiam.client.query.QueryBuilder queryBuilder49 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder53.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder53.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder59.count((int) (short) -1);
        org.osiam.client.query.Query query64 = queryBuilder59.build();
        java.lang.String str65 = query64.toString();
        long long66 = query64.getStartIndex();
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        boolean boolean74 = accessToken73.isRefreshTokenExpired();
        java.lang.String str75 = accessToken73.getUserId();
        java.lang.String str76 = accessToken73.getClientId();
        java.util.Date date77 = accessToken73.getRefreshTokenExpiresAt();
        java.util.Date date78 = accessToken73.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult79 = osiamGroupService3.searchResources(query64, accessToken73);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str46, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(webTarget47);
        org.junit.Assert.assertNotNull(webTarget48);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str65, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12059");
        org.osiam.client.exception.ScimErrorMessage scimErrorMessage0 = new org.osiam.client.exception.ScimErrorMessage();
        java.lang.String str1 = scimErrorMessage0.getErrorCode();
        java.lang.String str2 = scimErrorMessage0.getDescription();
        java.lang.String str3 = scimErrorMessage0.getDescription();
        java.lang.String str4 = scimErrorMessage0.getDescription();
        java.lang.String str5 = scimErrorMessage0.getErrorCode();
        java.lang.String str6 = scimErrorMessage0.getErrorCode();
        java.lang.String str7 = scimErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test12060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12060");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
    }

    @Test
    public void test12061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12061");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=Cannot connect to server, userName=Authorization]");
    }

    @Test
    public void test12062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12062");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str14 = osiamGroupService4.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.lang.String str25 = accessToken24.toString();
        java.lang.String str26 = accessToken24.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.lang.String str28 = accessToken24.getClientId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        java.lang.String str30 = osiamGroupService4.extractErrorMessageForbidden(accessToken24);
        javax.ws.rs.core.Response.StatusType statusType32 = null;
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService39 = builder38.build();
        org.osiam.client.OsiamGroupService.Builder builder41 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService42 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        boolean boolean50 = accessToken49.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet51 = accessToken49.getScopes();
        java.lang.String str52 = osiamGroupService42.extractErrorMessageForbidden(accessToken49);
        boolean boolean53 = accessToken49.isClientOnly();
        java.lang.String str54 = authService39.extractErrorMessageForbidden(accessToken49);
        java.lang.String str55 = accessToken49.getUserId();
        java.lang.String str56 = accessToken49.getToken();
        java.lang.String str57 = accessToken49.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.checkAndHandleResponse("Query [attributes=ME, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType32, accessToken49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str25, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(authService39);
        org.junit.Assert.assertNotNull(osiamGroupService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(scopeSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Bearer " + "'", str56, "Bearer ");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test12063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12063");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(0);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.ascending("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("DELETE");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
    }

    @Test
    public void test12064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12064");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder7 = builder3.setClientSecret("POST");
        org.osiam.client.AuthService.Builder builder9 = builder3.setClientSecret("");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.AuthService.Builder builder12 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("ME");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder22 = builder18.setClientSecret("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder26 = builder22.setClientRedirectUri("ME");
        org.osiam.client.AuthService authService27 = builder26.build();
        org.osiam.client.OsiamConnector.Builder builder28 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder30 = builder28.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder34 = builder32.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder36 = builder34.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector37 = builder34.build();
        org.osiam.client.OsiamConnector.Builder builder39 = builder34.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder41 = builder39.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector42 = builder39.build();
        org.osiam.client.AuthService.Builder builder44 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder46 = builder44.setClientId("ME");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder50 = builder48.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder52 = builder50.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService53 = builder52.build();
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.lang.String str62 = accessToken60.getUserId();
        java.lang.String str63 = accessToken60.getToken();
        java.lang.String str64 = authService53.extractErrorMessageForbidden(accessToken60);
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str66 = scope65.getValue();
        java.lang.String str67 = scope65.toString();
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray69 = new org.osiam.client.oauth.Scope[] { scope65, scope68 };
        java.net.URI uRI70 = authService53.getAuthorizationUri(scopeArray69);
        java.net.URI uRI71 = osiamConnector42.getAuthorizationUri(scopeArray69);
        java.net.URI uRI72 = authService27.getAuthorizationUri(scopeArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI73 = authService10.getAuthorizationUri(scopeArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Can't create the login uri: redirect URI was not set.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(authService27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(osiamConnector37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(osiamConnector42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(authService53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Bearer " + "'", str63, "Bearer ");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Insufficient scopes: []" + "'", str64, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PATCH" + "'", str66, "PATCH");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PATCH" + "'", str67, "PATCH");
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertNotNull(scopeArray69);
        org.junit.Assert.assertNotNull(uRI70);
        org.junit.Assert.assertNotNull(uRI71);
        org.junit.Assert.assertNotNull(uRI72);
    }

    @Test
    public void test12065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12065");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService7 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService8 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.addScope(scope11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException15 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean16 = scope13.equals((java.lang.Object) invalidAttributeException15);
        java.lang.String str17 = scope13.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder10.addScope(scope13);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        org.osiam.client.helper.ScopeSerializer scopeSerializer24 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean25 = scopeSerializer24.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer26 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer27 = scopeSerializer24.unwrappingSerializer(nameTransformer26);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        java.lang.String str38 = scope34.getValue();
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str41 = scope40.toString();
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str44 = scope43.getValue();
        java.lang.String str45 = scope43.getValue();
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException48 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean49 = scope46.equals((java.lang.Object) invalidAttributeException48);
        java.lang.String str50 = scope46.getValue();
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException56 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean57 = scope54.equals((java.lang.Object) invalidAttributeException56);
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.GET;
        boolean boolean62 = scope60.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray64 = new org.osiam.client.oauth.Scope[] { scope33, scope34, scope39, scope40, scope42, scope43, scope46, scope51, scope52, scope53, scope54, scope58, scope59, scope60, scope63 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet65 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet65, scopeArray64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder30.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet65);
        boolean boolean68 = scopeSetJsonSerializer27.isEmpty(serializerProvider28, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet65);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder22.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet65);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder22.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken72 = builder22.build();
        java.lang.String str73 = accessToken72.getClientId();
        java.util.Date date74 = accessToken72.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser75 = osiamUserService8.getCurrentUserBasic(accessToken72);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(osiamUserService7);
        org.junit.Assert.assertNotNull(osiamUserService8);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GET" + "'", str17, "GET");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GET" + "'", str38, "GET");
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ME" + "'", str41, "ME");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PATCH" + "'", str44, "PATCH");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PATCH" + "'", str45, "PATCH");
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GET" + "'", str50, "GET");
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(scopeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(accessToken72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str73, "org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12066");
        org.osiam.client.exception.OsiamRequestException osiamRequestException4 = new org.osiam.client.exception.OsiamRequestException((int) (short) -1, "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        int int5 = osiamRequestException4.getHttpStatusCode();
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException6 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", (java.lang.Throwable) osiamRequestException4);
        org.osiam.client.exception.OsiamClientException osiamClientException7 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", (java.lang.Throwable) connectionInitializationException6);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test12067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12067");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer6.getNullValue();
        java.lang.Class<?> wildcardClass8 = scopeSetJsonDeserializer6.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeSetJsonDeserializer6.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer11 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer10);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty13 = scopeSetJsonDeserializer11.findBackReference("org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.NoResultException: org.osiam.client.exception.OsiamClientException: ME': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer11);
    }

    @Test
    public void test12068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12068");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("PUT");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder18 = builder14.setClientSecret("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.addScope(scope24);
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder23.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str39 = scope38.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder37.addScope(scope38);
        java.lang.String str41 = scope38.toString();
        org.osiam.client.oauth.Scope[] scopeArray42 = new org.osiam.client.oauth.Scope[] { scope38 };
        java.net.URI uRI43 = authService21.getAuthorizationUri(scopeArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken44 = authService2.retrieveAccessToken("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]", "hi!", scopeArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PUT" + "'", str39, "PUT");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PUT" + "'", str41, "PUT");
        org.junit.Assert.assertNotNull(scopeArray42);
        org.junit.Assert.assertNotNull(uRI43);
    }

    @Test
    public void test12069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12069");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getType();
        boolean boolean9 = accessToken6.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = accessToken6.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        boolean boolean19 = accessToken17.isClientOnly();
        java.lang.String str20 = accessToken17.getClientId();
        java.lang.String str21 = accessToken17.getClientId();
        java.util.Date date22 = accessToken17.getRefreshTokenExpiresAt();
        java.lang.String str23 = accessToken17.getToken();
        boolean boolean24 = accessToken6.equals((java.lang.Object) str23);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(scopeSet10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test12070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12070");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.toString();
        boolean boolean32 = accessToken14.equals((java.lang.Object) query26);
        java.lang.String str33 = osiamGroupService3.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.OsiamGroupService.Builder builder35 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService36 = builder35.build();
        org.osiam.client.OsiamGroupService osiamGroupService37 = builder35.build();
        javax.ws.rs.client.WebTarget webTarget38 = osiamGroupService37.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget39 = osiamGroupService37.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.lang.String str48 = accessToken46.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken46.getScopes();
        java.lang.String str50 = osiamGroupService37.extractErrorMessageForbidden(accessToken46);
        java.lang.String str51 = accessToken46.getClientId();
        java.lang.String str52 = accessToken46.getUserName();
        java.lang.String str53 = osiamGroupService3.extractErrorMessageForbidden(accessToken46);
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        java.lang.String str61 = accessToken60.toString();
        java.lang.String str62 = accessToken60.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken60);
        java.util.Date date64 = accessToken60.getRefreshTokenExpiresAt();
        boolean boolean65 = accessToken60.isExpired();
        java.lang.String str66 = osiamGroupService3.extractErrorMessageForbidden(accessToken60);
        org.osiam.resources.scim.Group group67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder69.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date82 = null;
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder81.setRefreshTokenExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder81.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken86 = builder85.build();
        java.util.Date date87 = accessToken86.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder77.setRefreshTokenExpiresAt(date87);
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder75.setRefreshTokenExpiresAt(date87);
        java.util.Date date90 = null;
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder89.setRefreshTokenExpiresAt(date90);
        org.osiam.client.oauth.AccessToken accessToken92 = builder91.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group93 = osiamGroupService3.createGroup(group67, accessToken92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService36);
        org.junit.Assert.assertNotNull(osiamGroupService37);
        org.junit.Assert.assertNotNull(webTarget38);
        org.junit.Assert.assertNotNull(webTarget39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str61, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Insufficient scopes: []" + "'", str66, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(accessToken86);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(accessToken92);
    }

    @Test
    public void test12071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12071");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        org.osiam.client.query.Query query11 = query10.nextPage();
        java.lang.String str12 = query11.toString();
        int int13 = query11.getCount();
        java.lang.String str14 = query11.getSortOrder();
        java.lang.String str15 = query11.getSortOrder();
        long long16 = query11.getStartIndex();
        org.osiam.client.query.Query query17 = query11.previousPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertNotNull(query11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str12, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 11L + "'", long16 == 11L);
        org.junit.Assert.assertNotNull(query17);
    }

    @Test
    public void test12072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12072");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("ADMIN");
        org.osiam.client.helper.ScopeSerializer scopeSerializer2 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean3 = scopeSerializer2.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider4 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer5 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException13 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean14 = scope11.equals((java.lang.Object) invalidAttributeException13);
        java.lang.String str15 = scope11.getValue();
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str18 = scope17.toString();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str21 = scope20.getValue();
        java.lang.String str22 = scope20.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean26 = scope23.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = scope23.getValue();
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        boolean boolean39 = scope37.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray41 = new org.osiam.client.oauth.Scope[] { scope10, scope11, scope16, scope17, scope19, scope20, scope23, scope28, scope29, scope30, scope31, scope35, scope36, scope37, scope40 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet42 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet42, scopeArray41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder7.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet42);
        boolean boolean45 = scopeSerializer5.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet42);
        org.osiam.client.oauth.AccessToken.Builder builder47 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date48 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setRefreshTokenExpiresAt(date48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder47.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        boolean boolean53 = accessToken52.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet54 = accessToken52.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider56 = null;
        scopeSerializer5.serialize(scopeSet54, jsonGenerator55, serializerProvider56);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        boolean boolean66 = accessToken65.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet67 = accessToken65.getScopes();
        boolean boolean68 = scopeSerializer5.isEmpty(serializerProvider58, scopeSet67);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass69 = scopeSerializer5.handledType();
        org.osiam.client.oauth.Scope scope71 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder73 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope74 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.addScope(scope74);
        org.osiam.client.oauth.Scope[] scopeArray76 = new org.osiam.client.oauth.Scope[] { scope71, scope74 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet77 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet77, scopeArray76);
        boolean boolean79 = scopeSerializer5.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet77);
        boolean boolean80 = scopeSerializer2.isEmpty(serializerProvider4, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet77);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder1.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet77);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GET" + "'", str15, "GET");
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ME" + "'", str18, "ME");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PATCH" + "'", str21, "PATCH");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PATCH" + "'", str22, "PATCH");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GET" + "'", str27, "GET");
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scopeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(scopeSet54);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(scopeSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(scopeSetClass69);
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(scopeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test12073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12073");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH");
        java.lang.String str2 = scope1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH" + "'", str2, "org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH");
    }

    @Test
    public void test12074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12074");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("authorization_code");
        java.lang.String str2 = scope1.getValue();
        java.lang.String str3 = scope1.toString();
        java.lang.String str4 = scope1.getValue();
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken15);
        java.lang.String str17 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean18 = scope1.equals((java.lang.Object) osiamGroupService8);
        javax.ws.rs.client.WebTarget webTarget19 = osiamGroupService8.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService8.targetEndpoint;
        org.osiam.resources.scim.Group group21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet31 = accessToken28.getScopes();
        java.util.Date date32 = accessToken28.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group33 = osiamGroupService8.createResource(group21, accessToken28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "authorization_code" + "'", str2, "authorization_code");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "authorization_code" + "'", str3, "authorization_code");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "authorization_code" + "'", str4, "authorization_code");
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(webTarget19);
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(scopeSet31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12075");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.resources.scim.User user11 = null;
        org.osiam.client.OsiamGroupService.Builder builder13 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder13.build();
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.lang.String str24 = accessToken22.getUserId();
        java.lang.String str25 = accessToken22.getClientId();
        boolean boolean26 = accessToken22.isClientOnly();
        java.lang.String str27 = accessToken22.getClientId();
        java.lang.String str28 = accessToken22.getType();
        boolean boolean29 = accessToken22.isClientOnly();
        java.lang.String str30 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user31 = osiamConnector9.createUser(user11, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
    }

    @Test
    public void test12076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12076");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.lang.String str35 = accessToken33.getUserId();
        java.lang.String str36 = accessToken33.getClientId();
        boolean boolean37 = accessToken33.isClientOnly();
        java.lang.String str38 = authService26.extractErrorMessageForbidden(accessToken33);
        boolean boolean39 = accessToken33.isExpired();
        java.lang.String str40 = authService10.extractErrorMessageForbidden(accessToken33);
        java.lang.String str41 = accessToken33.getToken();
        java.util.Date date42 = accessToken33.getExpiresAt();
        java.lang.String str43 = accessToken33.getToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Bearer " + "'", str41, "Bearer ");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Bearer " + "'", str43, "Bearer ");
    }

    @Test
    public void test12077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12077");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query10 = queryBuilder7.build();
        org.osiam.client.query.Query query11 = query10.nextPage();
        org.osiam.client.query.Query query12 = query11.previousPage();
        java.lang.String str13 = query11.getFilter();
        java.lang.String str14 = query11.getAttributes();
        java.lang.String str15 = query11.toString();
        org.osiam.client.query.Query query16 = query11.nextPage();
        java.lang.String str17 = query11.getAttributes();
        int int18 = query11.getCount();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = accessToken25.getUserId();
        java.lang.String str28 = accessToken25.getToken();
        java.util.Date date29 = accessToken25.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken25);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult31 = osiamGroupService2.searchGroups(query11, accessToken25);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertNotNull(query11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Authorization" + "'", str14, "Authorization");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Authorization" + "'", str17, "Authorization");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12078");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("GET");
        int int2 = noResultException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 404 + "'", int2 == 404);
    }

    @Test
    public void test12079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12079");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        boolean boolean16 = accessToken11.isExpired();
        java.lang.String str17 = accessToken11.getClientId();
        boolean boolean18 = accessToken11.isExpired();
        java.lang.String str19 = accessToken11.getType();
        boolean boolean20 = accessToken11.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService3.deleteUser("org.osiam.client.exception.UnauthorizedException: PUT", accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test12080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12080");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.filter("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.Query query15 = queryBuilder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder12.ascending("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test12081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12081");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("password");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        boolean boolean26 = accessToken24.isRefreshTokenExpired();
        boolean boolean27 = accessToken24.isClientOnly();
        java.util.Date date28 = accessToken24.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser29 = osiamUserService3.getCurrentUserBasic(accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12082");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.addScope(scope6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException10 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean11 = scope8.equals((java.lang.Object) invalidAttributeException10);
        java.lang.String str12 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder5.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder23 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService24 = builder23.build();
        org.osiam.client.OsiamGroupService osiamGroupService25 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        java.lang.String str34 = osiamGroupService25.extractErrorMessageForbidden(accessToken32);
        java.util.Date date35 = accessToken32.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder19.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken accessToken37 = builder19.build();
        boolean boolean38 = accessToken37.isExpired();
        java.lang.String str39 = accessToken37.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group40 = osiamGroupService2.createGroup(group3, accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(osiamGroupService24);
        org.junit.Assert.assertNotNull(osiamGroupService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test12083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12083");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.Query query18 = query9.nextPage();
        long long19 = query18.getStartIndex();
        int int20 = query18.getCount();
        java.lang.String str21 = query18.getSortOrder();
        long long22 = query18.getStartIndex();
        java.lang.String str23 = query18.toString();
        java.lang.String str24 = query18.getSortBy();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 11L + "'", long19 == 11L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 11L + "'", long22 == 11L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test12084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12084");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder1.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder1.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder1.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.Scope scope18 = new org.osiam.client.oauth.Scope("");
        java.lang.String str19 = scope18.toString();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setUserName("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test12085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12085");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.core.JsonParser jsonParser9 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken17.getScopes();
        boolean boolean20 = accessToken17.isClientOnly();
        java.lang.Object obj21 = null;
        boolean boolean22 = accessToken17.equals(obj21);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = accessToken17.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = scopeSetJsonDeserializer8.deserialize(jsonParser9, deserializationContext10, scopeSet23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(scopeSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(scopeSet23);
    }

    @Test
    public void test12086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12086");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder2.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        boolean boolean8 = accessToken7.isRefreshTokenExpired();
        java.lang.String str9 = accessToken7.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = accessToken7.getScopes();
        boolean boolean11 = scopeSerializer0.isEmpty(scopeSet10);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer0.unwrappingSerializer(nameTransformer12);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper14 = null;
        com.fasterxml.jackson.databind.JavaType javaType15 = null;
        scopeSetJsonSerializer13.acceptJsonFormatVisitor(jsonFormatVisitorWrapper14, javaType15);
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService23 = builder22.build();
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        boolean boolean32 = accessToken30.isClientOnly();
        java.lang.String str33 = accessToken30.getClientId();
        java.lang.String str34 = authService23.extractErrorMessageForbidden(accessToken30);
        java.lang.String str35 = accessToken30.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserId();
        boolean boolean45 = accessToken42.isRefreshTokenExpired();
        boolean boolean46 = accessToken30.equals((java.lang.Object) accessToken42);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet47 = accessToken42.getScopes();
        boolean boolean48 = scopeSetJsonSerializer13.isEmpty(scopeSet47);
        boolean boolean49 = scopeSetJsonSerializer13.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider50 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer51 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean52 = scopeSerializer51.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer53 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer54 = scopeSerializer51.unwrappingSerializer(nameTransformer53);
        org.osiam.client.OsiamGroupService.Builder builder56 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService57 = builder56.build();
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        boolean boolean65 = accessToken64.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet66 = accessToken64.getScopes();
        java.lang.String str67 = osiamGroupService57.extractErrorMessageForbidden(accessToken64);
        boolean boolean68 = accessToken64.isExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet69 = accessToken64.getScopes();
        boolean boolean70 = scopeSetJsonSerializer54.isEmpty(scopeSet69);
        boolean boolean71 = scopeSetJsonSerializer13.isEmpty(serializerProvider50, scopeSet69);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass72 = scopeSetJsonSerializer13.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        boolean boolean80 = accessToken79.isRefreshTokenExpired();
        boolean boolean81 = accessToken79.isClientOnly();
        java.lang.String str82 = accessToken79.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken79);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet84 = accessToken79.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator85 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider86 = null;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer87 = null;
        // The following exception was thrown during execution in test generation
        try {
            scopeSetJsonSerializer13.serializeWithType(scopeSet84, jsonGenerator85, serializerProvider86, typeSerializer87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(scopeSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(authService23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(scopeSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer54);
        org.junit.Assert.assertNotNull(osiamGroupService57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(scopeSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Insufficient scopes: []" + "'", str67, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(scopeSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(scopeSetClass72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(scopeSet84);
    }

    @Test
    public void test12087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12087");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService5.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.getSortOrder();
        java.lang.String str28 = query25.getSortBy();
        java.lang.String str29 = query25.getFilter();
        java.lang.String str30 = query25.toString();
        boolean boolean31 = accessToken13.equals((java.lang.Object) query25);
        java.util.Date date32 = accessToken13.getExpiresAt();
        java.lang.String str33 = accessToken13.getUserName();
        java.lang.String str34 = osiamGroupService5.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        boolean boolean43 = accessToken41.isClientOnly();
        java.lang.String str44 = accessToken41.getClientId();
        boolean boolean45 = accessToken41.isClientOnly();
        java.lang.String str46 = accessToken41.getToken();
        java.lang.String str47 = accessToken41.getToken();
        boolean boolean48 = accessToken41.isRefreshTokenExpired();
        java.lang.String str49 = osiamGroupService5.extractErrorMessageForbidden(accessToken41);
        java.lang.String str50 = accessToken41.getToken();
        java.lang.String str51 = osiamGroupService2.extractErrorMessageForbidden(accessToken41);
        org.osiam.resources.scim.Group group53 = null;
        org.osiam.client.OsiamGroupService.Builder builder55 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService56 = builder55.build();
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        java.util.Date date64 = accessToken63.getExpiresAt();
        java.lang.String str65 = accessToken63.getUserName();
        java.lang.String str66 = accessToken63.toString();
        java.lang.String str67 = osiamGroupService56.extractErrorMessageForbidden(accessToken63);
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        java.lang.String str75 = accessToken74.toString();
        java.lang.String str76 = accessToken74.getType();
        boolean boolean77 = accessToken74.isExpired();
        java.util.Date date78 = accessToken74.getExpiresAt();
        boolean boolean79 = accessToken74.isClientOnly();
        java.lang.String str80 = osiamGroupService56.extractErrorMessageForbidden(accessToken74);
        java.lang.String str81 = accessToken74.getRefreshToken();
        java.lang.String str82 = accessToken74.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken74);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group84 = osiamGroupService2.replaceResource("org.osiam.client.exception.OsiamRequestException: Authorization", group53, accessToken74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str30, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Bearer " + "'", str46, "Bearer ");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Bearer " + "'", str47, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Bearer " + "'", str50, "Bearer ");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str66, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Insufficient scopes: []" + "'", str67, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str75, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Insufficient scopes: []" + "'", str80, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Bearer " + "'", str82, "Bearer ");
    }

    @Test
    public void test12088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12088");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("ME");
        org.osiam.client.helper.ScopeSerializer scopeSerializer2 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean3 = scopeSerializer2.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer5 = scopeSerializer2.unwrappingSerializer(nameTransformer4);
        org.osiam.client.helper.ScopeSerializer scopeSerializer6 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean7 = scopeSerializer6.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer9 = scopeSerializer6.unwrappingSerializer(nameTransformer8);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException18 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean19 = scope16.equals((java.lang.Object) invalidAttributeException18);
        java.lang.String str20 = scope16.getValue();
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str23 = scope22.toString();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str26 = scope25.getValue();
        java.lang.String str27 = scope25.getValue();
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException30 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean31 = scope28.equals((java.lang.Object) invalidAttributeException30);
        java.lang.String str32 = scope28.getValue();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        boolean boolean44 = scope42.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray46 = new org.osiam.client.oauth.Scope[] { scope15, scope16, scope21, scope22, scope24, scope25, scope28, scope33, scope34, scope35, scope36, scope40, scope41, scope42, scope45 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet47 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet47, scopeArray46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder12.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet47);
        boolean boolean50 = scopeSetJsonSerializer9.isEmpty(serializerProvider10, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet47);
        boolean boolean51 = scopeSerializer2.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet47);
        boolean boolean52 = scopeSerializer2.isUnwrappingSerializer();
        boolean boolean53 = scopeSerializer2.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer54 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer55 = scopeSerializer2.unwrappingSerializer(nameTransformer54);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        java.util.Date date68 = accessToken67.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder58.setRefreshTokenExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder58.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder58.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        boolean boolean81 = accessToken80.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet82 = accessToken80.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder73.addScopes(scopeSet82);
        boolean boolean84 = scope56.equals((java.lang.Object) scopeSet82);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator85 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider86 = null;
        scopeSerializer2.serialize(scopeSet82, jsonGenerator85, serializerProvider86);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder1.addScopes(scopeSet82);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ME" + "'", str23, "ME");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PATCH" + "'", str26, "PATCH");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PATCH" + "'", str27, "PATCH");
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GET" + "'", str32, "GET");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scopeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(scopeSet82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test12089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12089");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        org.osiam.client.oauth.Scope scope66 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.addScope(scope69);
        org.osiam.client.oauth.Scope[] scopeArray71 = new org.osiam.client.oauth.Scope[] { scope66, scope69 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet72 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet72, scopeArray71);
        boolean boolean74 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet72);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer75 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer76 = scopeSerializer0.unwrappingSerializer(nameTransformer75);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer77 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer78 = scopeSerializer0.unwrappingSerializer(nameTransformer77);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date82 = null;
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder81.setRefreshTokenExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder81.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder85.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken88 = builder85.build();
        java.util.Date date89 = accessToken88.getExpiresAt();
        java.lang.String str90 = accessToken88.getClientId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet91 = accessToken88.getScopes();
        boolean boolean92 = scopeSetJsonSerializer78.isEmpty(serializerProvider79, scopeSet91);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(scopeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer76);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer78);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(accessToken88);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(scopeSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test12090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12090");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.filter("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.ascending("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.filter("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.attributes("org.osiam.client.exception.OsiamClientException: hi!");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
    }

    @Test
    public void test12091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12091");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.toString();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.addScope(scope49);
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException53 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean54 = scope51.equals((java.lang.Object) invalidAttributeException53);
        java.lang.String str55 = scope51.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder48.addScope(scope51);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet68 = accessToken67.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken67);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken67);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteGroup("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str42, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GET" + "'", str55, "GET");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertNotNull(scopeSet68);
    }

    @Test
    public void test12092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12092");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder13.setRefreshToken("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test12093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12093");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setEndpoint("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder10.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector.Builder builder18 = builder10.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test12094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12094");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService6.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str20 = osiamGroupService11.extractErrorMessageForbidden(accessToken18);
        java.util.Date date21 = accessToken18.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean24 = accessToken18.equals((java.lang.Object) scope23);
        java.lang.String str25 = accessToken18.getRefreshToken();
        java.lang.String str26 = accessToken18.getToken();
        java.lang.String str27 = accessToken18.getUserId();
        java.lang.String str28 = osiamGroupService6.extractErrorMessageForbidden(accessToken18);
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken37 = builder34.build();
        java.util.Date date38 = accessToken37.getExpiresAt();
        java.lang.String str39 = accessToken37.getClientId();
        java.lang.String str40 = accessToken37.getType();
        java.lang.String str41 = osiamGroupService6.extractErrorMessageForbidden(accessToken37);
        java.lang.String str42 = accessToken37.getToken();
        java.lang.String str43 = accessToken37.toString();
        java.util.Date date44 = accessToken37.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("", accessToken37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Bearer " + "'", str26, "Bearer ");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Bearer " + "'", str42, "Bearer ");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str43, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12095");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientId("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder8.setClientSecret("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.resources.scim.User user17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.lang.String str21 = accessToken20.toString();
        java.lang.String str22 = accessToken20.getType();
        java.lang.String str23 = accessToken20.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user24 = osiamConnector15.replaceUser("org.osiam.client.exception.NoResultException: authorization_code", user17, accessToken20);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test12096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12096");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.descending("hi!");
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        java.lang.String str16 = query15.toString();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getSortBy();
        java.lang.String str19 = query15.getFilter();
        java.lang.String str20 = query15.getSortOrder();
        java.lang.String str21 = query15.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder(query15);
        long long23 = query15.getStartIndex();
        org.osiam.client.query.Query query24 = query15.nextPage();
        java.lang.String str25 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder26 = new org.osiam.client.query.QueryBuilder(query15);
        java.lang.String str27 = query15.getAttributes();
        java.lang.String str28 = query15.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder29 = osiamConnector5.createQueryBuilder(query15);
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.descending("hi!");
        org.osiam.client.query.Query query39 = queryBuilder38.build();
        org.osiam.client.query.Query query40 = queryBuilder38.build();
        java.lang.String str41 = query40.getSortBy();
        java.lang.String str42 = query40.getFilter();
        java.lang.String str43 = query40.toString();
        java.lang.String str44 = query40.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query40);
        org.osiam.client.AuthService.Builder builder48 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder50 = builder48.setClientId("ME");
        org.osiam.client.AuthService.Builder builder52 = builder48.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService53 = builder48.build();
        org.osiam.client.AuthService authService54 = builder48.build();
        org.osiam.client.OsiamGroupService.Builder builder56 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService57 = builder56.build();
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        java.util.Date date65 = accessToken64.getExpiresAt();
        java.lang.String str66 = accessToken64.getRefreshToken();
        boolean boolean67 = accessToken64.isClientOnly();
        java.lang.String str68 = osiamGroupService57.extractErrorMessageForbidden(accessToken64);
        org.osiam.client.oauth.AccessToken.Builder builder70 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date71 = null;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setRefreshTokenExpiresAt(date71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken75 = builder74.build();
        java.util.Date date76 = accessToken75.getExpiresAt();
        java.lang.String str77 = accessToken75.getUserName();
        java.util.Date date78 = accessToken75.getRefreshTokenExpiresAt();
        java.lang.String str79 = osiamGroupService57.extractErrorMessageForbidden(accessToken75);
        java.lang.String str80 = accessToken75.getToken();
        java.lang.String str81 = accessToken75.getClientId();
        java.lang.String str82 = authService54.extractErrorMessageForbidden(accessToken75);
        java.util.Date date83 = accessToken75.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteGroup("org.osiam.client.exception.OsiamRequestException: ", accessToken75);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Authorization" + "'", str21, "Authorization");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Authorization" + "'", str27, "Authorization");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(authService53);
        org.junit.Assert.assertNotNull(authService54);
        org.junit.Assert.assertNotNull(osiamGroupService57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Insufficient scopes: []" + "'", str68, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Insufficient scopes: []" + "'", str79, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Bearer " + "'", str80, "Bearer ");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Insufficient scopes: []" + "'", str82, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12097");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken8 = builder5.build();
        java.util.Date date9 = accessToken8.getExpiresAt();
        java.lang.String str10 = accessToken8.toString();
        java.lang.String str11 = accessToken8.getRefreshToken();
        boolean boolean12 = accessToken8.isRefreshTokenExpired();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str10, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test12098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12098");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientRedirectUri("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder13 = builder7.setClientSecret("authorization_code");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        javax.ws.rs.client.WebTarget webTarget19 = osiamGroupService18.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService18.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget21 = osiamGroupService18.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService18.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        boolean boolean31 = accessToken29.isClientOnly();
        java.lang.String str32 = accessToken29.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet33 = accessToken29.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        java.lang.String str35 = osiamGroupService18.extractErrorMessageForbidden(accessToken29);
        boolean boolean36 = accessToken29.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            authService14.revokeAllAccessTokens("Query [attributes=Authorization, filter=org.osiam.client.exception.NoResultException: authorization_code, sortBy=org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10], sortOrder=ascending, startIndex=1, count=10]", accessToken29);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(webTarget19);
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(webTarget21);
        org.junit.Assert.assertNotNull(webTarget22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(scopeSet33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test12099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12099");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query10 = queryBuilder7.build();
        org.osiam.client.query.Query query11 = query10.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.lang.String str20 = accessToken18.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.descending("hi!");
        org.osiam.client.query.Query query30 = queryBuilder29.build();
        java.lang.String str31 = query30.toString();
        java.lang.String str32 = query30.getSortOrder();
        java.lang.String str33 = query30.getSortBy();
        java.lang.String str34 = query30.getFilter();
        java.lang.String str35 = query30.getSortOrder();
        java.lang.String str36 = query30.getAttributes();
        boolean boolean37 = accessToken18.equals((java.lang.Object) query30);
        java.lang.String str38 = accessToken18.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        boolean boolean40 = accessToken18.isRefreshTokenExpired();
        java.lang.String str41 = accessToken18.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult42 = osiamUserService2.searchUsers(query10, accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertNotNull(query11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "descending" + "'", str32, "descending");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "descending" + "'", str35, "descending");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Authorization" + "'", str36, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Bearer " + "'", str38, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test12100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12100");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder19 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService20 = builder19.build();
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str30 = osiamGroupService21.extractErrorMessageForbidden(accessToken28);
        java.util.Date date31 = accessToken28.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder15.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken accessToken33 = builder15.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        java.util.Date date35 = accessToken33.getExpiresAt();
        java.lang.String str36 = accessToken33.getUserId();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(osiamGroupService20);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test12101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12101");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder8.filter("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.ascending("org.osiam.client.exception.ForbiddenException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.startIndex((long) (short) 10);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test12102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12102");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setType("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str19 = scope18.toString();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder13.addScope(scope18);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder26.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.lang.Object obj40 = null;
        boolean boolean41 = accessToken39.equals(obj40);
        boolean boolean42 = accessToken39.isExpired();
        java.util.Date date43 = accessToken39.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder26.setExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder13.setExpiresAt(date43);
        org.osiam.client.OsiamGroupService.Builder builder47 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService48 = builder47.build();
        org.osiam.client.OsiamGroupService osiamGroupService49 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken56);
        java.lang.String str58 = osiamGroupService49.extractErrorMessageForbidden(accessToken56);
        java.util.Date date59 = accessToken56.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder45.setExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder7.setRefreshTokenExpiresAt(date59);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PUT" + "'", str19, "PUT");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(osiamGroupService48);
        org.junit.Assert.assertNotNull(osiamGroupService49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Insufficient scopes: []" + "'", str58, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test12103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12103");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.OsiamConnector.Builder builder25 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder27 = builder25.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder29 = builder27.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder31 = builder29.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder33 = builder29.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder35 = builder29.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder37 = builder29.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder39 = builder37.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder41 = builder37.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector42 = builder37.build();
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.getAttributes();
        java.lang.String str54 = query52.toString();
        java.lang.String str55 = query52.getSortOrder();
        org.osiam.client.query.Query query56 = query52.nextPage();
        java.lang.String str57 = query52.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector42.createQueryBuilder(query52);
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector9.createQueryBuilder(query52);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder66.descending("hi!");
        org.osiam.client.query.Query query69 = queryBuilder68.build();
        java.lang.String str70 = query69.toString();
        java.lang.String str71 = query69.getSortOrder();
        java.lang.String str72 = query69.getSortBy();
        java.lang.String str73 = query69.getFilter();
        java.lang.String str74 = query69.getSortOrder();
        java.lang.String str75 = query69.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder76 = new org.osiam.client.query.QueryBuilder(query69);
        long long77 = query69.getStartIndex();
        org.osiam.client.query.Query query78 = query69.nextPage();
        long long79 = query78.getStartIndex();
        org.osiam.client.query.Query query80 = query78.nextPage();
        long long81 = query80.getStartIndex();
        org.osiam.client.query.Query query82 = query80.nextPage();
        org.osiam.client.oauth.AccessToken.Builder builder84 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setRefreshTokenExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder84.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder88.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken91 = builder88.build();
        java.util.Date date92 = accessToken91.getExpiresAt();
        java.lang.String str93 = accessToken91.toString();
        java.lang.String str94 = accessToken91.toString();
        java.util.Date date95 = accessToken91.getExpiresAt();
        boolean boolean96 = accessToken91.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult97 = osiamConnector9.searchGroups(query82, accessToken91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(osiamConnector42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Authorization" + "'", str53, "Authorization");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "descending" + "'", str55, "descending");
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(query69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str70, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "descending" + "'", str71, "descending");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "descending" + "'", str74, "descending");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Authorization" + "'", str75, "Authorization");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(query78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 11L + "'", long79 == 11L);
        org.junit.Assert.assertNotNull(query80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 21L + "'", long81 == 21L);
        org.junit.Assert.assertNotNull(query82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(accessToken91);
        org.junit.Assert.assertNotNull(date92);
        org.junit.Assert.assertEquals(date92.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str93, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str94, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(date95);
        org.junit.Assert.assertEquals(date95.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test12104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12104");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserId();
        java.lang.String str18 = accessToken15.getClientId();
        java.lang.String str19 = accessToken15.getUserId();
        java.lang.String str20 = accessToken15.toString();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken15.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.revokeAllAccessTokens("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str20, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(scopeSet21);
    }

    @Test
    public void test12105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12105");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.lang.String str15 = accessToken14.toString();
        java.lang.String str16 = accessToken14.getClientId();
        java.util.Date date17 = accessToken14.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConnectionInitializationException: PATCH, userId=org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]]", accessToken14);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12106");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.lang.String str14 = accessToken13.toString();
        java.lang.String str15 = accessToken13.getClientId();
        org.osiam.client.OsiamConnector.Builder builder16 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.descending("hi!");
        org.osiam.client.query.Query query33 = queryBuilder32.build();
        java.lang.String str34 = query33.toString();
        java.lang.String str35 = query33.toString();
        java.lang.String str36 = query33.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder37 = osiamConnector23.createQueryBuilder(query33);
        org.osiam.client.query.QueryBuilder queryBuilder38 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder40.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.descending("hi!");
        org.osiam.client.query.Query query47 = queryBuilder46.build();
        org.osiam.client.query.QueryBuilder queryBuilder48 = osiamConnector23.createQueryBuilder(query47);
        boolean boolean49 = accessToken13.equals((java.lang.Object) queryBuilder48);
        java.util.Date date50 = accessToken13.getExpiresAt();
        java.lang.String str51 = authService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.AuthService.Builder builder53 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder61 = builder59.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder63 = builder61.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder65 = builder61.setClientSecret("PATCH");
        org.osiam.client.AuthService authService66 = builder65.build();
        org.osiam.client.AuthService authService67 = builder65.build();
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.AccessToken.Builder builder70 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope71 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.addScope(scope71);
        org.osiam.client.oauth.Scope scope73 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException75 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean76 = scope73.equals((java.lang.Object) invalidAttributeException75);
        java.lang.String str77 = scope73.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder70.addScope(scope73);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder80.setUserId("");
        org.osiam.client.oauth.Scope scope83 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.addScope(scope83);
        org.osiam.client.oauth.Scope scope86 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope88 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope[] scopeArray89 = new org.osiam.client.oauth.Scope[] { scope68, scope83, scope86, scope88 };
        java.net.URI uRI90 = authService67.getAuthorizationUri(scopeArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken91 = authService6.retrieveAccessToken(scopeArray89);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(query47);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(authService66);
        org.junit.Assert.assertNotNull(authService67);
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertNotNull(scope71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(scope73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "GET" + "'", str77, "GET");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(scope83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(scopeArray89);
        org.junit.Assert.assertNotNull(uRI90);
    }

    @Test
    public void test12107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12107");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService7.targetEndpoint;
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        java.lang.String str37 = accessToken32.getUserId();
        java.lang.String str38 = accessToken32.getClientId();
        java.lang.String str39 = osiamGroupService7.extractErrorMessageForbidden(accessToken32);
        boolean boolean40 = accessToken32.isRefreshTokenExpired();
        java.lang.String str41 = accessToken32.getRefreshToken();
        java.util.Date date42 = accessToken32.getExpiresAt();
        java.lang.String str43 = accessToken32.getRefreshToken();
        java.lang.String str44 = osiamGroupService2.extractErrorMessageForbidden(accessToken32);
        org.osiam.client.AuthService.Builder builder46 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientId("ME");
        org.osiam.client.AuthService.Builder builder50 = builder48.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService51 = builder50.build();
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        boolean boolean60 = accessToken58.isClientOnly();
        java.lang.String str61 = accessToken58.getClientId();
        java.lang.String str62 = authService51.extractErrorMessageForbidden(accessToken58);
        java.lang.String str63 = accessToken58.getUserId();
        java.lang.String str64 = accessToken58.getClientId();
        java.lang.String str65 = osiamGroupService2.extractErrorMessageForbidden(accessToken58);
        javax.ws.rs.core.Response.StatusType statusType67 = null;
        org.osiam.client.AuthService.Builder builder69 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder71 = builder69.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService72 = builder71.build();
        org.osiam.client.AuthService.Builder builder74 = builder71.setClientRedirectUri("PATCH");
        org.osiam.client.AuthService authService75 = builder74.build();
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken82 = builder81.build();
        java.util.Date date83 = accessToken82.getExpiresAt();
        java.lang.String str84 = accessToken82.getRefreshToken();
        java.lang.String str85 = accessToken82.getType();
        java.lang.String str86 = accessToken82.getClientId();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException88 = new org.osiam.client.exception.InvalidAttributeException("ADMIN");
        boolean boolean89 = accessToken82.equals((java.lang.Object) invalidAttributeException88);
        java.lang.String str90 = authService75.extractErrorMessageForbidden(accessToken82);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]", statusType67, accessToken82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(authService51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Insufficient scopes: []" + "'", str65, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(authService72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(authService75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Insufficient scopes: []" + "'", str90, "Insufficient scopes: []");
    }

    @Test
    public void test12108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12108");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientSecret("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector11 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder18.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshToken("DELETE");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.lang.String str28 = accessToken27.getRefreshToken();
        java.lang.String str29 = accessToken27.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken27);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group31 = osiamConnector11.getGroup("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH", accessToken27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DELETE" + "'", str28, "DELETE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DELETE" + "'", str29, "DELETE");
    }

    @Test
    public void test12109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12109");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService7.targetEndpoint;
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = authService25.extractErrorMessageForbidden(accessToken32);
        java.lang.String str37 = accessToken32.getUserId();
        java.lang.String str38 = accessToken32.getClientId();
        java.lang.String str39 = osiamGroupService7.extractErrorMessageForbidden(accessToken32);
        boolean boolean40 = accessToken32.isRefreshTokenExpired();
        java.lang.String str41 = accessToken32.getRefreshToken();
        java.util.Date date42 = accessToken32.getExpiresAt();
        java.lang.String str43 = accessToken32.getRefreshToken();
        java.lang.String str44 = osiamGroupService2.extractErrorMessageForbidden(accessToken32);
        org.osiam.client.AuthService.Builder builder46 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientId("ME");
        org.osiam.client.AuthService.Builder builder50 = builder48.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService51 = builder50.build();
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        boolean boolean60 = accessToken58.isClientOnly();
        java.lang.String str61 = accessToken58.getClientId();
        java.lang.String str62 = authService51.extractErrorMessageForbidden(accessToken58);
        java.lang.String str63 = accessToken58.getUserId();
        java.lang.String str64 = accessToken58.getClientId();
        java.lang.String str65 = osiamGroupService2.extractErrorMessageForbidden(accessToken58);
        org.osiam.resources.scim.Group group67 = null;
        org.osiam.client.OsiamGroupService.Builder builder69 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService70 = builder69.build();
        org.osiam.client.OsiamGroupService osiamGroupService71 = builder69.build();
        javax.ws.rs.client.WebTarget webTarget72 = osiamGroupService71.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget73 = osiamGroupService71.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        boolean boolean81 = accessToken80.isRefreshTokenExpired();
        java.lang.String str82 = accessToken80.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet83 = accessToken80.getScopes();
        java.lang.String str84 = osiamGroupService71.extractErrorMessageForbidden(accessToken80);
        java.lang.String str85 = accessToken80.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group86 = osiamGroupService2.replaceResource("PATCH", group67, accessToken80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(authService51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Insufficient scopes: []" + "'", str65, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService70);
        org.junit.Assert.assertNotNull(osiamGroupService71);
        org.junit.Assert.assertNotNull(webTarget72);
        org.junit.Assert.assertNotNull(webTarget73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(scopeSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Insufficient scopes: []" + "'", str84, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test12110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12110");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = osiamGroupService2.extractErrorMessageDefault("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
    }

    @Test
    public void test12111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12111");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser9 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext10 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = scopeDeserializer0.deserializeWithType(jsonParser9, deserializationContext10, typeDeserializer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
    }

    @Test
    public void test12112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12112");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder1.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder1.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder1.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken23.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.addScopes(scopeSet25);
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder26.setType("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.oauth.AccessToken accessToken30 = builder26.build();
        java.lang.String str31 = accessToken30.getClientId();
        java.lang.String str32 = accessToken30.getToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Bearer " + "'", str32, "Bearer ");
    }

    @Test
    public void test12113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12113");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeDeserializer0.getNullValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty12 = scopeDeserializer0.findBackReference("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(scopeSet10);
    }

    @Test
    public void test12114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12114");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserName();
        org.osiam.client.helper.ScopeSerializer scopeSerializer9 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str22 = scope21.toString();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str25 = scope24.getValue();
        java.lang.String str26 = scope24.getValue();
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        boolean boolean43 = scope41.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray45 = new org.osiam.client.oauth.Scope[] { scope14, scope15, scope20, scope21, scope23, scope24, scope27, scope32, scope33, scope34, scope35, scope39, scope40, scope41, scope44 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet46 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet46, scopeArray45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder11.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        boolean boolean49 = scopeSerializer9.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet58 = accessToken56.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator59 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider60 = null;
        scopeSerializer9.serialize(scopeSet58, jsonGenerator59, serializerProvider60);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet71 = accessToken69.getScopes();
        boolean boolean72 = scopeSerializer9.isEmpty(serializerProvider62, scopeSet71);
        boolean boolean73 = accessToken6.equals((java.lang.Object) scopeSerializer9);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer74 = scopeSerializer9.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet75 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider77 = null;
        scopeSerializer9.serialize(scopeSet75, jsonGenerator76, serializerProvider77);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper79 = null;
        com.fasterxml.jackson.databind.JavaType javaType80 = null;
        scopeSerializer9.acceptJsonFormatVisitor(jsonFormatVisitorWrapper79, javaType80);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass82 = scopeSerializer9.handledType();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ME" + "'", str22, "ME");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PATCH" + "'", str26, "PATCH");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scopeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(scopeSet58);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(scopeSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer74);
        org.junit.Assert.assertNull(scopeSetClass82);
    }

    @Test
    public void test12115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12115");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.lang.String str24 = authService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean25 = accessToken22.isRefreshTokenExpired();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("POST");
        boolean boolean28 = accessToken22.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = accessToken22.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService3.deleteUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH", accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test12116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12116");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder15.setType("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshToken("ME");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setClientId("org.osiam.client.exception.ConnectionInitializationException: Cannot connect to server");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test12117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12117");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.query.QueryBuilder queryBuilder16 = osiamConnector15.createQueryBuilder();
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("PUT");
        org.osiam.client.AuthService authService19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        java.util.Date date45 = accessToken26.getExpiresAt();
        java.lang.String str46 = accessToken26.getUserName();
        java.lang.String str47 = authService19.extractErrorMessageForbidden(accessToken26);
        java.lang.String str48 = accessToken26.getType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList49 = osiamConnector15.getAllGroups(accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(authService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test12118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12118");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]");
    }

    @Test
    public void test12119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12119");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.lang.Object obj28 = null;
        boolean boolean29 = accessToken27.equals(obj28);
        boolean boolean30 = accessToken27.isExpired();
        java.util.Date date31 = accessToken27.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder19.setExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserName("POST");
        org.osiam.client.OsiamGroupService.Builder builder36 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService37 = builder36.build();
        org.osiam.client.OsiamGroupService osiamGroupService38 = builder36.build();
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken45);
        java.lang.String str47 = osiamGroupService38.extractErrorMessageForbidden(accessToken45);
        java.util.Date date48 = accessToken45.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken45);
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean51 = accessToken45.equals((java.lang.Object) scope50);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder34.addScope(scope50);
        org.osiam.client.OsiamConnector.Builder builder53 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder55 = builder53.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder57 = builder55.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder59 = builder57.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder61 = builder57.setClientId("Insufficient scopes: []");
        boolean boolean62 = scope50.equals((java.lang.Object) builder61);
        org.osiam.client.OsiamConnector.Builder builder64 = builder61.setClientRedirectUri("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(osiamGroupService37);
        org.junit.Assert.assertNotNull(osiamGroupService38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test12120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12120");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12121");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer6.getNullValue();
        java.lang.Class<?> wildcardClass8 = scopeSetJsonDeserializer6.handledType();
        java.lang.Class<?> wildcardClass9 = scopeSetJsonDeserializer6.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser10 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext11 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = scopeSetJsonDeserializer6.deserializeWithType(jsonParser10, deserializationContext11, typeDeserializer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test12122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12122");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer0.handledType();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test12123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12123");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserName("DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        boolean boolean28 = accessToken26.isClientOnly();
        java.lang.String str29 = accessToken26.getClientId();
        boolean boolean30 = accessToken26.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserName("Authorization");
        boolean boolean47 = accessToken26.equals((java.lang.Object) builder44);
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.addScope(scope50);
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        java.lang.String str56 = scope52.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder49.addScope(scope52);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.addScope(scope64);
        org.osiam.client.oauth.GrantType grantType66 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str67 = grantType66.getUrlParam();
        boolean boolean68 = scope64.equals((java.lang.Object) grantType66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder44.addScope(scope64);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder17.addScope(scope64);
        org.osiam.client.oauth.AccessToken accessToken71 = builder70.build();
        org.osiam.client.oauth.AccessToken accessToken72 = builder70.build();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GET" + "'", str56, "GET");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + grantType66 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType66.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "client_credentials" + "'", str67, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(accessToken71);
        org.junit.Assert.assertNotNull(accessToken72);
    }

    @Test
    public void test12124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12124");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder20.build();
        org.osiam.resources.scim.User user25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        java.util.Date date34 = accessToken32.getExpiresAt();
        boolean boolean35 = accessToken32.isRefreshTokenExpired();
        java.util.Date date36 = accessToken32.getExpiresAt();
        java.lang.String str37 = accessToken32.getUserName();
        boolean boolean38 = accessToken32.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        java.util.Date date40 = accessToken32.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user41 = osiamConnector23.replaceUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConnectionInitializationException: Bearer , userId=, userName=org.osiam.client.exception.NoResultException: refresh_token]", user25, accessToken32);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12125");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken15 = builder12.build();
        java.lang.String str16 = accessToken15.toString();
        java.lang.String str17 = accessToken15.getToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList18 = osiamGroupService6.getAllResources(accessToken15);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Bearer " + "'", str17, "Bearer ");
    }

    @Test
    public void test12126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12126");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean15 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer14.unwrappingSerializer(nameTransformer16);
        boolean boolean18 = scopeSerializer14.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer19 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer20 = scopeSerializer14.unwrappingSerializer(nameTransformer19);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper21 = null;
        com.fasterxml.jackson.databind.JavaType javaType22 = null;
        scopeSerializer14.acceptJsonFormatVisitor(jsonFormatVisitorWrapper21, javaType22);
        boolean boolean24 = scopeSerializer14.usesObjectId();
        boolean boolean25 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider26 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer27 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean28 = scopeSerializer27.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass29 = scopeSerializer27.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet39 = accessToken36.getScopes();
        boolean boolean40 = scopeSerializer27.isEmpty(scopeSet39);
        boolean boolean41 = scopeSerializer14.isEmpty(serializerProvider26, scopeSet39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder13.addScopes(scopeSet39);
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.lang.String str44 = accessToken43.getToken();
        java.lang.String str45 = accessToken43.getUserName();
        java.util.Date date46 = accessToken43.getExpiresAt();
        boolean boolean47 = accessToken43.isExpired();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(scopeSetClass29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(scopeSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Bearer " + "'", str44, "Bearer ");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.osiam.client.exception.UnauthorizedException: GET" + "'", str45, "org.osiam.client.exception.UnauthorizedException: GET");
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test12127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12127");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService16 = builder13.build();
        org.osiam.client.AuthService.Builder builder18 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientId("ME");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder28 = builder24.setClientId("");
        org.osiam.client.AuthService.Builder builder30 = builder24.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService31 = builder30.build();
        org.osiam.client.oauth.Scope scope33 = new org.osiam.client.oauth.Scope("");
        java.lang.String str34 = scope33.getValue();
        org.osiam.client.oauth.Scope scope36 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope33, scope36 };
        java.net.URI uRI38 = authService31.getAuthorizationUri(scopeArray37);
        java.net.URI uRI39 = authService16.getAuthorizationUri(scopeArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken41 = authService16.retrieveAccessToken("org.osiam.client.exception.NoResultException: ME");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(authService31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertNotNull(uRI38);
        org.junit.Assert.assertNotNull(uRI39);
    }

    @Test
    public void test12128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12128");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserId();
        java.lang.String str14 = accessToken11.getClientId();
        boolean boolean15 = accessToken11.isClientOnly();
        java.lang.String str16 = accessToken11.getClientId();
        java.lang.String str17 = accessToken11.getRefreshToken();
        java.lang.String str18 = accessToken11.getClientId();
        boolean boolean19 = accessToken11.isExpired();
        java.util.Date date20 = accessToken11.getRefreshTokenExpiresAt();
        java.util.Date date21 = accessToken11.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group22 = osiamGroupService3.createResource(group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12129");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("DELETE");
        java.lang.Throwable[] throwableArray2 = noResultException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test12130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12130");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken26 = builder23.build();
        org.osiam.client.oauth.AccessToken accessToken27 = builder23.build();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet28 = accessToken27.getScopes();
        java.util.Date date29 = accessToken27.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken27);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]", accessToken27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertNotNull(scopeSet28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12131");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.lang.String str19 = accessToken18.getType();
        boolean boolean20 = accessToken18.isRefreshTokenExpired();
        java.lang.String str21 = osiamGroupService4.extractErrorMessageForbidden(accessToken18);
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.helper.ScopeSerializer scopeSerializer41 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean42 = scopeSerializer41.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass43 = scopeSerializer41.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        java.util.Date date51 = accessToken50.getExpiresAt();
        java.lang.String str52 = accessToken50.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = accessToken50.getScopes();
        boolean boolean54 = scopeSerializer41.isEmpty(scopeSet53);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder40.addScopes(scopeSet53);
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        boolean boolean63 = accessToken62.isRefreshTokenExpired();
        boolean boolean64 = accessToken62.isClientOnly();
        java.lang.String str65 = accessToken62.getClientId();
        java.lang.String str66 = accessToken62.getClientId();
        java.util.Date date67 = accessToken62.getRefreshTokenExpiresAt();
        java.util.Date date68 = accessToken62.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder55.setExpiresAt(date68);
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        java.lang.String str71 = accessToken70.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group72 = osiamGroupService4.replaceGroup("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]", group24, accessToken70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: [GET POST PUT PATCH DELETE]" + "'", str21, "Insufficient scopes: [GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(webTarget22);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(scopeSetClass43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(scopeSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test12132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12132");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        java.lang.String str19 = query18.toString();
        java.lang.String str20 = query18.getSortOrder();
        java.lang.String str21 = query18.getSortBy();
        java.lang.String str22 = query18.getFilter();
        java.lang.String str23 = query18.toString();
        boolean boolean24 = accessToken6.equals((java.lang.Object) query18);
        java.lang.String str25 = query18.toString();
        java.lang.String str26 = query18.getSortBy();
        long long27 = query18.getStartIndex();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
    }

    @Test
    public void test12133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12133");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getDescription();
        java.lang.String str2 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str3 = oAuthErrorMessage0.getDescription();
        java.lang.String str4 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test12134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12134");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("Query [attributes=Authorization, filter=org.osiam.client.exception.ForbiddenException: hi!, sortBy=ME, sortOrder=descending, startIndex=90, count=10]");
    }

    @Test
    public void test12135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12135");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getRefreshToken();
        boolean boolean17 = accessToken13.isExpired();
        java.lang.String str18 = accessToken13.getRefreshToken();
        java.lang.String str19 = accessToken13.getRefreshToken();
        java.lang.String str20 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.util.Date date29 = accessToken28.getExpiresAt();
        java.lang.String str30 = accessToken28.getUserName();
        java.lang.String str31 = accessToken28.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        java.lang.String str40 = accessToken38.getClientId();
        boolean boolean41 = accessToken28.equals((java.lang.Object) accessToken38);
        java.lang.String str42 = accessToken38.getUserId();
        boolean boolean43 = accessToken38.isClientOnly();
        java.util.Date date44 = accessToken38.getExpiresAt();
        java.lang.String str45 = accessToken38.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group46 = osiamGroupService4.getResource("org.osiam.client.exception.OsiamRequestException: Authorization", accessToken38);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test12136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12136");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str7 = scope6.toString();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        boolean boolean17 = accessToken14.isRefreshTokenExpired();
        java.lang.String str18 = accessToken14.getRefreshToken();
        boolean boolean19 = scope6.equals((java.lang.Object) accessToken14);
        java.lang.String str20 = osiamGroupService5.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.util.Date date28 = accessToken27.getExpiresAt();
        java.lang.String str29 = accessToken27.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken27);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        boolean boolean39 = accessToken37.isClientOnly();
        java.lang.String str40 = accessToken37.getClientId();
        boolean boolean41 = accessToken37.isClientOnly();
        boolean boolean42 = accessToken27.equals((java.lang.Object) accessToken37);
        java.lang.String str43 = accessToken27.getToken();
        java.lang.String str44 = osiamGroupService5.extractErrorMessageForbidden(accessToken27);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.lang.String str53 = accessToken51.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder54 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder58 = queryBuilder56.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder60 = queryBuilder56.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.descending("hi!");
        org.osiam.client.query.Query query63 = queryBuilder62.build();
        java.lang.String str64 = query63.toString();
        java.lang.String str65 = query63.getSortOrder();
        java.lang.String str66 = query63.getSortBy();
        java.lang.String str67 = query63.getFilter();
        java.lang.String str68 = query63.getSortOrder();
        java.lang.String str69 = query63.getAttributes();
        boolean boolean70 = accessToken51.equals((java.lang.Object) query63);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet71 = accessToken51.getScopes();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet72 = accessToken51.getScopes();
        boolean boolean73 = accessToken51.isClientOnly();
        java.lang.String str74 = osiamGroupService5.extractErrorMessageForbidden(accessToken51);
        javax.ws.rs.client.WebTarget webTarget75 = osiamGroupService5.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken82 = builder81.build();
        boolean boolean83 = accessToken82.isRefreshTokenExpired();
        java.lang.String str84 = accessToken82.getUserName();
        java.lang.String str85 = accessToken82.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList86 = osiamGroupService5.getAllResources(accessToken82);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PUT" + "'", str7, "PUT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Bearer " + "'", str43, "Bearer ");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder60);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(query63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str64, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "descending" + "'", str65, "descending");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "descending" + "'", str68, "descending");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Authorization" + "'", str69, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(scopeSet71);
        org.junit.Assert.assertNotNull(scopeSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Insufficient scopes: []" + "'", str74, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test12137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12137");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder48 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder50.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.descending("hi!");
        org.osiam.client.query.Query query57 = queryBuilder56.build();
        java.lang.String str58 = query57.toString();
        java.lang.String str59 = query57.getSortOrder();
        java.lang.String str60 = query57.getFilter();
        java.lang.String str61 = query57.getSortOrder();
        java.lang.String str62 = query57.getAttributes();
        int int63 = query57.getCount();
        org.osiam.client.query.Query query64 = query57.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder65 = osiamConnector13.createQueryBuilder(query64);
        org.osiam.resources.scim.User user67 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        boolean boolean75 = accessToken74.isRefreshTokenExpired();
        java.lang.String str76 = accessToken74.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder77 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder79 = queryBuilder77.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder81 = queryBuilder79.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder83 = queryBuilder79.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder85 = queryBuilder83.descending("hi!");
        org.osiam.client.query.Query query86 = queryBuilder85.build();
        java.lang.String str87 = query86.toString();
        java.lang.String str88 = query86.getSortOrder();
        java.lang.String str89 = query86.getSortBy();
        java.lang.String str90 = query86.getFilter();
        java.lang.String str91 = query86.getSortOrder();
        java.lang.String str92 = query86.getAttributes();
        boolean boolean93 = accessToken74.equals((java.lang.Object) query86);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet94 = accessToken74.getScopes();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet95 = accessToken74.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user96 = osiamConnector13.replaceUser("org.osiam.client.exception.ConflictException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", user67, accessToken74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str58, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "descending" + "'", str59, "descending");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "descending" + "'", str61, "descending");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Authorization" + "'", str62, "Authorization");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(queryBuilder79);
        org.junit.Assert.assertNotNull(queryBuilder81);
        org.junit.Assert.assertNotNull(queryBuilder83);
        org.junit.Assert.assertNotNull(queryBuilder85);
        org.junit.Assert.assertNotNull(query86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str87, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "descending" + "'", str88, "descending");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "descending" + "'", str91, "descending");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Authorization" + "'", str92, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(scopeSet94);
        org.junit.Assert.assertNotNull(scopeSet95);
    }

    @Test
    public void test12138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12138");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.InvalidAttributeException: Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
    }

    @Test
    public void test12139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12139");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("PUT");
        org.osiam.client.AuthService.Builder builder7 = builder1.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12140");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.addScope(scope33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder32.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder28.addScope(scope35);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder28.setRefreshToken("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.lang.String str45 = accessToken44.getUserId();
        java.lang.String str46 = osiamGroupService3.extractErrorMessageForbidden(accessToken44);
        javax.ws.rs.core.Response.StatusType statusType48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = osiamGroupService3.extractErrorMessageDefault("org.osiam.client.exception.ConflictException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]" + "'", str46, "Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
    }

    @Test
    public void test12141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12141");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        org.osiam.client.helper.ScopeSerializer scopeSerializer4 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean5 = scopeSerializer4.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer7 = scopeSerializer4.unwrappingSerializer(nameTransformer6);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException16 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean17 = scope14.equals((java.lang.Object) invalidAttributeException16);
        java.lang.String str18 = scope14.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str21 = scope20.toString();
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str24 = scope23.getValue();
        java.lang.String str25 = scope23.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException36 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean37 = scope34.equals((java.lang.Object) invalidAttributeException36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        boolean boolean42 = scope40.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray44 = new org.osiam.client.oauth.Scope[] { scope13, scope14, scope19, scope20, scope22, scope23, scope26, scope31, scope32, scope33, scope34, scope38, scope39, scope40, scope43 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet45 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet45, scopeArray44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder10.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean48 = scopeSetJsonSerializer7.isEmpty(serializerProvider8, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        boolean boolean49 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet45);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass50 = scopeSerializer0.handledType();
        boolean boolean51 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer52 = scopeSerializer0.getDelegatee();
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date55 = null;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        java.lang.String str69 = accessToken67.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder70 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder72 = queryBuilder70.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder74 = queryBuilder72.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder76 = queryBuilder72.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder78 = queryBuilder76.descending("hi!");
        org.osiam.client.query.Query query79 = queryBuilder78.build();
        java.lang.String str80 = query79.toString();
        java.lang.String str81 = query79.getSortOrder();
        java.lang.String str82 = query79.getSortBy();
        java.lang.String str83 = query79.getFilter();
        java.lang.String str84 = query79.toString();
        boolean boolean85 = accessToken67.equals((java.lang.Object) query79);
        java.util.Date date86 = accessToken67.getExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet87 = accessToken67.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder58.addScopes(scopeSet87);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator89 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider90 = null;
        scopeSerializer0.serialize(scopeSet87, jsonGenerator89, serializerProvider90);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ME" + "'", str21, "ME");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scopeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(scopeSetClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(queryBuilder76);
        org.junit.Assert.assertNotNull(queryBuilder78);
        org.junit.Assert.assertNotNull(query79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str80, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "descending" + "'", str81, "descending");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str84, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test12142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12142");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        org.osiam.client.query.Query query18 = query17.nextPage();
        org.osiam.client.query.Query query19 = query18.previousPage();
        java.lang.String str20 = query19.getFilter();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test12143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12143");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer9 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer10 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeDeserializer0.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardJsonDeserializer9);
        org.junit.Assert.assertNull(wildcardJsonDeserializer10);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
    }

    @Test
    public void test12144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12144");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("ascending");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("GET");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setResourceServerEndpoint("GET");
        org.osiam.client.OsiamConnector.Builder builder20 = builder14.setAuthServerEndpoint("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setEndpoint("Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
        org.osiam.client.OsiamConnector.Builder builder24 = builder20.setResourceServerEndpoint("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test12145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12145");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.startIndex((long) 10);
        org.osiam.client.query.Query query7 = queryBuilder6.build();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(query7);
    }

    @Test
    public void test12146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12146");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeSetJsonDeserializer4.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer6.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser9 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext10 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer11 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean12 = scopeSerializer11.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer14 = scopeSerializer11.unwrappingSerializer(nameTransformer13);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str28 = scope27.toString();
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str31 = scope30.getValue();
        java.lang.String str32 = scope30.getValue();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException35 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean36 = scope33.equals((java.lang.Object) invalidAttributeException35);
        java.lang.String str37 = scope33.getValue();
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        boolean boolean49 = scope47.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray51 = new org.osiam.client.oauth.Scope[] { scope20, scope21, scope26, scope27, scope29, scope30, scope33, scope38, scope39, scope40, scope41, scope45, scope46, scope47, scope50 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet52 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet52, scopeArray51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder17.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet52);
        boolean boolean55 = scopeSetJsonSerializer14.isEmpty(serializerProvider15, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet56 = scopeSetJsonDeserializer6.deserialize(jsonParser9, deserializationContext10, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.LinkedHashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ME" + "'", str28, "ME");
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PATCH" + "'", str32, "PATCH");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GET" + "'", str37, "GET");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scopeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test12147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12147");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.util.Date date15 = accessToken14.getExpiresAt();
        java.lang.String str16 = accessToken14.getUserName();
        boolean boolean17 = accessToken14.isExpired();
        java.lang.String str18 = accessToken14.getToken();
        java.lang.String str19 = osiamGroupService3.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService30 = builder29.build();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.lang.String str39 = authService30.extractErrorMessageForbidden(accessToken37);
        boolean boolean40 = accessToken37.isRefreshTokenExpired();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("POST");
        boolean boolean43 = accessToken37.equals((java.lang.Object) invalidAttributeException42);
        java.util.Date date44 = accessToken37.getExpiresAt();
        java.lang.String str45 = osiamGroupService3.extractErrorMessageForbidden(accessToken37);
        org.osiam.resources.scim.UpdateGroup updateGroup47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        java.lang.String str51 = accessToken50.toString();
        java.lang.String str52 = accessToken50.getUserId();
        java.lang.String str53 = accessToken50.getType();
        java.lang.String str54 = accessToken50.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group55 = osiamGroupService3.updateGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PUT], refreshTokenId=org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", updateGroup47, accessToken50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Bearer " + "'", str18, "Bearer ");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str51, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "client_credentials" + "'", str54, "client_credentials");
    }

    @Test
    public void test12148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12148");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder13 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder13.build();
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder13.build();
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder13.build();
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder13.build();
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        boolean boolean28 = accessToken25.isExpired();
        java.lang.String str29 = accessToken25.getRefreshToken();
        java.lang.String str30 = accessToken25.getUserId();
        java.lang.String str31 = accessToken25.getType();
        java.util.Date date32 = accessToken25.getRefreshTokenExpiresAt();
        java.lang.String str33 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector9.revokeAllAccessTokens("org.osiam.client.exception.NoResultException: ", accessToken25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
    }

    @Test
    public void test12149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12149");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        java.util.Date date8 = accessToken6.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        java.lang.String str19 = query18.toString();
        java.lang.String str20 = query18.getSortOrder();
        org.osiam.client.query.Query query21 = query18.nextPage();
        boolean boolean22 = accessToken6.equals((java.lang.Object) query18);
        java.lang.String str23 = accessToken6.getType();
        java.lang.String str24 = accessToken6.getType();
        java.lang.String str25 = accessToken6.getType();
        java.lang.String str26 = accessToken6.toString();
        java.lang.String str27 = accessToken6.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str26, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12150");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientSecret("2024-03-22T13:51:20.388");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder15 = builder11.setClientSecret("ME");
        org.osiam.client.AuthService authService16 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        java.util.Date date25 = accessToken24.getExpiresAt();
        java.lang.String str26 = accessToken24.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken24);
        // The following exception was thrown during execution in test generation
        try {
            authService16.revokeAllAccessTokens("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: ME", accessToken24);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test12151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12151");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.startIndex((long) 100);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.startIndex((long) 401);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.filter("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.ascending("PUT");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
    }

    @Test
    public void test12152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12152");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("Authorization");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test12153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12153");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder7.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.lang.String str21 = accessToken20.toString();
        boolean boolean22 = accessToken20.isExpired();
        java.lang.String str23 = accessToken20.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group24 = osiamGroupService3.createResource(group5, accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
    }

    @Test
    public void test12154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12154");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserId();
        java.lang.String str9 = accessToken6.getToken();
        boolean boolean10 = accessToken6.isExpired();
        java.lang.String str11 = accessToken6.getClientId();
        java.lang.String str12 = accessToken6.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken6.getScopes();
        java.lang.String str14 = accessToken6.getType();
        boolean boolean15 = accessToken6.isRefreshTokenExpired();
        boolean boolean16 = accessToken6.isExpired();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Bearer " + "'", str9, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test12155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12155");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder3.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str22 = scope21.toString();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str25 = scope24.getValue();
        java.lang.String str26 = scope24.getValue();
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        boolean boolean43 = scope41.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray45 = new org.osiam.client.oauth.Scope[] { scope14, scope15, scope20, scope21, scope23, scope24, scope27, scope32, scope33, scope34, scope35, scope39, scope40, scope41, scope44 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet46 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet46, scopeArray45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder11.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder9.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        boolean boolean50 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet46);
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.lang.String str59 = accessToken57.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder66.descending("hi!");
        org.osiam.client.query.Query query69 = queryBuilder68.build();
        java.lang.String str70 = query69.toString();
        java.lang.String str71 = query69.getSortOrder();
        java.lang.String str72 = query69.getSortBy();
        java.lang.String str73 = query69.getFilter();
        java.lang.String str74 = query69.getSortOrder();
        java.lang.String str75 = query69.getAttributes();
        boolean boolean76 = accessToken57.equals((java.lang.Object) query69);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet77 = accessToken57.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider79 = null;
        scopeSerializer0.serialize(scopeSet77, jsonGenerator78, serializerProvider79);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ME" + "'", str22, "ME");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PATCH" + "'", str25, "PATCH");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PATCH" + "'", str26, "PATCH");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scopeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(query69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str70, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "descending" + "'", str71, "descending");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "descending" + "'", str74, "descending");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Authorization" + "'", str75, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(scopeSet77);
    }

    @Test
    public void test12156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12156");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.Query query14 = query9.nextPage();
        java.lang.String str15 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str17 = query9.getSortBy();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test12157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12157");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=100, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12158");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.AuthService authService16 = builder15.build();
        org.osiam.client.OsiamGroupService.Builder builder18 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.util.Date date27 = accessToken26.getExpiresAt();
        java.lang.String str28 = accessToken26.getRefreshToken();
        boolean boolean29 = accessToken26.isClientOnly();
        java.lang.String str30 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        java.lang.String str39 = accessToken37.getUserId();
        java.lang.String str40 = accessToken37.getToken();
        boolean boolean41 = accessToken37.isExpired();
        java.lang.String str42 = accessToken37.getClientId();
        java.lang.String str43 = accessToken37.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet44 = accessToken37.getScopes();
        java.lang.String str45 = osiamGroupService19.extractErrorMessageForbidden(accessToken37);
        java.lang.String str46 = accessToken37.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken47 = authService16.validateAccessToken(accessToken37);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Bearer " + "'", str40, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(scopeSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test12159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12159");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder15.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder15.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder15.setRefreshToken("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder15.setUserName("");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test12160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12160");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer0.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeSetJsonDeserializer9.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeSetJsonDeserializer9.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNull(scopeSet11);
    }

    @Test
    public void test12161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12161");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder5 = builder2.setEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder7 = builder2.setClientId("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector.Builder builder9 = builder2.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: ");
        org.osiam.client.OsiamConnector osiamConnector10 = builder9.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(osiamConnector10);
    }

    @Test
    public void test12162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12162");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        java.util.Date date16 = accessToken15.getExpiresAt();
        java.util.Date date17 = accessToken15.getRefreshTokenExpiresAt();
        java.util.Date date18 = accessToken15.getRefreshTokenExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken15.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user20 = osiamConnector7.getUser("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PATCH, GET, GET POST PUT PATCH DELETE], refreshTokenId=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]", accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet19);
    }

    @Test
    public void test12163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12163");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException4 = new org.osiam.client.exception.InvalidAttributeException("");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("Bearer ", (java.lang.Throwable) invalidAttributeException4);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException6 = new org.osiam.client.exception.ConnectionInitializationException("client_credentials", (java.lang.Throwable) connectionInitializationException5);
        org.osiam.client.exception.UnauthorizedException unauthorizedException8 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int9 = unauthorizedException8.getHttpStatusCode();
        int int10 = unauthorizedException8.getHttpStatusCode();
        org.osiam.client.exception.OsiamRequestException osiamRequestException14 = new org.osiam.client.exception.OsiamRequestException((int) (short) 100, "org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException15 = new org.osiam.client.exception.ConnectionInitializationException("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", (java.lang.Throwable) osiamRequestException14);
        unauthorizedException8.addSuppressed((java.lang.Throwable) connectionInitializationException15);
        connectionInitializationException5.addSuppressed((java.lang.Throwable) unauthorizedException8);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException18 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.ConnectionInitializationException: PATCH", (java.lang.Throwable) unauthorizedException8);
        org.osiam.client.exception.OsiamRequestException osiamRequestException22 = new org.osiam.client.exception.OsiamRequestException((int) (short) -1, "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray23 = osiamRequestException22.getSuppressed();
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException24 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", (java.lang.Throwable) osiamRequestException22);
        connectionInitializationException18.addSuppressed((java.lang.Throwable) osiamRequestException22);
        java.lang.Throwable[] throwableArray26 = osiamRequestException22.getSuppressed();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 401 + "'", int9 == 401);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 401 + "'", int10 == 401);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test12164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12164");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getClientId();
        boolean boolean10 = accessToken6.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder12.addScope(scope15);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserName("Authorization");
        boolean boolean27 = accessToken6.equals((java.lang.Object) builder24);
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.addScope(scope44);
        org.osiam.client.oauth.GrantType grantType46 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str47 = grantType46.getUrlParam();
        boolean boolean48 = scope44.equals((java.lang.Object) grantType46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder24.addScope(scope44);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer50 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass51 = scopeDeserializer50.handledType();
        java.lang.Class<?> wildcardClass52 = scopeDeserializer50.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer53 = scopeDeserializer50.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader54 = scopeDeserializer50.getObjectIdReader();
        boolean boolean55 = scope44.equals((java.lang.Object) scopeDeserializer50);
        org.osiam.client.OsiamConnector.Builder builder56 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder58 = builder56.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder60 = builder58.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder62 = builder60.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder64 = builder60.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder66 = builder64.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder68 = builder66.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder70 = builder68.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder72 = builder68.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder74 = builder68.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder76 = builder74.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder78 = builder76.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        boolean boolean79 = scope44.equals((java.lang.Object) builder78);
        org.osiam.client.OsiamConnector.Builder builder81 = builder78.setClientSecret("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder83 = builder81.setEndpoint("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder85 = builder81.setClientSecret("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + grantType46 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType46.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "client_credentials" + "'", str47, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNull(wildcardJsonDeserializer53);
        org.junit.Assert.assertNull(objectIdReader54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test12165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12165");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getUserName();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.toString();
        java.lang.String str14 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.resources.scim.Group group15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getClientId();
        java.lang.String str26 = accessToken22.getUserId();
        java.lang.String str27 = accessToken22.getClientId();
        java.lang.String str28 = accessToken22.getRefreshToken();
        java.lang.String str29 = accessToken22.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group30 = osiamGroupService2.createResource(group15, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Bearer " + "'", str29, "Bearer ");
    }

    @Test
    public void test12166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12166");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.lang.String str11 = accessToken9.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = accessToken9.getScopes();
        org.osiam.client.helper.ScopeSerializer scopeSerializer13 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean14 = scopeSerializer13.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str27 = scope26.toString();
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str30 = scope29.getValue();
        java.lang.String str31 = scope29.getValue();
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException42 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean43 = scope40.equals((java.lang.Object) invalidAttributeException42);
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        boolean boolean48 = scope46.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray50 = new org.osiam.client.oauth.Scope[] { scope19, scope20, scope25, scope26, scope28, scope29, scope32, scope37, scope38, scope39, scope40, scope44, scope45, scope46, scope49 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet51 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet51, scopeArray50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder16.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        boolean boolean54 = scopeSerializer13.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet51);
        boolean boolean55 = accessToken9.equals((java.lang.Object) scopeSet51);
        boolean boolean56 = accessToken9.isClientOnly();
        org.osiam.client.OsiamConnector.Builder builder57 = new org.osiam.client.OsiamConnector.Builder();
        boolean boolean58 = accessToken9.equals((java.lang.Object) builder57);
        java.util.Date date59 = accessToken9.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList60 = osiamGroupService2.getAllResources(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(scopeSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ME" + "'", str27, "ME");
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PATCH" + "'", str30, "PATCH");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scopeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12167");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query7 = queryBuilder4.build();
        org.osiam.client.query.Query query8 = query7.nextPage();
        org.osiam.client.query.Query query9 = query8.previousPage();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.filter("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.filter("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(query7);
        org.junit.Assert.assertNotNull(query8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
    }

    @Test
    public void test12168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12168");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        boolean boolean9 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer11);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer13 = scopeSetJsonDeserializer5.getDelegatee();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty15 = scopeSetJsonDeserializer5.findBackReference("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(wildcardJsonDeserializer13);
    }

    @Test
    public void test12169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12169");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("ME");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService16 = builder15.build();
        org.osiam.client.OsiamGroupService.Builder builder18 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet28 = accessToken26.getScopes();
        java.lang.String str29 = osiamGroupService19.extractErrorMessageForbidden(accessToken26);
        boolean boolean30 = accessToken26.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken26);
        java.lang.String str32 = authService16.extractErrorMessageForbidden(accessToken26);
        java.lang.String str33 = accessToken26.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user34 = osiamUserService5.getCurrentUser(accessToken26);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(osiamGroupService19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(scopeSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test12170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12170");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: hi!");
    }

    @Test
    public void test12171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12171");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken27 = builder24.build();
        boolean boolean28 = accessToken27.isClientOnly();
        java.lang.String str29 = osiamGroupService3.extractErrorMessageForbidden(accessToken27);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        boolean boolean37 = accessToken36.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet38 = accessToken36.getScopes();
        boolean boolean39 = accessToken36.isRefreshTokenExpired();
        boolean boolean40 = accessToken36.isExpired();
        java.lang.String str41 = osiamGroupService3.extractErrorMessageForbidden(accessToken36);
        org.osiam.resources.scim.Group group42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        java.lang.String str51 = accessToken49.getRefreshToken();
        java.lang.String str52 = accessToken49.getType();
        java.lang.String str53 = accessToken49.getClientId();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException55 = new org.osiam.client.exception.InvalidAttributeException("ADMIN");
        boolean boolean56 = accessToken49.equals((java.lang.Object) invalidAttributeException55);
        boolean boolean57 = accessToken49.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group58 = osiamGroupService3.createResource(group42, accessToken49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(scopeSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test12172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12172");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.filter("GET");
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("org.osiam.client.exception.OsiamRequestException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
    }

    @Test
    public void test12173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12173");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = osiamGroupService2.extractErrorMessage("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]", statusType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
    }

    @Test
    public void test12174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12174");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder1.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder1.setUserId("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder22.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer35 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean36 = scopeSerializer35.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer37 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer38 = scopeSerializer35.unwrappingSerializer(nameTransformer37);
        boolean boolean39 = scopeSerializer35.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer40 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer41 = scopeSerializer35.unwrappingSerializer(nameTransformer40);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper42 = null;
        com.fasterxml.jackson.databind.JavaType javaType43 = null;
        scopeSerializer35.acceptJsonFormatVisitor(jsonFormatVisitorWrapper42, javaType43);
        boolean boolean45 = scopeSerializer35.usesObjectId();
        boolean boolean46 = scopeSerializer35.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider47 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer48 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean49 = scopeSerializer48.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass50 = scopeSerializer48.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        java.util.Date date58 = accessToken57.getExpiresAt();
        java.lang.String str59 = accessToken57.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet60 = accessToken57.getScopes();
        boolean boolean61 = scopeSerializer48.isEmpty(scopeSet60);
        boolean boolean62 = scopeSerializer35.isEmpty(serializerProvider47, scopeSet60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder34.addScopes(scopeSet60);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder16.addScopes(scopeSet60);
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.AccessToken.Builder builder67 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date68 = null;
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setRefreshTokenExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date72 = null;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setRefreshTokenExpiresAt(date72);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder71.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken76 = builder75.build();
        java.util.Date date77 = accessToken76.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder67.setRefreshTokenExpiresAt(date77);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder67.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder67.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder84 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setRefreshTokenExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder84.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken89 = builder88.build();
        boolean boolean90 = accessToken89.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet91 = accessToken89.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder92 = builder82.addScopes(scopeSet91);
        boolean boolean93 = scope65.equals((java.lang.Object) scopeSet91);
        org.osiam.client.oauth.AccessToken.Builder builder94 = builder64.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder95 = builder1.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder97 = builder1.setClientId("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(scopeSetClass50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(scopeSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(accessToken76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(accessToken89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(scopeSet91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test12175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12175");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder1.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.util.Date date19 = accessToken18.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder11.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder11.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.addScope(scope25);
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder24.addScope(scope27);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException45 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean46 = scope43.equals((java.lang.Object) invalidAttributeException45);
        java.lang.String str47 = scope43.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder40.addScope(scope43);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        java.lang.String str56 = accessToken55.toString();
        boolean boolean57 = scope43.equals((java.lang.Object) str56);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder36.addScope(scope43);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder22.addScope(scope43);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder22.setType("org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GET" + "'", str47, "GET");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str56, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test12176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12176");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        boolean boolean7 = scopeDeserializer0.isCachable();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer8 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer8.handledType();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer8.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeDeserializer8.unwrappingDeserializer(nameTransformer11);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer14 = scopeDeserializer8.unwrappingDeserializer(nameTransformer13);
        java.util.Collection<java.lang.Object> objCollection15 = scopeDeserializer8.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader16 = scopeDeserializer8.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader17 = scopeDeserializer8.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader18 = scopeDeserializer8.getObjectIdReader();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer19 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer14);
        org.junit.Assert.assertNull(objCollection15);
        org.junit.Assert.assertNull(objectIdReader16);
        org.junit.Assert.assertNull(objectIdReader17);
        org.junit.Assert.assertNull(objectIdReader18);
    }

    @Test
    public void test12177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12177");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.getSortOrder();
        java.lang.String str20 = query17.getSortBy();
        java.lang.String str21 = query17.getFilter();
        java.lang.String str22 = query17.getSortOrder();
        java.lang.String str23 = query17.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder(query17);
        long long25 = query17.getStartIndex();
        org.osiam.client.query.Query query26 = query17.nextPage();
        long long27 = query26.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder28 = osiamConnector7.createQueryBuilder(query26);
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.getAttributes();
        java.lang.String str40 = query38.toString();
        java.lang.String str41 = query38.getSortBy();
        org.osiam.client.query.Query query42 = query38.nextPage();
        int int43 = query42.getCount();
        long long44 = query42.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder45 = new org.osiam.client.query.QueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector7.createQueryBuilder(query42);
        long long47 = query42.getStartIndex();
        java.lang.String str48 = query42.getAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "descending" + "'", str19, "descending");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Authorization" + "'", str23, "Authorization");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 11L + "'", long27 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Authorization" + "'", str39, "Authorization");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 11L + "'", long44 == 11L);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 11L + "'", long47 == 11L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
    }

    @Test
    public void test12178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12178");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.getSortOrder();
        java.lang.String str15 = query9.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder(query9);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query18 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "descending" + "'", str14, "descending");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
    }

    @Test
    public void test12179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12179");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder7 = osiamConnector5.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        java.lang.String str19 = accessToken17.getUserName();
        java.lang.String str20 = accessToken17.toString();
        java.lang.String str21 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        java.lang.String str29 = accessToken28.toString();
        java.lang.String str30 = accessToken28.getType();
        boolean boolean31 = accessToken28.isExpired();
        java.util.Date date32 = accessToken28.getExpiresAt();
        boolean boolean33 = accessToken28.isClientOnly();
        java.lang.String str34 = osiamGroupService10.extractErrorMessageForbidden(accessToken28);
        java.lang.String str35 = accessToken28.getRefreshToken();
        java.lang.String str36 = accessToken28.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        boolean boolean38 = accessToken28.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken39 = osiamConnector5.validateAccessToken(accessToken28);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str20, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Insufficient scopes: []" + "'", str34, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Bearer " + "'", str36, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test12180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12180");
        org.osiam.client.exception.NoResultException noResultException2 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.exception.OsiamClientException osiamClientException3 = new org.osiam.client.exception.OsiamClientException("", (java.lang.Throwable) noResultException2);
    }

    @Test
    public void test12181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12181");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.OsiamGroupService.Builder builder28 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.lang.String str39 = accessToken36.toString();
        java.lang.String str40 = osiamGroupService29.extractErrorMessageForbidden(accessToken36);
        java.util.Date date41 = accessToken36.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder26.setExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder42.setExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder42.setUserId("password");
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.lang.String str62 = accessToken60.getUserId();
        java.lang.String str63 = accessToken60.getToken();
        java.lang.String str64 = accessToken60.getClientId();
        boolean boolean65 = accessToken60.isExpired();
        java.util.Date date66 = accessToken60.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder53.setRefreshTokenExpiresAt(date66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder67.setType("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Bearer ");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(osiamGroupService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Bearer " + "'", str63, "Bearer ");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test12182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12182");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        boolean boolean9 = scopeSetJsonDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer5.getEmptyValue();
        java.lang.Class<?> wildcardClass11 = scopeSetJsonDeserializer5.handledType();
        java.lang.Class<?> wildcardClass12 = scopeSetJsonDeserializer5.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer14 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer13);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty16 = scopeSetJsonDeserializer14.findBackReference("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer14);
    }

    @Test
    public void test12183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12183");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str33 = scope32.toString();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder31.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setType("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope38 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder36.addScope(scope38);
        org.osiam.client.oauth.AccessToken accessToken40 = builder36.build();
        java.lang.String str41 = osiamGroupService2.extractErrorMessageForbidden(accessToken40);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group43 = osiamGroupService2.mapToResource("");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: ");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PUT" + "'", str33, "PUT");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]" + "'", str41, "Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]");
    }

    @Test
    public void test12184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12184");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.Query query13 = query9.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query13);
        java.lang.String str15 = query13.toString();
        java.lang.String str16 = query13.toString();
        java.lang.String str17 = query13.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder(query13);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
    }

    @Test
    public void test12185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12185");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientSecret("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder14 = builder8.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test12186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12186");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.resources.scim.Group group11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        boolean boolean20 = accessToken18.isClientOnly();
        java.lang.String str21 = accessToken18.getRefreshToken();
        boolean boolean22 = accessToken18.isExpired();
        boolean boolean23 = accessToken18.isExpired();
        java.lang.String str24 = accessToken18.toString();
        java.lang.String str25 = accessToken18.getUserId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.lang.String str27 = accessToken18.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group28 = osiamConnector9.replaceGroup("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending", group11, accessToken18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test12187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12187");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = accessToken17.getUserId();
        java.lang.String str20 = accessToken17.getToken();
        java.lang.String str21 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str23 = scope22.getValue();
        java.lang.String str24 = scope22.toString();
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray26 = new org.osiam.client.oauth.Scope[] { scope22, scope25 };
        java.net.URI uRI27 = authService10.getAuthorizationUri(scopeArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken29 = authService10.retrieveAccessToken("Insufficient scopes: []");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Bearer " + "'", str20, "Bearer ");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PATCH" + "'", str23, "PATCH");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PATCH" + "'", str24, "PATCH");
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scopeArray26);
        org.junit.Assert.assertNotNull(uRI27);
    }

    @Test
    public void test12188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12188");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider2 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer3 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str16 = scope15.toString();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str19 = scope18.getValue();
        java.lang.String str20 = scope18.getValue();
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        boolean boolean37 = scope35.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray39 = new org.osiam.client.oauth.Scope[] { scope8, scope9, scope14, scope15, scope17, scope18, scope21, scope26, scope27, scope28, scope29, scope33, scope34, scope35, scope38 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet40 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet40, scopeArray39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder5.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        boolean boolean43 = scopeSerializer3.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken50.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider54 = null;
        scopeSerializer3.serialize(scopeSet52, jsonGenerator53, serializerProvider54);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        boolean boolean64 = accessToken63.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = accessToken63.getScopes();
        boolean boolean66 = scopeSerializer3.isEmpty(serializerProvider56, scopeSet65);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass67 = scopeSerializer3.handledType();
        org.osiam.client.oauth.Scope scope69 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope72 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.addScope(scope72);
        org.osiam.client.oauth.Scope[] scopeArray74 = new org.osiam.client.oauth.Scope[] { scope69, scope72 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet75 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet75, scopeArray74);
        boolean boolean77 = scopeSerializer3.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet75);
        boolean boolean78 = scopeSerializer0.isEmpty(serializerProvider2, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet75);
        boolean boolean79 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper80 = null;
        com.fasterxml.jackson.databind.JavaType javaType81 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper80, javaType81);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper83 = null;
        com.fasterxml.jackson.databind.JavaType javaType84 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper83, javaType84);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer86 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper87 = null;
        com.fasterxml.jackson.databind.JavaType javaType88 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper87, javaType88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ME" + "'", str16, "ME");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PATCH" + "'", str19, "PATCH");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PATCH" + "'", str20, "PATCH");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scopeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(scopeSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(scopeSetClass67);
        org.junit.Assert.assertNotNull(scope72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(scopeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer86);
    }

    @Test
    public void test12189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12189");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        conflictException1.addSuppressed((java.lang.Throwable) connectionInitializationException3);
        java.lang.String str5 = conflictException1.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str5, "org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
    }

    @Test
    public void test12190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12190");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=Cannot connect to server, userName=Authorization]");
    }

    @Test
    public void test12191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12191");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass2 = scopeSerializer0.handledType();
        org.osiam.client.helper.ScopeSerializer scopeSerializer3 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str16 = scope15.toString();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str19 = scope18.getValue();
        java.lang.String str20 = scope18.getValue();
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        boolean boolean37 = scope35.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray39 = new org.osiam.client.oauth.Scope[] { scope8, scope9, scope14, scope15, scope17, scope18, scope21, scope26, scope27, scope28, scope29, scope33, scope34, scope35, scope38 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet40 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet40, scopeArray39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder5.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        boolean boolean43 = scopeSerializer3.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet40);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken50 = builder49.build();
        boolean boolean51 = accessToken50.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken50.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider54 = null;
        scopeSerializer3.serialize(scopeSet52, jsonGenerator53, serializerProvider54);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        boolean boolean64 = accessToken63.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = accessToken63.getScopes();
        boolean boolean66 = scopeSerializer3.isEmpty(serializerProvider56, scopeSet65);
        boolean boolean67 = scopeSerializer0.isEmpty(scopeSet65);
        boolean boolean68 = scopeSerializer0.isUnwrappingSerializer();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass69 = scopeSerializer0.handledType();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass70 = scopeSerializer0.handledType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(scopeSetClass2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ME" + "'", str16, "ME");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PATCH" + "'", str19, "PATCH");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PATCH" + "'", str20, "PATCH");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scopeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(accessToken50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(scopeSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(scopeSetClass69);
        org.junit.Assert.assertNull(scopeSetClass70);
    }

    @Test
    public void test12192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12192");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ConflictException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        boolean boolean12 = accessToken10.isClientOnly();
        java.lang.String str13 = accessToken10.getClientId();
        java.lang.String str14 = accessToken10.getClientId();
        java.util.Date date15 = accessToken10.getRefreshTokenExpiresAt();
        java.util.Date date16 = accessToken10.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService2.deleteUser("refresh_token", accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12193");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12194");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.util.Date date29 = accessToken10.getExpiresAt();
        java.lang.String str30 = accessToken10.getUserName();
        java.lang.String str31 = osiamGroupService2.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        boolean boolean40 = accessToken38.isClientOnly();
        java.lang.String str41 = accessToken38.getClientId();
        boolean boolean42 = accessToken38.isClientOnly();
        java.lang.String str43 = accessToken38.getToken();
        java.lang.String str44 = accessToken38.getToken();
        boolean boolean45 = accessToken38.isRefreshTokenExpired();
        java.lang.String str46 = osiamGroupService2.extractErrorMessageForbidden(accessToken38);
        javax.ws.rs.client.WebTarget webTarget47 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder49 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientId("ME");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService54 = builder53.build();
        org.osiam.client.OsiamGroupService.Builder builder56 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService57 = builder56.build();
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        boolean boolean65 = accessToken64.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet66 = accessToken64.getScopes();
        java.lang.String str67 = osiamGroupService57.extractErrorMessageForbidden(accessToken64);
        boolean boolean68 = accessToken64.isClientOnly();
        java.lang.String str69 = authService54.extractErrorMessageForbidden(accessToken64);
        java.util.Date date70 = accessToken64.getRefreshTokenExpiresAt();
        java.lang.String str71 = accessToken64.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet72 = accessToken64.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList73 = osiamGroupService2.getAllResources(accessToken64);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Bearer " + "'", str43, "Bearer ");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Bearer " + "'", str44, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(authService54);
        org.junit.Assert.assertNotNull(osiamGroupService57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(scopeSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Insufficient scopes: []" + "'", str67, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Insufficient scopes: []" + "'", str69, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(scopeSet72);
    }

    @Test
    public void test12195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12195");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer67 = scopeSerializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer68 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer69 = scopeSerializer0.unwrappingSerializer(nameTransformer68);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper70 = null;
        com.fasterxml.jackson.databind.JavaType javaType71 = null;
        scopeSetJsonSerializer69.acceptJsonFormatVisitor(jsonFormatVisitorWrapper70, javaType71);
        boolean boolean73 = scopeSetJsonSerializer69.usesObjectId();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper74 = null;
        com.fasterxml.jackson.databind.JavaType javaType75 = null;
        scopeSetJsonSerializer69.acceptJsonFormatVisitor(jsonFormatVisitorWrapper74, javaType75);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer67);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test12196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12196");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService15 = builder14.build();
        org.osiam.client.OsiamGroupService.Builder builder17 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder17.build();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken25.getScopes();
        java.lang.String str28 = osiamGroupService18.extractErrorMessageForbidden(accessToken25);
        boolean boolean29 = accessToken25.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken25);
        java.lang.String str31 = authService15.extractErrorMessageForbidden(accessToken25);
        java.lang.String str32 = accessToken25.getType();
        java.lang.String str33 = osiamGroupService4.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder39.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshToken("DELETE");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        java.lang.String str49 = accessToken48.getRefreshToken();
        java.lang.String str50 = osiamGroupService4.extractErrorMessageForbidden(accessToken48);
        org.osiam.resources.scim.UpdateGroup updateGroup52 = null;
        org.osiam.client.OsiamGroupService.Builder builder54 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService55 = builder54.build();
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        java.util.Date date63 = accessToken62.getExpiresAt();
        java.lang.String str64 = accessToken62.getRefreshToken();
        java.lang.String str65 = accessToken62.getType();
        java.lang.String str66 = osiamGroupService55.extractErrorMessageForbidden(accessToken62);
        java.lang.String str67 = accessToken62.getUserId();
        java.lang.String str68 = accessToken62.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group69 = osiamGroupService4.updateGroup("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH", updateGroup52, accessToken62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(authService15);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Insufficient scopes: []" + "'", str28, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DELETE" + "'", str49, "DELETE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Insufficient scopes: []" + "'", str66, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Bearer " + "'", str68, "Bearer ");
    }

    @Test
    public void test12197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12197");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        org.osiam.client.helper.ScopeSerializer scopeSerializer17 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean18 = scopeSerializer17.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer19 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer20 = scopeSerializer17.unwrappingSerializer(nameTransformer19);
        org.osiam.client.helper.ScopeSerializer scopeSerializer21 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean22 = scopeSerializer21.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer23 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer24 = scopeSerializer21.unwrappingSerializer(nameTransformer23);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str38 = scope37.toString();
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str41 = scope40.getValue();
        java.lang.String str42 = scope40.getValue();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException45 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean46 = scope43.equals((java.lang.Object) invalidAttributeException45);
        java.lang.String str47 = scope43.getValue();
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException53 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean54 = scope51.equals((java.lang.Object) invalidAttributeException53);
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.GET;
        boolean boolean59 = scope57.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray61 = new org.osiam.client.oauth.Scope[] { scope30, scope31, scope36, scope37, scope39, scope40, scope43, scope48, scope49, scope50, scope51, scope55, scope56, scope57, scope60 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet62 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet62, scopeArray61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder27.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet62);
        boolean boolean65 = scopeSetJsonSerializer24.isEmpty(serializerProvider25, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet62);
        boolean boolean66 = scopeSerializer17.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass67 = scopeSerializer17.handledType();
        boolean boolean68 = scopeSerializer17.usesObjectId();
        boolean boolean69 = accessToken12.equals((java.lang.Object) scopeSerializer17);
        org.osiam.client.helper.ScopeSerializer scopeSerializer70 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean71 = scopeSerializer70.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer72 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        boolean boolean80 = accessToken79.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken79.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider83 = null;
        scopeSerializer72.serialize(scopeSet81, jsonGenerator82, serializerProvider83);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator85 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider86 = null;
        scopeSerializer70.serialize(scopeSet81, jsonGenerator85, serializerProvider86);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider89 = null;
        scopeSerializer17.serialize(scopeSet81, jsonGenerator88, serializerProvider89);
        boolean boolean91 = scopeSerializer17.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass92 = scopeSerializer17.handledType();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper93 = null;
        com.fasterxml.jackson.databind.JavaType javaType94 = null;
        scopeSerializer17.acceptJsonFormatVisitor(jsonFormatVisitorWrapper93, javaType94);
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ME" + "'", str38, "ME");
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PATCH" + "'", str41, "PATCH");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PATCH" + "'", str42, "PATCH");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GET" + "'", str47, "GET");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scopeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(scopeSetClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(scopeSetClass92);
    }

    @Test
    public void test12198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12198");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count((int) (short) -1);
        org.osiam.client.query.Query query15 = queryBuilder10.build();
        java.lang.String str16 = query15.toString();
        org.osiam.client.query.Query query17 = query15.nextPage();
        long long18 = query17.getStartIndex();
        long long19 = query17.getStartIndex();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str16, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 101L + "'", long18 == 101L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 101L + "'", long19 == 101L);
    }

    @Test
    public void test12199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12199");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector osiamConnector8 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector8.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.startIndex((long) 52);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.attributes("org.osiam.client.exception.InvalidAttributeException: Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamConnector8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
    }

    @Test
    public void test12200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12200");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken12.getScopes();
        java.lang.String str15 = osiamGroupService5.extractErrorMessageForbidden(accessToken12);
        boolean boolean16 = accessToken12.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        java.lang.String str18 = accessToken12.getToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken12.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList20 = osiamUserService2.getAllUsers(accessToken12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Bearer " + "'", str18, "Bearer ");
        org.junit.Assert.assertNotNull(scopeSet19);
    }

    @Test
    public void test12201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12201");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector osiamConnector6 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder7 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder7.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("hi!");
        org.osiam.client.query.Query query16 = queryBuilder15.build();
        java.lang.String str17 = query16.toString();
        java.lang.String str18 = query16.toString();
        org.osiam.client.query.Query query19 = query16.nextPage();
        java.lang.String str20 = query16.toString();
        int int21 = query16.getCount();
        org.osiam.client.query.Query query22 = query16.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector6.createQueryBuilder(query22);
        org.osiam.client.query.QueryBuilder queryBuilder24 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder26.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.descending("hi!");
        org.osiam.client.query.Query query33 = queryBuilder32.build();
        java.lang.String str34 = query33.toString();
        java.lang.String str35 = query33.toString();
        java.lang.String str36 = query33.toString();
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder(query33);
        org.osiam.client.OsiamGroupService.Builder builder39 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService40 = builder39.build();
        org.osiam.client.OsiamGroupService osiamGroupService41 = builder39.build();
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken48);
        java.lang.String str50 = osiamGroupService41.extractErrorMessageForbidden(accessToken48);
        org.osiam.client.OsiamGroupService.Builder builder52 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService53 = builder52.build();
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        java.lang.String str63 = osiamGroupService53.extractErrorMessageForbidden(accessToken60);
        boolean boolean64 = accessToken60.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken60);
        java.lang.String str66 = osiamGroupService41.extractErrorMessageForbidden(accessToken60);
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken73);
        java.util.Date date75 = accessToken73.getExpiresAt();
        boolean boolean76 = accessToken73.isRefreshTokenExpired();
        java.util.Date date77 = accessToken73.getExpiresAt();
        java.util.Date date78 = accessToken73.getRefreshTokenExpiresAt();
        java.lang.String str79 = accessToken73.getUserId();
        java.util.Date date80 = accessToken73.getRefreshTokenExpiresAt();
        java.lang.String str81 = osiamGroupService41.extractErrorMessageForbidden(accessToken73);
        java.util.Date date82 = accessToken73.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult83 = osiamConnector6.searchUsers(query33, accessToken73);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(osiamConnector6);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str17, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str36, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(osiamGroupService40);
        org.junit.Assert.assertNotNull(osiamGroupService41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Insufficient scopes: []" + "'", str66, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Insufficient scopes: []" + "'", str81, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12202");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.getAttributes();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getSortBy();
        org.osiam.client.query.Query query21 = query17.nextPage();
        java.lang.String str22 = query21.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector7.createQueryBuilder(query21);
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet32 = accessToken30.getScopes();
        java.lang.String str33 = accessToken30.getUserId();
        java.util.Date date34 = accessToken30.getExpiresAt();
        java.util.Date date35 = accessToken30.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList36 = osiamConnector7.getAllUsers(accessToken30);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Authorization" + "'", str22, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(scopeSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12203");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.addScope(scope7);
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder6.addScope(scope9);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder22.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder18.addScope(scope25);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.addScope(scope34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder33.addScope(scope36);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setUserId("");
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.addScope(scope46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        java.util.Date date55 = accessToken54.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder45.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder18.setRefreshTokenExpiresAt(date55);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        java.util.Date date67 = accessToken66.getExpiresAt();
        java.util.Date date68 = accessToken66.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder57.setRefreshTokenExpiresAt(date68);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder57.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder57.setType("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder73.setType("ascending");
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setClientId("org.osiam.client.exception.NoResultException: refresh_token");
        org.osiam.client.oauth.AccessToken accessToken79 = builder76.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("GET POST PUT PATCH DELETE", statusType4, accessToken79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
    }

    @Test
    public void test12204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12204");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getType();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test12205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12205");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        java.lang.String str13 = query9.getFilter();
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.getSortOrder();
        java.lang.String str16 = query9.getSortBy();
        java.lang.String str17 = query9.getSortOrder();
        java.lang.String str18 = query9.getFilter();
        long long19 = query9.getStartIndex();
        java.lang.String str20 = query9.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder(query9);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test12206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12206");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder6 = builder0.setAuthServerEndpoint("org.osiam.client.exception.InvalidAttributeException: Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test12207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12207");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder7.setClientId("ADMIN");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.AuthService.Builder builder14 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientId("ME");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("hi!");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientId("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder30 = builder26.setClientSecret("");
        org.osiam.client.AuthService authService31 = builder26.build();
        org.osiam.client.AuthService.Builder builder33 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientId("ME");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder43 = builder39.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService44 = builder43.build();
        org.osiam.client.AuthService.Builder builder46 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientId("ME");
        org.osiam.client.AuthService.Builder builder50 = builder48.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder52 = builder50.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder54 = builder52.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService55 = builder54.build();
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder57.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken62 = builder61.build();
        boolean boolean63 = accessToken62.isRefreshTokenExpired();
        java.lang.String str64 = accessToken62.getUserId();
        java.lang.String str65 = accessToken62.getToken();
        java.lang.String str66 = authService55.extractErrorMessageForbidden(accessToken62);
        org.osiam.client.oauth.Scope scope67 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str68 = scope67.getValue();
        java.lang.String str69 = scope67.toString();
        org.osiam.client.oauth.Scope scope70 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray71 = new org.osiam.client.oauth.Scope[] { scope67, scope70 };
        java.net.URI uRI72 = authService55.getAuthorizationUri(scopeArray71);
        java.net.URI uRI73 = authService44.getAuthorizationUri(scopeArray71);
        java.net.URI uRI74 = authService31.getAuthorizationUri(scopeArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken75 = authService12.retrieveAccessToken(scopeArray71);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(authService31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(authService44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(authService55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Bearer " + "'", str65, "Bearer ");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Insufficient scopes: []" + "'", str66, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PATCH" + "'", str68, "PATCH");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PATCH" + "'", str69, "PATCH");
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertNotNull(scopeArray71);
        org.junit.Assert.assertNotNull(uRI72);
        org.junit.Assert.assertNotNull(uRI73);
        org.junit.Assert.assertNotNull(uRI74);
    }

    @Test
    public void test12208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12208");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget37 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget38 = osiamGroupService6.targetEndpoint;
        org.osiam.resources.scim.Group group39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setType("authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshToken("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken52 = builder51.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group53 = osiamGroupService6.createGroup(group39, accessToken52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget36);
        org.junit.Assert.assertNotNull(webTarget37);
        org.junit.Assert.assertNotNull(webTarget38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
    }

    @Test
    public void test12209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12209");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector osiamConnector11 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder12 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.descending("hi!");
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        java.lang.String str22 = query21.toString();
        java.lang.String str23 = query21.getSortOrder();
        java.lang.String str24 = query21.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder(query21);
        java.lang.String str26 = query21.toString();
        java.lang.String str27 = query21.toString();
        org.osiam.client.query.QueryBuilder queryBuilder28 = new org.osiam.client.query.QueryBuilder(query21);
        org.osiam.client.query.Query query29 = queryBuilder28.build();
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder(query29);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector11.createQueryBuilder(query29);
        org.osiam.client.AuthService.Builder builder33 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientId("ME");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService38 = builder37.build();
        org.osiam.client.OsiamGroupService.Builder builder40 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService41 = builder40.build();
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet50 = accessToken48.getScopes();
        java.lang.String str51 = osiamGroupService41.extractErrorMessageForbidden(accessToken48);
        boolean boolean52 = accessToken48.isClientOnly();
        java.lang.String str53 = authService38.extractErrorMessageForbidden(accessToken48);
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken62 = builder59.build();
        java.lang.String str63 = accessToken62.toString();
        java.lang.String str64 = authService38.extractErrorMessageForbidden(accessToken62);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = accessToken62.getScopes();
        org.osiam.client.OsiamConnector.Builder builder66 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder68 = builder66.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder70 = builder66.setClientSecret("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        boolean boolean71 = accessToken62.equals((java.lang.Object) "org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.String str72 = accessToken62.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser73 = osiamConnector11.getCurrentUserBasic(accessToken62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str22, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "descending" + "'", str23, "descending");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(authService38);
        org.junit.Assert.assertNotNull(osiamGroupService41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(scopeSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(accessToken62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str63, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Insufficient scopes: []" + "'", str64, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeSet65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test12210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12210");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.getAttributes();
        java.lang.String str44 = query42.toString();
        java.lang.String str45 = query42.getSortBy();
        org.osiam.client.query.Query query46 = query42.nextPage();
        int int47 = query42.getCount();
        java.lang.String str48 = query42.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder49 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.resources.scim.User user50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshTokenExpiresAt(date53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken57 = builder56.build();
        boolean boolean58 = accessToken57.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet59 = accessToken57.getScopes();
        boolean boolean60 = accessToken57.isClientOnly();
        java.lang.String str61 = accessToken57.getRefreshToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken57.getScopes();
        java.lang.String str63 = accessToken57.getUserId();
        java.util.Date date64 = accessToken57.getRefreshTokenExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = accessToken57.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user66 = osiamConnector5.createUser(user50, accessToken57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str44, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(accessToken57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(scopeSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet65);
    }

    @Test
    public void test12211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12211");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        boolean boolean4 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer6 = scopeSerializer0.unwrappingSerializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer8 = scopeSerializer0.unwrappingSerializer(nameTransformer7);
        boolean boolean9 = scopeSerializer0.isUnwrappingSerializer();
        boolean boolean10 = scopeSerializer0.usesObjectId();
        boolean boolean11 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer0.unwrappingSerializer(nameTransformer12);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider14 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer15 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str28 = scope27.toString();
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str31 = scope30.getValue();
        java.lang.String str32 = scope30.getValue();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException35 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean36 = scope33.equals((java.lang.Object) invalidAttributeException35);
        java.lang.String str37 = scope33.getValue();
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException43 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean44 = scope41.equals((java.lang.Object) invalidAttributeException43);
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        boolean boolean49 = scope47.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray51 = new org.osiam.client.oauth.Scope[] { scope20, scope21, scope26, scope27, scope29, scope30, scope33, scope38, scope39, scope40, scope41, scope45, scope46, scope47, scope50 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet52 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet52, scopeArray51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder17.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet52);
        boolean boolean55 = scopeSerializer15.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet52);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper56 = null;
        com.fasterxml.jackson.databind.JavaType javaType57 = null;
        scopeSerializer15.acceptJsonFormatVisitor(jsonFormatVisitorWrapper56, javaType57);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer59 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer60 = scopeSerializer15.unwrappingSerializer(nameTransformer59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        java.util.Date date68 = accessToken67.getExpiresAt();
        java.lang.String str69 = accessToken67.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet70 = accessToken67.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator71 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider72 = null;
        scopeSerializer15.serialize(scopeSet70, jsonGenerator71, serializerProvider72);
        boolean boolean74 = scopeSetJsonSerializer13.isEmpty(serializerProvider14, scopeSet70);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ME" + "'", str28, "ME");
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PATCH" + "'", str31, "PATCH");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PATCH" + "'", str32, "PATCH");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GET" + "'", str37, "GET");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scopeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(scopeSet70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test12212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12212");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass5 = scopeDeserializer0.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        boolean boolean7 = scopeDeserializer0.isCachable();
        java.lang.Class<?> wildcardClass8 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser9 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeDeserializer0.deserialize(jsonParser9, deserializationContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test12213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12213");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.Query query16 = query15.nextPage();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query19 = query15.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test12214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12214");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getDescription();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str4 = oAuthErrorMessage0.getDescription();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str6 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str7 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str8 = oAuthErrorMessage0.getDescription();
        java.lang.String str9 = oAuthErrorMessage0.getDescription();
        java.lang.String str10 = oAuthErrorMessage0.getDescription();
        java.lang.String str11 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str12 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str13 = oAuthErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test12215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12215");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken5 = builder4.build();
        java.lang.String str6 = accessToken5.toString();
        java.lang.String str7 = accessToken5.getType();
        java.lang.String str8 = accessToken5.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user9 = osiamUserService2.getCurrentUser(accessToken5);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(accessToken5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str6, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test12216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12216");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: 2024-03-22T13:51:20.388");
    }

    @Test
    public void test12217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12217");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getClientId();
        boolean boolean10 = accessToken6.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.addScope(scope13);
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException17 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean18 = scope15.equals((java.lang.Object) invalidAttributeException17);
        java.lang.String str19 = scope15.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder12.addScope(scope15);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setUserName("Authorization");
        boolean boolean27 = accessToken6.equals((java.lang.Object) builder24);
        org.osiam.client.AuthService.Builder builder29 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientId("ME");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService34 = builder33.build();
        org.osiam.client.OsiamGroupService.Builder builder36 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService37 = builder36.build();
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        boolean boolean45 = accessToken44.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet46 = accessToken44.getScopes();
        java.lang.String str47 = osiamGroupService37.extractErrorMessageForbidden(accessToken44);
        boolean boolean48 = accessToken44.isClientOnly();
        java.lang.String str49 = authService34.extractErrorMessageForbidden(accessToken44);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken58 = builder55.build();
        java.lang.String str59 = accessToken58.toString();
        java.lang.String str60 = authService34.extractErrorMessageForbidden(accessToken58);
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        java.util.Date date68 = accessToken67.getExpiresAt();
        java.lang.String str69 = accessToken67.getRefreshToken();
        java.lang.String str70 = accessToken67.getType();
        java.lang.String str71 = accessToken67.getClientId();
        java.lang.String str72 = accessToken67.getUserName();
        java.lang.String str73 = authService34.extractErrorMessageForbidden(accessToken67);
        org.osiam.client.exception.UnauthorizedException unauthorizedException75 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int76 = unauthorizedException75.getHttpStatusCode();
        int int77 = unauthorizedException75.getHttpStatusCode();
        java.lang.Throwable[] throwableArray78 = unauthorizedException75.getSuppressed();
        boolean boolean79 = accessToken67.equals((java.lang.Object) unauthorizedException75);
        java.lang.String str80 = accessToken67.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken67.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder24.addScopes(scopeSet81);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GET" + "'", str19, "GET");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(authService34);
        org.junit.Assert.assertNotNull(osiamGroupService37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(scopeSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str59, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Insufficient scopes: []" + "'", str60, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 401 + "'", int76 == 401);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 401 + "'", int77 == 401);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test12218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12218");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.AuthService.Builder builder2 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder4 = builder2.setClientId("ME");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService7 = builder6.build();
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken17.getScopes();
        java.lang.String str20 = osiamGroupService10.extractErrorMessageForbidden(accessToken17);
        boolean boolean21 = accessToken17.isClientOnly();
        java.lang.String str22 = authService7.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken31 = builder28.build();
        java.lang.String str32 = accessToken31.toString();
        java.lang.String str33 = authService7.extractErrorMessageForbidden(accessToken31);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet34 = accessToken31.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider36 = null;
        scopeSerializer0.serialize(scopeSet34, jsonGenerator35, serializerProvider36);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass38 = scopeSerializer0.handledType();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass39 = scopeSerializer0.handledType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(authService7);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(scopeSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str32, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeSet34);
        org.junit.Assert.assertNull(scopeSetClass38);
        org.junit.Assert.assertNull(scopeSetClass39);
    }

    @Test
    public void test12219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12219");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.AuthService.Builder builder6 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientId("ME");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.OsiamGroupService.Builder builder13 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = accessToken21.getScopes();
        java.lang.String str24 = osiamGroupService14.extractErrorMessageForbidden(accessToken21);
        boolean boolean25 = accessToken21.isClientOnly();
        java.lang.String str26 = authService11.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken35 = builder32.build();
        java.lang.String str36 = accessToken35.toString();
        java.lang.String str37 = authService11.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        java.util.Date date45 = accessToken44.getExpiresAt();
        java.lang.String str46 = accessToken44.getRefreshToken();
        java.lang.String str47 = accessToken44.getType();
        java.lang.String str48 = accessToken44.getClientId();
        java.lang.String str49 = accessToken44.getUserName();
        java.lang.String str50 = authService11.extractErrorMessageForbidden(accessToken44);
        org.osiam.client.exception.UnauthorizedException unauthorizedException52 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int53 = unauthorizedException52.getHttpStatusCode();
        int int54 = unauthorizedException52.getHttpStatusCode();
        java.lang.Throwable[] throwableArray55 = unauthorizedException52.getSuppressed();
        boolean boolean56 = accessToken44.equals((java.lang.Object) unauthorizedException52);
        java.lang.String str57 = accessToken44.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet58 = accessToken44.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken44);
        java.lang.String str60 = accessToken44.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group61 = osiamGroupService3.createGroup(group4, accessToken44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(scopeSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str36, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 401 + "'", int53 == 401);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 401 + "'", int54 == 401);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(scopeSet58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Bearer " + "'", str60, "Bearer ");
    }

    @Test
    public void test12220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12220");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.resources.scim.UpdateUser updateUser11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        java.util.Date date20 = accessToken18.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.descending("hi!");
        org.osiam.client.query.Query query30 = queryBuilder29.build();
        java.lang.String str31 = query30.toString();
        java.lang.String str32 = query30.getSortOrder();
        org.osiam.client.query.Query query33 = query30.nextPage();
        boolean boolean34 = accessToken18.equals((java.lang.Object) query30);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user35 = osiamConnector9.updateUser("org.osiam.client.exception.UnauthorizedException: client_credentials", updateUser11, accessToken18);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(query30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "descending" + "'", str32, "descending");
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test12221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12221");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector3 = builder2.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = osiamConnector3.createQueryBuilder();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.addScope(scope7);
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException11 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean12 = scope9.equals((java.lang.Object) invalidAttributeException11);
        java.lang.String str13 = scope9.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder6.addScope(scope9);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isExpired();
        boolean boolean27 = accessToken25.isRefreshTokenExpired();
        java.lang.String str28 = accessToken25.getUserId();
        org.osiam.client.oauth.Scope[] scopeArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken30 = osiamConnector3.refreshAccessToken(accessToken25, scopeArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(osiamConnector3);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GET" + "'", str13, "GET");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Cannot connect to server" + "'", str28, "Cannot connect to server");
    }

    @Test
    public void test12222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12222");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder40.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder13.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        java.util.Date date62 = accessToken61.getExpiresAt();
        java.util.Date date63 = accessToken61.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder52.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder52.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder52.setType("GET POST PUT PATCH DELETE");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder68.setType("ascending");
        org.osiam.client.oauth.AccessToken.Builder builder73 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date74 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setRefreshTokenExpiresAt(date74);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder73.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken78 = builder77.build();
        boolean boolean79 = accessToken78.isRefreshTokenExpired();
        boolean boolean80 = accessToken78.isClientOnly();
        java.lang.String str81 = accessToken78.getRefreshToken();
        boolean boolean82 = accessToken78.isExpired();
        boolean boolean83 = accessToken78.isExpired();
        boolean boolean84 = accessToken78.isClientOnly();
        java.util.Date date85 = accessToken78.getExpiresAt();
        java.util.Date date86 = accessToken78.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder68.setExpiresAt(date86);
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder87.setRefreshToken("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(accessToken78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test12223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12223");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.lang.String str12 = accessToken11.toString();
        java.lang.String str13 = accessToken11.getClientId();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        boolean boolean47 = accessToken11.equals((java.lang.Object) queryBuilder46);
        org.osiam.client.query.QueryBuilder queryBuilder48 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder50.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.descending("hi!");
        org.osiam.client.query.Query query57 = queryBuilder56.build();
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder56.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.attributes("Cannot connect to server");
        org.osiam.client.query.Query query62 = queryBuilder59.build();
        boolean boolean63 = accessToken11.equals((java.lang.Object) queryBuilder59);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user64 = osiamUserService2.replaceUser("org.osiam.client.exception.ConflictException: PATCH", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(query62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test12224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12224");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.getSortOrder();
        java.lang.String str28 = query25.getSortBy();
        java.lang.String str29 = query25.getFilter();
        java.lang.String str30 = query25.getSortOrder();
        java.lang.String str31 = query25.getAttributes();
        boolean boolean32 = accessToken13.equals((java.lang.Object) query25);
        org.osiam.client.OsiamConnector.Builder builder33 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder37 = builder35.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder39 = builder37.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder41 = builder37.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder43 = builder37.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder45 = builder43.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder47 = builder43.setClientRedirectUri("PUT");
        boolean boolean48 = accessToken13.equals((java.lang.Object) builder47);
        java.lang.String str49 = accessToken13.getClientId();
        java.lang.String str50 = accessToken13.getToken();
        java.lang.String str51 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.AuthService.Builder builder53 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientSecret("");
        org.osiam.client.AuthService.Builder builder61 = builder57.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService62 = builder57.build();
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet71 = accessToken69.getScopes();
        boolean boolean72 = accessToken69.isClientOnly();
        java.lang.Object obj73 = null;
        boolean boolean74 = accessToken69.equals(obj73);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken69);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken69);
        java.lang.String str77 = accessToken69.getClientId();
        java.lang.String str78 = authService62.extractErrorMessageForbidden(accessToken69);
        java.lang.String str79 = osiamGroupService4.extractErrorMessageForbidden(accessToken69);
        org.osiam.client.oauth.AccessToken.Builder builder82 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date83 = null;
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setRefreshTokenExpiresAt(date83);
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder82.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder86.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken89 = builder86.build();
        java.util.Date date90 = accessToken89.getExpiresAt();
        java.lang.String str91 = accessToken89.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken89);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.deleteGroup("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Authorization" + "'", str31, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Bearer " + "'", str50, "Bearer ");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(authService62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(scopeSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Insufficient scopes: []" + "'", str78, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Insufficient scopes: []" + "'", str79, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(accessToken89);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str91, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test12225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12225");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder2.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        boolean boolean8 = accessToken7.isRefreshTokenExpired();
        java.lang.String str9 = accessToken7.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = accessToken7.getScopes();
        boolean boolean11 = scopeSerializer0.isEmpty(scopeSet10);
        boolean boolean12 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper13 = null;
        com.fasterxml.jackson.databind.JavaType javaType14 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper13, javaType14);
        boolean boolean16 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider17 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer18 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean19 = scopeSerializer18.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException27 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean28 = scope25.equals((java.lang.Object) invalidAttributeException27);
        java.lang.String str29 = scope25.getValue();
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str32 = scope31.toString();
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str35 = scope34.getValue();
        java.lang.String str36 = scope34.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        java.lang.String str41 = scope37.getValue();
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException47 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean48 = scope45.equals((java.lang.Object) invalidAttributeException47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.GET;
        boolean boolean53 = scope51.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray55 = new org.osiam.client.oauth.Scope[] { scope24, scope25, scope30, scope31, scope33, scope34, scope37, scope42, scope43, scope44, scope45, scope49, scope50, scope51, scope54 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet56 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet56, scopeArray55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder21.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet56);
        boolean boolean59 = scopeSerializer18.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet56);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass60 = scopeSerializer18.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        boolean boolean68 = accessToken67.isRefreshTokenExpired();
        boolean boolean69 = accessToken67.isClientOnly();
        java.lang.String str70 = accessToken67.getRefreshToken();
        boolean boolean71 = accessToken67.isExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet72 = accessToken67.getScopes();
        boolean boolean73 = scopeSerializer18.isEmpty(scopeSet72);
        boolean boolean74 = scopeSerializer0.isEmpty(serializerProvider17, scopeSet72);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer75 = scopeSerializer0.getDelegatee();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(scopeSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GET" + "'", str29, "GET");
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ME" + "'", str32, "ME");
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PATCH" + "'", str35, "PATCH");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PATCH" + "'", str36, "PATCH");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GET" + "'", str41, "GET");
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scopeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(scopeSetClass60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(scopeSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer75);
    }

    @Test
    public void test12226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12226");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder4.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder4.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder4.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet28 = accessToken26.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder19.addScopes(scopeSet28);
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        java.lang.String str31 = accessToken30.getClientId();
        java.lang.String str32 = accessToken30.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken30);
        java.util.Date date34 = accessToken30.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser35 = osiamUserService2.getCurrentUserBasic(accessToken30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(scopeSet28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12227");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder4 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder4.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder4.build();
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService6.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder10 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken18.getScopes();
        java.lang.String str21 = osiamGroupService11.extractErrorMessageForbidden(accessToken18);
        boolean boolean22 = accessToken18.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet23 = accessToken18.getScopes();
        java.lang.String str24 = accessToken18.getToken();
        java.lang.String str25 = osiamGroupService6.extractErrorMessageForbidden(accessToken18);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        boolean boolean33 = accessToken32.isRefreshTokenExpired();
        boolean boolean34 = accessToken32.isClientOnly();
        java.lang.String str35 = accessToken32.getClientId();
        java.lang.String str36 = accessToken32.getClientId();
        java.lang.String str37 = accessToken32.getToken();
        java.lang.String str38 = accessToken32.toString();
        java.lang.String str39 = accessToken32.getUserId();
        boolean boolean40 = accessToken32.isClientOnly();
        java.lang.String str41 = osiamGroupService6.extractErrorMessageForbidden(accessToken32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList42 = osiamUserService2.getAllUsers(accessToken32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(scopeSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Bearer " + "'", str24, "Bearer ");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Bearer " + "'", str37, "Bearer ");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str38, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
    }

    @Test
    public void test12228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12228");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.lang.String str14 = osiamGroupService3.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.lang.String str22 = accessToken21.toString();
        java.lang.String str23 = accessToken21.getType();
        boolean boolean24 = accessToken21.isExpired();
        java.lang.String str25 = accessToken21.getToken();
        java.lang.String str26 = osiamGroupService3.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getUserName();
        java.lang.String str37 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        java.lang.String str38 = accessToken33.getClientId();
        java.lang.String str39 = accessToken33.getRefreshToken();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test12229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12229");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserName("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("authorization_code");
        org.osiam.client.oauth.Scope scope17 = new org.osiam.client.oauth.Scope("ME");
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder11.addScope(scope17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setClientId("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test12230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12230");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder5 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientId("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        java.lang.String str23 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean24 = accessToken20.isClientOnly();
        java.lang.String str25 = authService10.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken34 = builder31.build();
        java.lang.String str35 = accessToken34.toString();
        java.lang.String str36 = authService10.extractErrorMessageForbidden(accessToken34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.util.Date date44 = accessToken43.getExpiresAt();
        java.lang.String str45 = accessToken43.getRefreshToken();
        java.lang.String str46 = accessToken43.getType();
        java.lang.String str47 = accessToken43.getClientId();
        java.lang.String str48 = accessToken43.getUserName();
        java.lang.String str49 = authService10.extractErrorMessageForbidden(accessToken43);
        org.osiam.client.exception.UnauthorizedException unauthorizedException51 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int52 = unauthorizedException51.getHttpStatusCode();
        int int53 = unauthorizedException51.getHttpStatusCode();
        java.lang.Throwable[] throwableArray54 = unauthorizedException51.getSuppressed();
        boolean boolean55 = accessToken43.equals((java.lang.Object) unauthorizedException51);
        java.lang.String str56 = accessToken43.toString();
        java.lang.String str57 = accessToken43.getToken();
        org.osiam.client.OsiamConnector.Builder builder58 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder60 = builder58.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder62 = builder60.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder64 = builder62.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder66 = builder62.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector67 = builder66.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder72 = queryBuilder70.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder74 = queryBuilder70.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder76 = queryBuilder74.descending("hi!");
        org.osiam.client.query.Query query77 = queryBuilder76.build();
        java.lang.String str78 = query77.toString();
        java.lang.String str79 = query77.getSortOrder();
        java.lang.String str80 = query77.getSortBy();
        org.osiam.client.query.Query query81 = query77.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder82 = osiamConnector67.createQueryBuilder(query81);
        boolean boolean83 = accessToken43.equals((java.lang.Object) queryBuilder82);
        java.lang.String str84 = osiamGroupService2.extractErrorMessageForbidden(accessToken43);
        org.osiam.client.oauth.AccessToken accessToken86 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteGroup("org.osiam.client.exception.ConnectionInitializationException: ", accessToken86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str35, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Insufficient scopes: []" + "'", str36, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 401 + "'", int52 == 401);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 401 + "'", int53 == 401);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str56, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Bearer " + "'", str57, "Bearer ");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(osiamConnector67);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(queryBuilder76);
        org.junit.Assert.assertNotNull(query77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str78, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "descending" + "'", str79, "descending");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(query81);
        org.junit.Assert.assertNotNull(queryBuilder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Insufficient scopes: []" + "'", str84, "Insufficient scopes: []");
    }

    @Test
    public void test12231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12231");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getUserName();
        java.util.Date date23 = accessToken20.getRefreshTokenExpiresAt();
        java.lang.String str24 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        javax.ws.rs.core.Response.StatusType statusType26 = null;
        org.osiam.client.oauth.AccessToken accessToken27 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("ME", statusType26, accessToken27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
    }

    @Test
    public void test12232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12232");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService.Builder builder17 = builder13.setClientId("ME");
        org.osiam.client.AuthService.Builder builder19 = builder13.setClientSecret("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test12233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12233");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setRefreshToken("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException12 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean13 = scope10.equals((java.lang.Object) invalidAttributeException12);
        java.lang.String str14 = scope10.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder7.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.addScope(scope24);
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        java.lang.String str30 = scope26.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder23.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder19.addScope(scope26);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.addScope(scope35);
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException39 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean40 = scope37.equals((java.lang.Object) invalidAttributeException39);
        java.lang.String str41 = scope37.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder34.addScope(scope37);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setUserId("");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        java.util.Date date56 = accessToken55.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder46.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder19.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken67 = builder66.build();
        java.util.Date date68 = accessToken67.getExpiresAt();
        java.util.Date date69 = accessToken67.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder58.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken accessToken71 = builder58.build();
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder58.setUserId("DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken80);
        java.util.Date date82 = accessToken80.getExpiresAt();
        boolean boolean83 = accessToken80.isRefreshTokenExpired();
        java.util.Date date84 = accessToken80.getExpiresAt();
        java.util.Date date85 = accessToken80.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder58.setExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder1.setExpiresAt(date85);
        org.osiam.client.oauth.AccessToken accessToken88 = builder1.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GET" + "'", str30, "GET");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "GET" + "'", str41, "GET");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(accessToken67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(accessToken71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(accessToken88);
    }

    @Test
    public void test12234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12234");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getDescription();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str4 = oAuthErrorMessage0.getDescription();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str6 = oAuthErrorMessage0.getDescription();
        java.lang.String str7 = oAuthErrorMessage0.getDescription();
        java.lang.String str8 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str9 = oAuthErrorMessage0.getErrorCode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test12235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12235");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("PUT");
    }

    @Test
    public void test12236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12236");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder4.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder4.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count((int) (byte) 1);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder10.descending("2024-03-22T13:51:20.388");
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count((int) ' ');
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        long long22 = query21.getStartIndex();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test12237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12237");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
    }

    @Test
    public void test12238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12238");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.lang.String str15 = accessToken13.getUserName();
        java.util.Date date16 = accessToken13.getRefreshTokenExpiresAt();
        java.lang.String str17 = accessToken13.getUserName();
        java.util.Date date18 = accessToken13.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService3.checkAndHandleResponse("org.osiam.client.exception.ConflictException: ", statusType6, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12239");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = accessToken12.getScopes();
        java.lang.String str16 = osiamGroupService3.extractErrorMessageForbidden(accessToken12);
        java.lang.String str17 = accessToken12.getUserId();
        boolean boolean18 = accessToken12.isClientOnly();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(scopeSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test12240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12240");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        java.lang.String str50 = accessToken48.getUserId();
        java.lang.String str51 = accessToken48.getClientId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet52 = accessToken48.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider54 = null;
        scopeSerializer0.serialize(scopeSet52, jsonGenerator53, serializerProvider54);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer56 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer57 = scopeSerializer0.unwrappingSerializer(nameTransformer56);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date61 = null;
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshTokenExpiresAt(date61);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        java.util.Date date66 = accessToken65.getExpiresAt();
        java.lang.String str67 = accessToken65.getUserName();
        java.lang.String str68 = accessToken65.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder70 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date71 = null;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setRefreshTokenExpiresAt(date71);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken75 = builder74.build();
        boolean boolean76 = accessToken75.isRefreshTokenExpired();
        java.lang.String str77 = accessToken75.getClientId();
        boolean boolean78 = accessToken65.equals((java.lang.Object) accessToken75);
        java.lang.String str79 = accessToken75.getUserId();
        java.lang.String str80 = accessToken75.getToken();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken75.getScopes();
        boolean boolean82 = scopeSetJsonSerializer57.isEmpty(serializerProvider58, scopeSet81);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer83 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer84 = scopeSetJsonSerializer57.unwrappingSerializer(nameTransformer83);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer85 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer86 = scopeSetJsonSerializer84.unwrappingSerializer(nameTransformer85);
        boolean boolean87 = scopeSetJsonSerializer84.usesObjectId();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(scopeSet52);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Bearer " + "'", str80, "Bearer ");
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer84);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test12241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12241");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test12242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12242");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet1 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet2 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.core.JsonParser jsonParser3 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext4 = null;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeserializer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = scopeDeserializer0.deserializeWithType(jsonParser3, deserializationContext4, typeDeserializer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeSet1);
        org.junit.Assert.assertNull(scopeSet2);
    }

    @Test
    public void test12243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12243");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("PUT");
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder3.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder7.setClientId("hi!");
        boolean boolean11 = scope1.equals((java.lang.Object) builder7);
        java.lang.String str12 = scope1.getValue();
        java.lang.String str13 = scope1.toString();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(accessToken8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PUT" + "'", str12, "PUT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PUT" + "'", str13, "PUT");
    }

    @Test
    public void test12244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12244");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        boolean boolean4 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer6 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeDeserializer0.unwrappingDeserializer(nameTransformer8);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer10 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer11 = scopeDeserializer0.unwrappingDeserializer(nameTransformer10);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(wildcardJsonDeserializer6);
        org.junit.Assert.assertNull(objectIdReader7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer11);
    }

    @Test
    public void test12245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12245");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder48 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder49 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder53 = queryBuilder51.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder55 = queryBuilder53.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder53.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder53.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder59.count((int) (short) -1);
        org.osiam.client.query.Query query64 = queryBuilder59.build();
        java.lang.String str65 = query64.toString();
        java.lang.String str66 = query64.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder67 = osiamConnector13.createQueryBuilder(query64);
        org.osiam.client.oauth.AccessToken.Builder builder70 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope71 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.addScope(scope71);
        org.osiam.client.oauth.Scope scope73 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException75 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean76 = scope73.equals((java.lang.Object) invalidAttributeException75);
        java.lang.String str77 = scope73.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder70.addScope(scope73);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder80.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder82.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder84.setUserId("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken89 = builder84.build();
        java.lang.String str90 = accessToken89.getClientId();
        java.lang.String str91 = accessToken89.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.deleteGroup("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(queryBuilder53);
        org.junit.Assert.assertNotNull(queryBuilder55);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]" + "'", str65, "Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ascending" + "'", str66, "ascending");
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(scope71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(scope73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "GET" + "'", str77, "GET");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(accessToken89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Bearer " + "'", str90, "Bearer ");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Bearer " + "'", str91, "Bearer ");
    }

    @Test
    public void test12246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12246");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder7 = builder4.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder9 = builder4.setResourceServerEndpoint("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
        org.osiam.client.OsiamConnector.Builder builder11 = builder9.setResourceServerEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=100, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test12247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12247");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamRequestException: descending");
    }

    @Test
    public void test12248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12248");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.lang.String str13 = accessToken11.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = accessToken11.getScopes();
        java.util.Date date15 = accessToken11.getExpiresAt();
        java.lang.String str16 = accessToken11.getType();
        java.util.Date date17 = accessToken11.getRefreshTokenExpiresAt();
        java.lang.String str18 = osiamGroupService2.extractErrorMessageForbidden(accessToken11);
        javax.ws.rs.core.Response.StatusType statusType20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.util.Date date28 = accessToken27.getExpiresAt();
        java.lang.String str29 = accessToken27.getUserName();
        java.lang.String str30 = accessToken27.toString();
        java.lang.String str31 = accessToken27.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]", statusType20, accessToken27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(scopeSet14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str30, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test12249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12249");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.lang.String str11 = accessToken10.toString();
        java.lang.String str12 = accessToken10.getClientId();
        java.lang.String str13 = accessToken10.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user14 = osiamUserService2.createUser(user3, accessToken10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str11, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str13, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12250");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget37 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget38 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.addScope(scope43);
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException47 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean48 = scope45.equals((java.lang.Object) invalidAttributeException47);
        java.lang.String str49 = scope45.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder42.addScope(scope45);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.addScope(scope57);
        org.osiam.client.oauth.GrantType grantType59 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str60 = grantType59.getUrlParam();
        boolean boolean61 = scope57.equals((java.lang.Object) grantType59);
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.addScope(scope64);
        boolean boolean66 = scope57.equals((java.lang.Object) builder63);
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.addScope(scope69);
        org.osiam.client.oauth.Scope scope71 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException73 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean74 = scope71.equals((java.lang.Object) invalidAttributeException73);
        java.lang.String str75 = scope71.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder68.addScope(scope71);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder63.addScope(scope71);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.setUserId("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder77.setClientId("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken84 = builder77.build();
        java.lang.String str85 = accessToken84.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService6.checkAndHandleResponse("org.osiam.client.exception.NoResultException: Insufficient scopes: [null, PATCH, GET, ME, ADMIN, GET POST PUT PATCH DELETE, PUT]", statusType40, accessToken84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget36);
        org.junit.Assert.assertNotNull(webTarget37);
        org.junit.Assert.assertNotNull(webTarget38);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GET" + "'", str49, "GET");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + grantType59 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType59.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "client_credentials" + "'", str60, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(scope71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "GET" + "'", str75, "GET");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str85, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test12251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12251");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str7 = scope6.toString();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        boolean boolean17 = accessToken14.isRefreshTokenExpired();
        java.lang.String str18 = accessToken14.getRefreshToken();
        boolean boolean19 = scope6.equals((java.lang.Object) accessToken14);
        java.lang.String str20 = osiamGroupService5.extractErrorMessageForbidden(accessToken14);
        java.lang.String str21 = accessToken14.getUserId();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PUT" + "'", str7, "PUT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test12252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12252");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setResourceServerEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector21.createQueryBuilder();
        org.osiam.resources.scim.UpdateGroup updateGroup24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        java.lang.String str33 = accessToken31.getUserId();
        java.lang.String str34 = accessToken31.getClientId();
        java.util.Date date35 = accessToken31.getRefreshTokenExpiresAt();
        java.util.Date date36 = accessToken31.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group37 = osiamConnector21.updateGroup("descending", updateGroup24, accessToken31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12253");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        boolean boolean20 = accessToken15.isClientOnly();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = osiamGroupService4.extractErrorMessageForbidden(accessToken15);
        javax.ws.rs.client.WebTarget webTarget23 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group24 = null;
        org.osiam.client.AuthService.Builder builder26 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder32 = builder30.setClientSecret("");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.AuthService authService36 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet45 = accessToken43.getScopes();
        boolean boolean46 = accessToken43.isRefreshTokenExpired();
        boolean boolean47 = accessToken43.isExpired();
        java.util.Date date48 = accessToken43.getExpiresAt();
        java.lang.String str49 = authService36.extractErrorMessageForbidden(accessToken43);
        java.lang.String str50 = accessToken43.getRefreshToken();
        java.lang.String str51 = accessToken43.getUserName();
        java.lang.String str52 = accessToken43.getUserName();
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer53 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass54 = scopeDeserializer53.handledType();
        boolean boolean55 = scopeDeserializer53.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet56 = scopeDeserializer53.getNullValue();
        java.lang.Class<?> wildcardClass57 = scopeDeserializer53.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader58 = scopeDeserializer53.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader59 = scopeDeserializer53.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet60 = scopeDeserializer53.getNullValue();
        java.util.Collection<java.lang.Object> objCollection61 = scopeDeserializer53.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer62 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer63 = scopeDeserializer53.unwrappingDeserializer(nameTransformer62);
        boolean boolean64 = scopeDeserializer53.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = scopeDeserializer53.getNullValue();
        boolean boolean66 = accessToken43.equals((java.lang.Object) scopeSet65);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group67 = osiamGroupService4.createGroup(group24, accessToken43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(authService36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(scopeSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(scopeSet56);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertNull(objectIdReader58);
        org.junit.Assert.assertNull(objectIdReader59);
        org.junit.Assert.assertNull(scopeSet60);
        org.junit.Assert.assertNull(objCollection61);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(scopeSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test12254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12254");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.addScope(scope9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        java.lang.String str20 = accessToken19.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet21 = accessToken19.getScopes();
        java.lang.String str22 = accessToken19.getToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamUserService5.deleteUser("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ", accessToken19);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(scopeSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Bearer " + "'", str22, "Bearer ");
    }

    @Test
    public void test12255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12255");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.AuthService.Builder builder8 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientId("ME");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.addScope(scope36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder35.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder31.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.addScope(scope47);
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException51 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean52 = scope49.equals((java.lang.Object) invalidAttributeException51);
        java.lang.String str53 = scope49.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder46.addScope(scope49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope63 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.addScope(scope63);
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException67 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean68 = scope65.equals((java.lang.Object) invalidAttributeException67);
        java.lang.String str69 = scope65.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder62.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder58.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder31.addScope(scope65);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setClientId("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope77 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str78 = scope77.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder72.addScope(scope77);
        org.osiam.client.oauth.Scope[] scopeArray80 = new org.osiam.client.oauth.Scope[] { scope77 };
        java.net.URI uRI81 = authService17.getAuthorizationUri(scopeArray80);
        java.net.URI uRI82 = authService6.getAuthorizationUri(scopeArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken84 = authService6.retrieveAccessToken("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given authentication code can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(authService17);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GET" + "'", str53, "GET");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(scope63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "GET" + "'", str69, "GET");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(scope77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PUT" + "'", str78, "PUT");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(scopeArray80);
        org.junit.Assert.assertNotNull(uRI81);
        org.junit.Assert.assertNotNull(uRI82);
    }

    @Test
    public void test12256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12256");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=org.osiam.client.exception.ForbiddenException: hi!, sortBy=ME, sortOrder=descending, startIndex=90, count=10]");
    }

    @Test
    public void test12257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12257");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = osiamConnector9.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("hi!");
        org.osiam.client.query.Query query20 = queryBuilder19.build();
        org.osiam.client.query.Query query21 = queryBuilder19.build();
        long long22 = query21.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder23 = osiamConnector9.createQueryBuilder(query21);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken33 = builder30.build();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector9.revokeAllAccessTokens("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH", accessToken33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(query20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
    }

    @Test
    public void test12258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12258");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeSetJsonDeserializer8.getObjectIdReader();
        boolean boolean10 = scopeSetJsonDeserializer8.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer8.unwrappingDeserializer(nameTransformer11);
        java.lang.Class<?> wildcardClass13 = scopeSetJsonDeserializer12.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeSetJsonDeserializer12.getDelegatee();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardJsonDeserializer14);
    }

    @Test
    public void test12259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12259");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken15.getScopes();
        java.lang.String str21 = accessToken15.getToken();
        java.lang.String str22 = osiamGroupService3.extractErrorMessageForbidden(accessToken15);
        javax.ws.rs.client.WebTarget webTarget23 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group25 = null;
        org.osiam.client.OsiamGroupService.Builder builder27 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService28 = builder27.build();
        javax.ws.rs.client.WebTarget webTarget29 = osiamGroupService28.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget30 = osiamGroupService28.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget31 = osiamGroupService28.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget32 = osiamGroupService28.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        boolean boolean40 = accessToken39.isRefreshTokenExpired();
        boolean boolean41 = accessToken39.isClientOnly();
        java.lang.String str42 = accessToken39.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet43 = accessToken39.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken39);
        java.lang.String str45 = osiamGroupService28.extractErrorMessageForbidden(accessToken39);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group46 = osiamGroupService3.updateGroup("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=org.osiam.client.exception.ConnectionInitializationException: Bearer , userId=, userName=org.osiam.client.exception.NoResultException: refresh_token]", group25, accessToken39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget23);
        org.junit.Assert.assertNotNull(osiamGroupService28);
        org.junit.Assert.assertNotNull(webTarget29);
        org.junit.Assert.assertNotNull(webTarget30);
        org.junit.Assert.assertNotNull(webTarget31);
        org.junit.Assert.assertNotNull(webTarget32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(scopeSet43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
    }

    @Test
    public void test12260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12260");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        boolean boolean9 = scopeDeserializer0.isCachable();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer0.handledType();
        boolean boolean11 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.core.JsonParser jsonParser12 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = scopeDeserializer0.deserialize(jsonParser12, deserializationContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test12261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12261");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        javax.ws.rs.core.Response.StatusType statusType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = osiamGroupService2.extractErrorMessage("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", statusType27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
    }

    @Test
    public void test12262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12262");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.lang.String str23 = accessToken22.toString();
        java.lang.String str24 = accessToken22.getClientId();
        java.util.Date date25 = accessToken22.getExpiresAt();
        boolean boolean26 = accessToken22.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList27 = osiamConnector15.getAllUsers(accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str23, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test12263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12263");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.query.QueryBuilder queryBuilder37 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder43 = queryBuilder39.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.descending("hi!");
        org.osiam.client.query.Query query46 = queryBuilder45.build();
        java.lang.String str47 = query46.toString();
        java.lang.String str48 = query46.getSortOrder();
        java.lang.String str49 = query46.getSortBy();
        java.lang.String str50 = query46.getFilter();
        java.lang.String str51 = query46.getSortOrder();
        java.lang.String str52 = query46.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder53 = new org.osiam.client.query.QueryBuilder(query46);
        long long54 = query46.getStartIndex();
        org.osiam.client.query.Query query55 = query46.nextPage();
        java.lang.String str56 = query46.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder57 = new org.osiam.client.query.QueryBuilder(query46);
        java.lang.String str58 = query46.getAttributes();
        java.lang.String str59 = query46.getFilter();
        org.osiam.client.query.Query query60 = query46.nextPage();
        org.osiam.client.query.Query query61 = query60.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder62 = osiamConnector7.createQueryBuilder(query60);
        int int63 = query60.getCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(queryBuilder43);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(query46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str47, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "descending" + "'", str48, "descending");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "descending" + "'", str51, "descending");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Authorization" + "'", str52, "Authorization");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Authorization" + "'", str58, "Authorization");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(query60);
        org.junit.Assert.assertNotNull(query61);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
    }

    @Test
    public void test12264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12264");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = osiamConnector5.createQueryBuilder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken8 = osiamConnector5.retrieveAccessToken("PATCH");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder6);
    }

    @Test
    public void test12265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12265");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector21 = builder20.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.toString();
        java.lang.String str34 = query31.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder35 = osiamConnector21.createQueryBuilder(query31);
        org.osiam.client.query.QueryBuilder queryBuilder36 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder38.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder44 = queryBuilder42.descending("hi!");
        org.osiam.client.query.Query query45 = queryBuilder44.build();
        org.osiam.client.query.QueryBuilder queryBuilder46 = osiamConnector21.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder47 = osiamConnector13.createQueryBuilder(query45);
        org.osiam.client.query.QueryBuilder queryBuilder48 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder50.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.descending("hi!");
        org.osiam.client.query.Query query57 = queryBuilder56.build();
        java.lang.String str58 = query57.toString();
        java.lang.String str59 = query57.getSortOrder();
        java.lang.String str60 = query57.getFilter();
        java.lang.String str61 = query57.getSortOrder();
        java.lang.String str62 = query57.getAttributes();
        int int63 = query57.getCount();
        org.osiam.client.query.Query query64 = query57.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder65 = osiamConnector13.createQueryBuilder(query64);
        org.osiam.resources.scim.User user66 = null;
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        java.lang.String str74 = accessToken73.toString();
        java.lang.String str75 = accessToken73.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken73);
        java.lang.String str77 = accessToken73.getClientId();
        boolean boolean78 = accessToken73.isExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken73);
        java.lang.String str80 = accessToken73.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user81 = osiamConnector13.createUser(user66, accessToken73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(osiamConnector21);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(query45);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str58, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "descending" + "'", str59, "descending");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "descending" + "'", str61, "descending");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Authorization" + "'", str62, "Authorization");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str74, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test12266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12266");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass8 = scopeDeserializer0.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection10 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeDeserializer0.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(objCollection10);
        org.junit.Assert.assertNull(scopeSet11);
    }

    @Test
    public void test12267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12267");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.descending("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.ascending("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.filter("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test12268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12268");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService10 = builder7.build();
        org.osiam.client.AuthService.Builder builder12 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("ME");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = authService21.extractErrorMessageForbidden(accessToken28);
        boolean boolean31 = accessToken28.isRefreshTokenExpired();
        java.lang.String str32 = accessToken28.getType();
        java.lang.String str33 = accessToken28.getToken();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str45 = scope44.toString();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder39.addScope(scope44);
        boolean boolean47 = accessToken28.equals((java.lang.Object) builder39);
        java.lang.String str48 = authService10.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        boolean boolean57 = accessToken55.isClientOnly();
        java.lang.String str58 = accessToken55.getClientId();
        java.lang.String str59 = accessToken55.getUserId();
        java.lang.String str60 = accessToken55.getClientId();
        java.lang.String str61 = accessToken55.getRefreshToken();
        java.lang.String str62 = accessToken55.getToken();
        java.lang.String str63 = authService10.extractErrorMessageForbidden(accessToken55);
        java.lang.String str64 = accessToken55.getUserId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Bearer " + "'", str33, "Bearer ");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PUT" + "'", str45, "PUT");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Bearer " + "'", str62, "Bearer ");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test12269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12269");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet7 = scopeSetJsonDeserializer6.getNullValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer8 = scopeSetJsonDeserializer6.getDelegatee();
        com.fasterxml.jackson.core.JsonParser jsonParser9 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext10 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer11 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean12 = scopeSerializer11.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer14 = scopeSerializer11.unwrappingSerializer(nameTransformer13);
        boolean boolean15 = scopeSerializer11.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer11.unwrappingSerializer(nameTransformer16);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper18 = null;
        com.fasterxml.jackson.databind.JavaType javaType19 = null;
        scopeSerializer11.acceptJsonFormatVisitor(jsonFormatVisitorWrapper18, javaType19);
        boolean boolean21 = scopeSerializer11.usesObjectId();
        org.osiam.client.helper.ScopeSerializer scopeSerializer22 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean23 = scopeSerializer22.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer24 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer25 = scopeSerializer22.unwrappingSerializer(nameTransformer24);
        boolean boolean26 = scopeSerializer22.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer27 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer28 = scopeSerializer22.unwrappingSerializer(nameTransformer27);
        org.osiam.client.helper.ScopeSerializer scopeSerializer29 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean30 = scopeSerializer29.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str43 = scope42.toString();
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str46 = scope45.getValue();
        java.lang.String str47 = scope45.getValue();
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException50 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean51 = scope48.equals((java.lang.Object) invalidAttributeException50);
        java.lang.String str52 = scope48.getValue();
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException58 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean59 = scope56.equals((java.lang.Object) invalidAttributeException58);
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.GET;
        boolean boolean64 = scope62.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray66 = new org.osiam.client.oauth.Scope[] { scope35, scope36, scope41, scope42, scope44, scope45, scope48, scope53, scope54, scope55, scope56, scope60, scope61, scope62, scope65 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet67 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet67, scopeArray66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder32.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        boolean boolean70 = scopeSerializer29.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        boolean boolean71 = scopeSetJsonSerializer28.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        boolean boolean72 = scopeSerializer11.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet73 = scopeSetJsonDeserializer6.deserialize(jsonParser9, deserializationContext10, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet67);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.LinkedHashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(scopeSet7);
        org.junit.Assert.assertNull(wildcardJsonDeserializer8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ME" + "'", str43, "ME");
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PATCH" + "'", str46, "PATCH");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GET" + "'", str52, "GET");
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(scopeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test12270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12270");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]");
    }

    @Test
    public void test12271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12271");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.util.Date date29 = accessToken10.getExpiresAt();
        java.lang.String str30 = accessToken10.getUserName();
        java.lang.String str31 = osiamGroupService2.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        boolean boolean40 = accessToken38.isClientOnly();
        java.lang.String str41 = accessToken38.getClientId();
        boolean boolean42 = accessToken38.isClientOnly();
        java.lang.String str43 = accessToken38.getToken();
        java.lang.String str44 = accessToken38.getToken();
        boolean boolean45 = accessToken38.isRefreshTokenExpired();
        java.lang.String str46 = osiamGroupService2.extractErrorMessageForbidden(accessToken38);
        javax.ws.rs.client.WebTarget webTarget47 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        java.util.Date date56 = accessToken55.getExpiresAt();
        java.lang.String str57 = accessToken55.getRefreshToken();
        java.lang.String str58 = accessToken55.getType();
        java.lang.String str59 = accessToken55.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group60 = osiamGroupService2.getGroup("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken55);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Bearer " + "'", str43, "Bearer ");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Bearer " + "'", str44, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget47);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test12272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12272");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder8.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.descending("");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.startIndex((long) '#');
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("Insufficient scopes: []");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.descending("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
    }

    @Test
    public void test12273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12273");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("Insufficient scopes: []");
        int int2 = unauthorizedException1.getHttpStatusCode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 401 + "'", int2 == 401);
    }

    @Test
    public void test12274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12274");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = accessToken11.getScopes();
        boolean boolean14 = accessToken11.isRefreshTokenExpired();
        boolean boolean15 = accessToken11.isExpired();
        org.osiam.client.AuthService.Builder builder17 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientId("ME");
        org.osiam.client.AuthService.Builder builder21 = builder17.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService22 = builder17.build();
        boolean boolean23 = accessToken11.equals((java.lang.Object) builder17);
        java.lang.String str24 = accessToken11.getToken();
        java.lang.String str25 = accessToken11.getType();
        java.lang.String str26 = accessToken11.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group27 = osiamGroupService2.replaceResource("org.osiam.client.exception.UnauthorizedException: GET", group4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(scopeSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(authService22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Bearer " + "'", str24, "Bearer ");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test12275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12275");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.OsiamGroupService.Builder builder28 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.lang.String str39 = accessToken36.toString();
        java.lang.String str40 = osiamGroupService29.extractErrorMessageForbidden(accessToken36);
        java.util.Date date41 = accessToken36.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder26.setExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder42.setExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder42.setUserId("password");
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setType("Insufficient scopes: []");
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setType("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(osiamGroupService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test12276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12276");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.lang.String str21 = accessToken20.toString();
        java.lang.String str22 = accessToken20.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken23 = osiamConnector17.validateAccessToken(accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test12277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12277");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.addScope(scope4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder3.addScope(scope6);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder15.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setType("client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setClientId("descending");
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        java.util.Date date43 = accessToken41.getExpiresAt();
        boolean boolean44 = accessToken41.isRefreshTokenExpired();
        java.util.Date date45 = accessToken41.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder30.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder1.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.setUserName("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setUserName("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test12278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12278");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(401, "Insufficient scopes: []");
    }

    @Test
    public void test12279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12279");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(0);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.attributes("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder17.ascending("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE, PUT], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder23.attributes("org.osiam.client.exception.OsiamRequestException: ");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder23.filter("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
    }

    @Test
    public void test12280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12280");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setType("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder9.setClientId("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.helper.ScopeSerializer scopeSerializer16 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.lang.String str25 = accessToken23.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken23.getScopes();
        boolean boolean27 = scopeSerializer16.isEmpty(scopeSet26);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer28 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer29 = scopeSerializer16.unwrappingSerializer(nameTransformer28);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper30 = null;
        com.fasterxml.jackson.databind.JavaType javaType31 = null;
        scopeSetJsonSerializer29.acceptJsonFormatVisitor(jsonFormatVisitorWrapper30, javaType31);
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService39 = builder38.build();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        boolean boolean48 = accessToken46.isClientOnly();
        java.lang.String str49 = accessToken46.getClientId();
        java.lang.String str50 = authService39.extractErrorMessageForbidden(accessToken46);
        java.lang.String str51 = accessToken46.getUserId();
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        java.lang.String str60 = accessToken58.getUserId();
        boolean boolean61 = accessToken58.isRefreshTokenExpired();
        boolean boolean62 = accessToken46.equals((java.lang.Object) accessToken58);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet63 = accessToken58.getScopes();
        boolean boolean64 = scopeSetJsonSerializer29.isEmpty(scopeSet63);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder15.addScopes(scopeSet63);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(scopeSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer29);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(authService39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(scopeSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test12281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12281");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        java.util.Date date13 = accessToken11.getExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.descending("hi!");
        org.osiam.client.query.Query query23 = queryBuilder22.build();
        java.lang.String str24 = query23.toString();
        java.lang.String str25 = query23.getSortOrder();
        org.osiam.client.query.Query query26 = query23.nextPage();
        boolean boolean27 = accessToken11.equals((java.lang.Object) query23);
        java.lang.String str28 = accessToken11.getType();
        java.lang.String str29 = accessToken11.getType();
        java.lang.String str30 = accessToken11.getType();
        java.lang.String str31 = accessToken11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user32 = osiamUserService2.replaceUser("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME", user4, accessToken11);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str24, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "descending" + "'", str25, "descending");
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12282");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder9 = osiamConnector7.createQueryBuilder();
        org.osiam.client.OsiamGroupService.Builder builder11 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder11.build();
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder11.build();
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder11.build();
        org.osiam.client.AuthService.Builder builder16 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientId("ME");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.OsiamGroupService.Builder builder27 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet37 = accessToken35.getScopes();
        java.lang.String str38 = osiamGroupService28.extractErrorMessageForbidden(accessToken35);
        boolean boolean39 = accessToken35.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.lang.String str41 = authService25.extractErrorMessageForbidden(accessToken35);
        java.lang.String str42 = accessToken35.getType();
        java.lang.String str43 = osiamGroupService14.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken35);
        java.util.Date date45 = accessToken35.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken46 = osiamConnector7.validateAccessToken(accessToken35);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(osiamGroupService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(scopeSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12283");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection8 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        boolean boolean9 = scopeSetJsonDeserializer6.isCachable();
        boolean boolean10 = scopeSetJsonDeserializer6.isCachable();
        java.util.Collection<java.lang.Object> objCollection11 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer13 = scopeSetJsonDeserializer6.unwrappingDeserializer(nameTransformer12);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader14 = scopeSetJsonDeserializer6.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(objCollection11);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer13);
        org.junit.Assert.assertNull(objectIdReader14);
    }

    @Test
    public void test12284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12284");
        org.osiam.client.exception.OAuthErrorMessage oAuthErrorMessage0 = new org.osiam.client.exception.OAuthErrorMessage();
        java.lang.String str1 = oAuthErrorMessage0.getDescription();
        java.lang.String str2 = oAuthErrorMessage0.getDescription();
        java.lang.String str3 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str4 = oAuthErrorMessage0.getDescription();
        java.lang.String str5 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str6 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str7 = oAuthErrorMessage0.getErrorCode();
        java.lang.String str8 = oAuthErrorMessage0.getDescription();
        java.lang.String str9 = oAuthErrorMessage0.getDescription();
        java.lang.String str10 = oAuthErrorMessage0.getDescription();
        java.lang.String str11 = oAuthErrorMessage0.getDescription();
        java.lang.String str12 = oAuthErrorMessage0.getDescription();
        java.lang.String str13 = oAuthErrorMessage0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test12285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12285");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        java.lang.String str8 = accessToken6.getUserName();
        java.lang.String str9 = accessToken6.toString();
        java.lang.String str10 = accessToken6.getRefreshToken();
        java.util.Date date11 = accessToken6.getExpiresAt();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str9, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12286");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("refresh_token");
        java.lang.String str2 = scope1.getValue();
        org.osiam.client.helper.ScopeSerializer scopeSerializer3 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean4 = scopeSerializer3.isUnwrappingSerializer();
        boolean boolean5 = scopeSerializer3.usesObjectId();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.addScope(scope9);
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException13 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean14 = scope11.equals((java.lang.Object) invalidAttributeException13);
        java.lang.String str15 = scope11.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder8.addScope(scope11);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        org.osiam.client.helper.ScopeSerializer scopeSerializer22 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean23 = scopeSerializer22.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer24 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer25 = scopeSerializer22.unwrappingSerializer(nameTransformer24);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str39 = scope38.toString();
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str42 = scope41.getValue();
        java.lang.String str43 = scope41.getValue();
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException46 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean47 = scope44.equals((java.lang.Object) invalidAttributeException46);
        java.lang.String str48 = scope44.getValue();
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        boolean boolean60 = scope58.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray62 = new org.osiam.client.oauth.Scope[] { scope31, scope32, scope37, scope38, scope40, scope41, scope44, scope49, scope50, scope51, scope52, scope56, scope57, scope58, scope61 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet63 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet63, scopeArray62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder28.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet63);
        boolean boolean66 = scopeSetJsonSerializer25.isEmpty(serializerProvider26, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet63);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder20.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet63);
        boolean boolean68 = scopeSerializer3.isEmpty(serializerProvider6, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet63);
        boolean boolean69 = scope1.equals((java.lang.Object) scopeSerializer3);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "refresh_token" + "'", str2, "refresh_token");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GET" + "'", str15, "GET");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ME" + "'", str39, "ME");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PATCH" + "'", str42, "PATCH");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PATCH" + "'", str43, "PATCH");
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GET" + "'", str48, "GET");
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scopeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test12287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12287");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.lang.String str18 = accessToken16.getUserId();
        java.lang.String str19 = accessToken16.getClientId();
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService9.extractErrorMessageForbidden(accessToken16);
        java.lang.String str22 = accessToken16.toString();
        java.lang.String str23 = accessToken16.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList24 = osiamUserService2.getAllUsers(accessToken16);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(authService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test12288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12288");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getClientId();
        boolean boolean25 = accessToken21.isClientOnly();
        boolean boolean26 = accessToken11.equals((java.lang.Object) accessToken21);
        java.util.Date date27 = accessToken21.getRefreshTokenExpiresAt();
        java.lang.String str28 = accessToken21.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group29 = osiamGroupService2.replaceGroup("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", group4, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test12289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12289");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder12 = builder4.setResourceServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setResourceServerEndpoint("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test12290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12290");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserName("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test12291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12291");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.lang.Class<?> wildcardClass6 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.core.JsonParser jsonParser7 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeDeserializer0.deserialize(jsonParser7, deserializationContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test12292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12292");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str7 = scope6.toString();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        boolean boolean17 = accessToken14.isRefreshTokenExpired();
        java.lang.String str18 = accessToken14.getRefreshToken();
        boolean boolean19 = scope6.equals((java.lang.Object) accessToken14);
        java.lang.String str20 = osiamGroupService5.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        java.util.Date date28 = accessToken27.getExpiresAt();
        java.lang.String str29 = accessToken27.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken27);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        boolean boolean39 = accessToken37.isClientOnly();
        java.lang.String str40 = accessToken37.getClientId();
        boolean boolean41 = accessToken37.isClientOnly();
        boolean boolean42 = accessToken27.equals((java.lang.Object) accessToken37);
        java.util.Date date43 = accessToken37.getRefreshTokenExpiresAt();
        java.lang.String str44 = accessToken37.toString();
        java.lang.String str45 = osiamGroupService5.extractErrorMessageForbidden(accessToken37);
        org.osiam.resources.scim.Group group47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        boolean boolean55 = accessToken54.isRefreshTokenExpired();
        boolean boolean56 = accessToken54.isClientOnly();
        java.lang.String str57 = accessToken54.getRefreshToken();
        boolean boolean58 = accessToken54.isExpired();
        boolean boolean59 = accessToken54.isRefreshTokenExpired();
        org.osiam.client.AuthService.Builder builder61 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder63 = builder61.setClientId("ME");
        boolean boolean64 = accessToken54.equals((java.lang.Object) builder61);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group65 = osiamGroupService5.replaceResource("org.osiam.client.exception.ForbiddenException: hi!", group47, accessToken54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PUT" + "'", str7, "PUT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str44, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test12293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12293");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder3 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder5 = queryBuilder3.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder7 = queryBuilder5.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder9 = queryBuilder5.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.descending("hi!");
        org.osiam.client.query.Query query12 = queryBuilder11.build();
        java.lang.String str13 = query12.getAttributes();
        java.lang.String str14 = query12.toString();
        java.lang.String str15 = query12.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query12);
        java.lang.String str17 = query12.getSortOrder();
        java.lang.String str18 = query12.getSortOrder();
        org.osiam.client.query.Query query19 = query12.nextPage();
        java.lang.String str20 = query12.getSortBy();
        java.lang.String str21 = query12.getFilter();
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        java.lang.String str35 = accessToken33.getRefreshToken();
        java.lang.String str36 = accessToken33.getType();
        java.lang.String str37 = accessToken33.getClientId();
        java.lang.String str38 = accessToken33.getUserName();
        java.lang.String str39 = accessToken33.toString();
        java.lang.String str40 = accessToken33.getUserName();
        java.lang.String str41 = authService26.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date44 = null;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setRefreshTokenExpiresAt(date44);
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken48 = builder47.build();
        boolean boolean49 = accessToken48.isRefreshTokenExpired();
        java.lang.String str50 = accessToken48.getUserId();
        java.lang.String str51 = accessToken48.getClientId();
        boolean boolean52 = accessToken48.isClientOnly();
        java.lang.String str53 = accessToken48.getRefreshToken();
        java.lang.String str54 = authService26.extractErrorMessageForbidden(accessToken48);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken48);
        java.lang.String str56 = accessToken48.getToken();
        boolean boolean57 = accessToken48.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult58 = osiamUserService2.searchUsers(query12, accessToken48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(queryBuilder5);
        org.junit.Assert.assertNotNull(queryBuilder7);
        org.junit.Assert.assertNotNull(queryBuilder9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Authorization" + "'", str13, "Authorization");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "descending" + "'", str17, "descending");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "descending" + "'", str18, "descending");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(accessToken48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Bearer " + "'", str56, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test12294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12294");
        org.osiam.client.exception.NoResultException noResultException1 = new org.osiam.client.exception.NoResultException("org.osiam.client.exception.OsiamRequestException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=10]");
    }

    @Test
    public void test12295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12295");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService7.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder10 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService11 = builder10.build();
        org.osiam.client.OsiamGroupService osiamGroupService12 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        java.lang.String str21 = osiamGroupService12.extractErrorMessageForbidden(accessToken19);
        java.util.Date date22 = accessToken19.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken19);
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean25 = accessToken19.equals((java.lang.Object) scope24);
        java.lang.String str26 = accessToken19.getRefreshToken();
        java.lang.String str27 = accessToken19.getToken();
        java.lang.String str28 = accessToken19.getUserId();
        java.lang.String str29 = osiamGroupService7.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken38 = builder35.build();
        java.util.Date date39 = accessToken38.getExpiresAt();
        java.lang.String str40 = accessToken38.getClientId();
        java.lang.String str41 = accessToken38.getType();
        java.lang.String str42 = osiamGroupService7.extractErrorMessageForbidden(accessToken38);
        java.lang.String str43 = osiamGroupService3.extractErrorMessageForbidden(accessToken38);
        org.osiam.resources.scim.UpdateGroup updateGroup45 = null;
        org.osiam.client.OsiamGroupService.Builder builder47 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService48 = builder47.build();
        org.osiam.client.OsiamGroupService osiamGroupService49 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken56);
        java.lang.String str58 = osiamGroupService49.extractErrorMessageForbidden(accessToken56);
        java.util.Date date59 = accessToken56.getExpiresAt();
        boolean boolean60 = accessToken56.isRefreshTokenExpired();
        java.lang.String str61 = accessToken56.getUserId();
        java.lang.String str62 = accessToken56.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group63 = osiamGroupService3.updateGroup("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: client_credentials", updateGroup45, accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(osiamGroupService11);
        org.junit.Assert.assertNotNull(osiamGroupService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Bearer " + "'", str27, "Bearer ");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Insufficient scopes: []" + "'", str42, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService48);
        org.junit.Assert.assertNotNull(osiamGroupService49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Insufficient scopes: []" + "'", str58, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test12296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12296");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.lang.String str19 = accessToken18.getType();
        boolean boolean20 = accessToken18.isRefreshTokenExpired();
        java.lang.String str21 = osiamGroupService4.extractErrorMessageForbidden(accessToken18);
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = osiamGroupService4.extractErrorMessageUnauthorized("org.osiam.client.exception.UnauthorizedException: ", statusType24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: [GET POST PUT PATCH DELETE]" + "'", str21, "Insufficient scopes: [GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(webTarget22);
    }

    @Test
    public void test12297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12297");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.OsiamGroupService.Builder builder19 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService20 = builder19.build();
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder19.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken28);
        java.lang.String str30 = osiamGroupService21.extractErrorMessageForbidden(accessToken28);
        java.util.Date date31 = accessToken28.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder15.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken accessToken33 = builder15.build();
        java.lang.String str34 = accessToken33.getToken();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(osiamGroupService20);
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Bearer " + "'", str34, "Bearer ");
    }

    @Test
    public void test12298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12298");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken19 = osiamConnector17.retrieveAccessToken("Query [attributes=org.osiam.client.exception.OsiamRequestException: hi!, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
    }

    @Test
    public void test12299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12299");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(403, "org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException7 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean8 = scope5.equals((java.lang.Object) invalidAttributeException7);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException9 = new org.osiam.client.exception.ConnectionInitializationException("client_credentials", (java.lang.Throwable) invalidAttributeException7);
        org.osiam.client.exception.OsiamClientException osiamClientException10 = new org.osiam.client.exception.OsiamClientException("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", (java.lang.Throwable) connectionInitializationException9);
        osiamRequestException2.addSuppressed((java.lang.Throwable) osiamClientException10);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException13 = new org.osiam.client.exception.ConnectionInitializationException("Authorization");
        osiamRequestException2.addSuppressed((java.lang.Throwable) connectionInitializationException13);
        org.osiam.client.exception.OsiamClientException osiamClientException17 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.exception.OsiamClientException osiamClientException18 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamRequestException: hi!", (java.lang.Throwable) osiamClientException17);
        osiamRequestException2.addSuppressed((java.lang.Throwable) osiamClientException18);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test12300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12300");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        java.util.Date date17 = accessToken14.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean20 = accessToken14.equals((java.lang.Object) scope19);
        java.lang.String str21 = accessToken14.getRefreshToken();
        java.lang.String str22 = accessToken14.getToken();
        java.lang.String str23 = accessToken14.getUserId();
        java.lang.String str24 = osiamGroupService2.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken31);
        boolean boolean33 = accessToken31.isExpired();
        org.osiam.client.AuthService.Builder builder35 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientId("ME");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder43 = builder41.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder45 = builder41.setClientRedirectUri("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder47 = builder41.setClientSecret("authorization_code");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientSecret("Bearer ");
        boolean boolean50 = accessToken31.equals((java.lang.Object) "Bearer ");
        java.lang.String str51 = osiamGroupService2.extractErrorMessageForbidden(accessToken31);
        javax.ws.rs.core.Response.StatusType statusType53 = null;
        org.osiam.client.oauth.AccessToken accessToken54 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]", statusType53, accessToken54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Bearer " + "'", str22, "Bearer ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
    }

    @Test
    public void test12301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12301");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        java.lang.String str14 = osiamGroupService3.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.lang.String str22 = accessToken21.toString();
        java.lang.String str23 = accessToken21.getType();
        boolean boolean24 = accessToken21.isExpired();
        java.lang.String str25 = accessToken21.getToken();
        java.lang.String str26 = osiamGroupService3.extractErrorMessageForbidden(accessToken21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        boolean boolean34 = accessToken33.isRefreshTokenExpired();
        boolean boolean35 = accessToken33.isClientOnly();
        java.lang.String str36 = accessToken33.getUserName();
        java.lang.String str37 = osiamGroupService3.extractErrorMessageForbidden(accessToken33);
        java.util.Date date38 = accessToken33.getExpiresAt();
        java.lang.String str39 = accessToken33.getType();
        boolean boolean40 = accessToken33.isClientOnly();
        java.lang.String str41 = accessToken33.getRefreshToken();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Insufficient scopes: []" + "'", str14, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Insufficient scopes: []" + "'", str37, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test12302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12302");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getUserName();
        java.lang.String str24 = accessToken21.toString();
        java.lang.String str25 = osiamGroupService2.extractErrorMessageForbidden(accessToken21);
        javax.ws.rs.client.WebTarget webTarget26 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget27 = osiamGroupService2.targetEndpoint;
        org.osiam.client.AuthService.Builder builder29 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService32 = builder31.build();
        org.osiam.client.AuthService.Builder builder34 = builder31.setClientRedirectUri("PATCH");
        org.osiam.client.AuthService authService35 = builder34.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        java.util.Date date43 = accessToken42.getExpiresAt();
        java.lang.String str44 = accessToken42.getRefreshToken();
        java.lang.String str45 = accessToken42.getType();
        java.lang.String str46 = accessToken42.getClientId();
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException48 = new org.osiam.client.exception.InvalidAttributeException("ADMIN");
        boolean boolean49 = accessToken42.equals((java.lang.Object) invalidAttributeException48);
        java.lang.String str50 = authService35.extractErrorMessageForbidden(accessToken42);
        java.lang.String str51 = osiamGroupService2.extractErrorMessageForbidden(accessToken42);
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.addScope(scope55);
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder54.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken65 = builder64.build();
        java.lang.String str66 = accessToken65.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet67 = accessToken65.getScopes();
        java.lang.String str68 = accessToken65.getToken();
        boolean boolean69 = accessToken65.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group70 = osiamGroupService2.getGroup("password", accessToken65);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str24, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget26);
        org.junit.Assert.assertNotNull(webTarget27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(authService32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(authService35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(scopeSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Bearer " + "'", str68, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test12303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12303");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        java.util.Collection<java.lang.Object> objCollection9 = scopeSetJsonDeserializer8.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(objCollection9);
    }

    @Test
    public void test12304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12304");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("Insufficient scopes: [GET]");
    }

    @Test
    public void test12305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12305");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query53 = queryBuilder50.build();
        org.osiam.client.query.QueryBuilder queryBuilder54 = osiamConnector5.createQueryBuilder(query53);
        org.osiam.client.query.QueryBuilder queryBuilder55 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder57.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.descending("hi!");
        org.osiam.client.query.Query query64 = queryBuilder63.build();
        java.lang.String str65 = query64.getAttributes();
        java.lang.String str66 = query64.toString();
        java.lang.String str67 = query64.getSortBy();
        org.osiam.client.query.Query query68 = query64.nextPage();
        java.lang.String str69 = query68.getAttributes();
        java.lang.String str70 = query68.getFilter();
        org.osiam.client.query.Query query71 = query68.nextPage();
        java.lang.String str72 = query71.getSortOrder();
        org.osiam.client.query.Query query73 = query71.previousPage();
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        java.lang.String str81 = accessToken80.toString();
        java.lang.String str82 = accessToken80.getType();
        boolean boolean83 = accessToken80.isExpired();
        java.util.Date date84 = accessToken80.getExpiresAt();
        java.lang.String str85 = accessToken80.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult86 = osiamConnector5.searchGroups(query71, accessToken80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Authorization" + "'", str65, "Authorization");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str66, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(query68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Authorization" + "'", str69, "Authorization");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(query71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "descending" + "'", str72, "descending");
        org.junit.Assert.assertNotNull(query73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str81, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str85, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12306");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        boolean boolean18 = accessToken17.isRefreshTokenExpired();
        java.lang.String str19 = authService10.extractErrorMessageForbidden(accessToken17);
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        java.lang.String str27 = accessToken26.toString();
        java.lang.String str28 = accessToken26.getType();
        boolean boolean29 = accessToken26.isExpired();
        java.util.Date date30 = accessToken26.getExpiresAt();
        boolean boolean31 = accessToken26.isRefreshTokenExpired();
        java.lang.String str32 = authService10.extractErrorMessageForbidden(accessToken26);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken41 = builder38.build();
        java.util.Date date42 = accessToken41.getExpiresAt();
        java.lang.String str43 = accessToken41.toString();
        java.lang.String str44 = accessToken41.toString();
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAccessToken(accessToken41);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str43, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str44, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test12307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12307");
        org.osiam.client.exception.ConflictException conflictException3 = new org.osiam.client.exception.ConflictException("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", (java.lang.Throwable) conflictException3);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.ConflictException: ", (java.lang.Throwable) connectionInitializationException4);
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException7 = new org.osiam.client.exception.InvalidAttributeException("Cannot connect to server");
        connectionInitializationException4.addSuppressed((java.lang.Throwable) invalidAttributeException7);
        java.lang.String str9 = invalidAttributeException7.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org.osiam.client.exception.InvalidAttributeException: Cannot connect to server" + "'", str9, "org.osiam.client.exception.InvalidAttributeException: Cannot connect to server");
    }

    @Test
    public void test12308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12308");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12309");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder10.setEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setResourceServerEndpoint("Query [attributes=Authorization, filter=org.osiam.client.exception.ForbiddenException: hi!, sortBy=ME, sortOrder=descending, startIndex=90, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test12310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12310");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ascending");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getType();
        java.lang.String str9 = accessToken6.getType();
        java.lang.String str10 = accessToken6.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user11 = osiamUserService2.createUser(user3, accessToken6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test12311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12311");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        java.util.Date date14 = accessToken13.getExpiresAt();
        java.util.Date date15 = accessToken13.getRefreshTokenExpiresAt();
        java.lang.String str16 = accessToken13.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group17 = osiamGroupService2.updateResource("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]", group4, accessToken13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test12312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12312");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(403, "client_credentials");
    }

    @Test
    public void test12313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12313");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer8 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer9 = scopeSetJsonDeserializer7.unwrappingDeserializer(nameTransformer8);
        java.util.Collection<java.lang.Object> objCollection10 = scopeSetJsonDeserializer7.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer9);
        org.junit.Assert.assertNull(objCollection10);
    }

    @Test
    public void test12314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12314");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.oauth.Scope> scopeBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.client.oauth.Scope>("Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12315");
        org.osiam.client.exception.ForbiddenException forbiddenException1 = new org.osiam.client.exception.ForbiddenException("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamClientException: PATCH");
    }

    @Test
    public void test12316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12316");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        long long13 = query9.getStartIndex();
        org.osiam.client.query.Query query14 = query9.nextPage();
        int int15 = query9.getCount();
        java.lang.String str16 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.Query query18 = query9.nextPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(query18);
    }

    @Test
    public void test12317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12317");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("GET");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.addScope(scope9);
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException13 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean14 = scope11.equals((java.lang.Object) invalidAttributeException13);
        java.lang.String str15 = scope11.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder8.addScope(scope11);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setType("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        boolean boolean33 = accessToken31.isClientOnly();
        java.lang.String str34 = accessToken31.getRefreshToken();
        boolean boolean35 = accessToken31.isExpired();
        boolean boolean36 = accessToken31.isRefreshTokenExpired();
        java.lang.String str37 = accessToken31.getToken();
        java.util.Date date38 = accessToken31.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder22.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("PUT");
        org.osiam.client.oauth.AccessToken accessToken42 = builder39.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user43 = osiamUserService5.getUser("client_credentials", accessToken42);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GET" + "'", str15, "GET");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Bearer " + "'", str37, "Bearer ");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
    }

    @Test
    public void test12318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12318");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.Query query14 = query9.nextPage();
        java.lang.String str15 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        long long17 = query9.getStartIndex();
        org.osiam.client.query.Query query18 = query9.nextPage();
        long long19 = query18.getStartIndex();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 11L + "'", long19 == 11L);
    }

    @Test
    public void test12319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12319");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder9.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.addScope(scope17);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder16.addScope(scope19);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder16.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        java.util.Date date34 = accessToken33.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder26.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder14.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder14.setRefreshToken("org.osiam.client.exception.UnauthorizedException: GET");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test12320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12320");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.User user3 = null;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        javax.ws.rs.client.WebTarget webTarget8 = osiamGroupService7.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget9 = osiamGroupService7.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.lang.String str18 = accessToken16.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet19 = accessToken16.getScopes();
        java.lang.String str20 = osiamGroupService7.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.helper.ScopeSerializer scopeSerializer21 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean22 = scopeSerializer21.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer23 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer24 = scopeSerializer21.unwrappingSerializer(nameTransformer23);
        org.osiam.client.helper.ScopeSerializer scopeSerializer25 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean26 = scopeSerializer25.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer27 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer28 = scopeSerializer25.unwrappingSerializer(nameTransformer27);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException37 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean38 = scope35.equals((java.lang.Object) invalidAttributeException37);
        java.lang.String str39 = scope35.getValue();
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str42 = scope41.toString();
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str45 = scope44.getValue();
        java.lang.String str46 = scope44.getValue();
        org.osiam.client.oauth.Scope scope47 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException49 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean50 = scope47.equals((java.lang.Object) invalidAttributeException49);
        java.lang.String str51 = scope47.getValue();
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException57 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean58 = scope55.equals((java.lang.Object) invalidAttributeException57);
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.GET;
        boolean boolean63 = scope61.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope64 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray65 = new org.osiam.client.oauth.Scope[] { scope34, scope35, scope40, scope41, scope43, scope44, scope47, scope52, scope53, scope54, scope55, scope59, scope60, scope61, scope64 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet66 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet66, scopeArray65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder31.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet66);
        boolean boolean69 = scopeSetJsonSerializer28.isEmpty(serializerProvider29, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet66);
        boolean boolean70 = scopeSerializer21.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet66);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass71 = scopeSerializer21.handledType();
        boolean boolean72 = scopeSerializer21.usesObjectId();
        boolean boolean73 = accessToken16.equals((java.lang.Object) scopeSerializer21);
        java.util.Date date74 = accessToken16.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user75 = osiamUserService2.createUser(user3, accessToken16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(webTarget8);
        org.junit.Assert.assertNotNull(webTarget9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(scopeSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Insufficient scopes: []" + "'", str20, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ME" + "'", str42, "ME");
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PATCH" + "'", str45, "PATCH");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PATCH" + "'", str46, "PATCH");
        org.junit.Assert.assertNotNull(scope47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GET" + "'", str51, "GET");
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(scope64);
        org.junit.Assert.assertNotNull(scopeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(scopeSetClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12321");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.util.Date date29 = accessToken10.getExpiresAt();
        java.lang.String str30 = accessToken10.getUserName();
        java.lang.String str31 = osiamGroupService2.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget32 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget33 = osiamGroupService2.targetEndpoint;
        org.osiam.resources.scim.Group group35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken42);
        java.util.Date date44 = accessToken42.getExpiresAt();
        boolean boolean45 = accessToken42.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group46 = osiamGroupService2.replaceResource("org.osiam.client.exception.NoResultException: Insufficient scopes: []", group35, accessToken42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget32);
        org.junit.Assert.assertNotNull(webTarget33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test12322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12322");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.exception.UnauthorizedException unauthorizedException47 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int48 = unauthorizedException47.getHttpStatusCode();
        int int49 = unauthorizedException47.getHttpStatusCode();
        java.lang.Throwable[] throwableArray50 = unauthorizedException47.getSuppressed();
        boolean boolean51 = accessToken39.equals((java.lang.Object) unauthorizedException47);
        java.util.Date date52 = accessToken39.getRefreshTokenExpiresAt();
        org.osiam.client.OsiamConnector.Builder builder53 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder55 = builder53.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder57 = builder53.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector58 = builder57.build();
        org.osiam.client.query.QueryBuilder queryBuilder59 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder61.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.descending("hi!");
        org.osiam.client.query.Query query68 = queryBuilder67.build();
        java.lang.String str69 = query68.toString();
        java.lang.String str70 = query68.getSortOrder();
        java.lang.String str71 = query68.getSortBy();
        java.lang.String str72 = query68.getFilter();
        java.lang.String str73 = query68.getSortOrder();
        java.lang.String str74 = query68.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder75 = new org.osiam.client.query.QueryBuilder(query68);
        long long76 = query68.getStartIndex();
        org.osiam.client.query.Query query77 = query68.nextPage();
        java.lang.String str78 = query68.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder79 = new org.osiam.client.query.QueryBuilder(query68);
        java.lang.String str80 = query68.getAttributes();
        java.lang.String str81 = query68.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder82 = osiamConnector58.createQueryBuilder(query68);
        org.osiam.client.query.QueryBuilder queryBuilder83 = osiamConnector58.createQueryBuilder();
        boolean boolean84 = accessToken39.equals((java.lang.Object) osiamConnector58);
        org.osiam.client.query.QueryBuilder queryBuilder85 = osiamConnector58.createQueryBuilder();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 401 + "'", int48 == 401);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 401 + "'", int49 == 401);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(osiamConnector58);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(query68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str69, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "descending" + "'", str70, "descending");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "descending" + "'", str73, "descending");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Authorization" + "'", str74, "Authorization");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(query77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Authorization" + "'", str80, "Authorization");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(queryBuilder82);
        org.junit.Assert.assertNotNull(queryBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(queryBuilder85);
    }

    @Test
    public void test12323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12323");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.resources.scim.User user6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date13 = null;
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder12.setRefreshTokenExpiresAt(date13);
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder12.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken17 = builder16.build();
        java.util.Date date18 = accessToken17.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder8.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder8.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder8.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder25 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date26 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setRefreshTokenExpiresAt(date26);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder25.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken30 = builder29.build();
        boolean boolean31 = accessToken30.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet32 = accessToken30.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder23.addScopes(scopeSet32);
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        java.lang.String str35 = accessToken34.getClientId();
        java.lang.String str36 = accessToken34.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken34);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user38 = osiamConnector5.createUser(user6, accessToken34);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: No endpoint to the OSIAM server has been set");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(accessToken17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(scopeSet32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test12324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12324");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.resources.scim.Group group5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        boolean boolean24 = accessToken22.isClientOnly();
        java.lang.String str25 = accessToken22.getClientId();
        boolean boolean26 = accessToken22.isClientOnly();
        boolean boolean27 = accessToken12.equals((java.lang.Object) accessToken22);
        java.lang.String str28 = accessToken22.getUserId();
        java.lang.String str29 = accessToken22.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group30 = osiamGroupService3.replaceResource("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", group5, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test12325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12325");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.OsiamGroupService.Builder builder12 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        boolean boolean21 = accessToken20.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = accessToken20.getScopes();
        java.lang.String str23 = osiamGroupService13.extractErrorMessageForbidden(accessToken20);
        boolean boolean24 = accessToken20.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken20);
        java.lang.String str26 = authService10.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.util.Date date35 = accessToken33.getExpiresAt();
        boolean boolean36 = accessToken33.isClientOnly();
        boolean boolean37 = accessToken33.isClientOnly();
        java.lang.String str38 = authService10.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet40 = accessToken33.getScopes();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(osiamGroupService13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(scopeSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeSet40);
    }

    @Test
    public void test12326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12326");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean15 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer14.unwrappingSerializer(nameTransformer16);
        boolean boolean18 = scopeSerializer14.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer19 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer20 = scopeSerializer14.unwrappingSerializer(nameTransformer19);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper21 = null;
        com.fasterxml.jackson.databind.JavaType javaType22 = null;
        scopeSerializer14.acceptJsonFormatVisitor(jsonFormatVisitorWrapper21, javaType22);
        boolean boolean24 = scopeSerializer14.usesObjectId();
        boolean boolean25 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider26 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer27 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean28 = scopeSerializer27.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass29 = scopeSerializer27.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet39 = accessToken36.getScopes();
        boolean boolean40 = scopeSerializer27.isEmpty(scopeSet39);
        boolean boolean41 = scopeSerializer14.isEmpty(serializerProvider26, scopeSet39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder13.addScopes(scopeSet39);
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        java.lang.String str44 = accessToken43.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(scopeSetClass29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(scopeSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET], refreshTokenId=org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=PATCH, userName=org.osiam.client.exception.UnauthorizedException: GET]" + "'", str44, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET], refreshTokenId=org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=PATCH, userName=org.osiam.client.exception.UnauthorizedException: GET]");
    }

    @Test
    public void test12327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12327");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider5 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer6 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException14 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean15 = scope12.equals((java.lang.Object) invalidAttributeException14);
        java.lang.String str16 = scope12.getValue();
        org.osiam.client.oauth.Scope scope17 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str19 = scope18.toString();
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str22 = scope21.getValue();
        java.lang.String str23 = scope21.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException26 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean27 = scope24.equals((java.lang.Object) invalidAttributeException26);
        java.lang.String str28 = scope24.getValue();
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        boolean boolean40 = scope38.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray42 = new org.osiam.client.oauth.Scope[] { scope11, scope12, scope17, scope18, scope20, scope21, scope24, scope29, scope30, scope31, scope32, scope36, scope37, scope38, scope41 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet43 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet43, scopeArray42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder8.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet43);
        boolean boolean46 = scopeSerializer6.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet43);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        boolean boolean54 = accessToken53.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet55 = accessToken53.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider57 = null;
        scopeSerializer6.serialize(scopeSet55, jsonGenerator56, serializerProvider57);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        boolean boolean67 = accessToken66.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet68 = accessToken66.getScopes();
        boolean boolean69 = scopeSerializer6.isEmpty(serializerProvider59, scopeSet68);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass70 = scopeSerializer6.handledType();
        org.osiam.client.oauth.Scope scope72 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope75 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.addScope(scope75);
        org.osiam.client.oauth.Scope[] scopeArray77 = new org.osiam.client.oauth.Scope[] { scope72, scope75 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet78 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet78, scopeArray77);
        boolean boolean80 = scopeSerializer6.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet78);
        boolean boolean81 = scopeSerializer0.isEmpty(serializerProvider5, (java.util.Set<org.osiam.client.oauth.Scope>) scopeSet78);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass82 = scopeSerializer0.handledType();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass83 = scopeSerializer0.handledType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GET" + "'", str16, "GET");
        org.junit.Assert.assertNotNull(scope17);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ME" + "'", str19, "ME");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PATCH" + "'", str22, "PATCH");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PATCH" + "'", str23, "PATCH");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GET" + "'", str28, "GET");
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(scopeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(scopeSet55);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(scopeSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(scopeSetClass70);
        org.junit.Assert.assertNotNull(scope75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(scopeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(scopeSetClass82);
        org.junit.Assert.assertNull(scopeSetClass83);
    }

    @Test
    public void test12328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12328");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: PATCH");
    }

    @Test
    public void test12329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12329");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException((int) ' ', "org.osiam.client.exception.ConnectionInitializationException: descending");
    }

    @Test
    public void test12330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12330");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("password");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: password");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test12331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12331");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        java.lang.String str19 = query18.toString();
        java.lang.String str20 = query18.getSortOrder();
        java.lang.String str21 = query18.getSortBy();
        java.lang.String str22 = query18.getFilter();
        java.lang.String str23 = query18.toString();
        boolean boolean24 = accessToken6.equals((java.lang.Object) query18);
        java.util.Date date25 = accessToken6.getExpiresAt();
        java.lang.String str26 = accessToken6.getUserName();
        java.lang.String str27 = accessToken6.toString();
        java.util.Date date28 = accessToken6.getExpiresAt();
        java.lang.String str29 = accessToken6.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "descending" + "'", str20, "descending");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str27, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str29, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12332");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setEndpoint("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector.Builder builder14 = builder8.setClientId("");
        org.osiam.client.OsiamConnector.Builder builder16 = builder8.setEndpoint("org.osiam.client.exception.OsiamClientException: password");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test12333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12333");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        java.lang.String str44 = accessToken42.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet45 = accessToken42.getScopes();
        java.util.Date date46 = accessToken42.getExpiresAt();
        java.lang.String str47 = osiamGroupService6.extractErrorMessageForbidden(accessToken42);
        java.lang.String str48 = accessToken42.getUserName();
        boolean boolean49 = accessToken42.isClientOnly();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(scopeSet45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test12334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12334");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test12335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12335");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamClientException: 2024-03-22T13:51:20.388");
    }

    @Test
    public void test12336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12336");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientRedirectUri("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setResourceServerEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setEndpoint("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder26 = builder22.setClientId("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test12337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12337");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.query.QueryBuilder queryBuilder25 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.descending("hi!");
        org.osiam.client.query.Query query34 = queryBuilder33.build();
        java.lang.String str35 = query34.toString();
        java.lang.String str36 = query34.getSortOrder();
        java.lang.String str37 = query34.getSortBy();
        java.lang.String str38 = query34.getFilter();
        java.lang.String str39 = query34.getSortOrder();
        java.lang.String str40 = query34.getAttributes();
        long long41 = query34.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder42 = osiamConnector9.createQueryBuilder(query34);
        java.lang.String str43 = query34.getSortBy();
        java.lang.String str44 = query34.getSortBy();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(query34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str35, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
    }

    @Test
    public void test12338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12338");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getRefreshToken();
        boolean boolean10 = accessToken6.isExpired();
        boolean boolean11 = accessToken6.isExpired();
        boolean boolean12 = accessToken6.isClientOnly();
        java.util.Date date13 = accessToken6.getExpiresAt();
        java.util.Date date14 = accessToken6.getExpiresAt();
        java.lang.String str15 = accessToken6.getToken();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Bearer " + "'", str15, "Bearer ");
    }

    @Test
    public void test12339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12339");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.ConflictException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
    }

    @Test
    public void test12340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12340");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(401, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[PATCH, GET, GET POST PUT PATCH DELETE], refreshTokenId=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
    }

    @Test
    public void test12341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12341");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setClientId("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientRedirectUri("Insufficient scopes: [PATCH, GET, GET POST PUT PATCH DELETE]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setResourceServerEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder24 = builder22.setEndpoint("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder26 = builder22.setEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test12342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12342");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException1 = new org.osiam.client.exception.InvalidAttributeException("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=GET, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
        invalidAttributeException1.addSuppressed((java.lang.Throwable) connectionInitializationException3);
    }

    @Test
    public void test12343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12343");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setClientSecret("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector13 = builder12.build();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getRefreshToken();
        boolean boolean25 = accessToken21.isExpired();
        java.lang.String str26 = accessToken21.getType();
        java.lang.String str27 = accessToken21.getUserId();
        java.lang.String str28 = accessToken21.getToken();
        org.osiam.client.exception.NoResultException noResultException31 = new org.osiam.client.exception.NoResultException("authorization_code");
        int int32 = noResultException31.getHttpStatusCode();
        java.lang.Throwable[] throwableArray33 = noResultException31.getSuppressed();
        org.osiam.client.exception.OsiamClientException osiamClientException34 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.UnauthorizedException: PATCH", (java.lang.Throwable) noResultException31);
        boolean boolean35 = accessToken21.equals((java.lang.Object) "org.osiam.client.exception.UnauthorizedException: PATCH");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user36 = osiamConnector13.getUser("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=100, count=10]", accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"Insufficient scopes\" for the URI component SCHEME contains an invalid character, ' ', at index 12.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 404 + "'", int32 == 404);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test12344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12344");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.query.Query query4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        boolean boolean13 = accessToken11.isExpired();
        java.lang.String str14 = accessToken11.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult15 = osiamUserService3.searchUsers(query4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given query must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test12345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12345");
        org.osiam.client.exception.ConflictException conflictException2 = new org.osiam.client.exception.ConflictException("Insufficient scopes: [GET POST PUT PATCH DELETE]");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", (java.lang.Throwable) conflictException2);
    }

    @Test
    public void test12346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12346");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        java.lang.Throwable[] throwableArray2 = unauthorizedException1.getSuppressed();
        org.osiam.client.exception.OsiamRequestException osiamRequestException6 = new org.osiam.client.exception.OsiamRequestException(403, "PATCH");
        int int7 = osiamRequestException6.getHttpStatusCode();
        org.osiam.client.exception.OsiamClientException osiamClientException8 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", (java.lang.Throwable) osiamRequestException6);
        unauthorizedException1.addSuppressed((java.lang.Throwable) osiamClientException8);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 403 + "'", int7 == 403);
    }

    @Test
    public void test12347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12347");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setType("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        boolean boolean26 = accessToken24.isClientOnly();
        java.lang.String str27 = accessToken24.getRefreshToken();
        boolean boolean28 = accessToken24.isExpired();
        boolean boolean29 = accessToken24.isRefreshTokenExpired();
        java.lang.String str30 = accessToken24.getToken();
        java.util.Date date31 = accessToken24.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder15.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setUserId("PUT");
        org.osiam.client.oauth.AccessToken accessToken35 = builder32.build();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder32.setClientId("Query [attributes=org.osiam.client.exception.OsiamRequestException: hi!, filter=null, sortBy=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
    }

    @Test
    public void test12348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12348");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.AuthService authService16 = builder15.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder18.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder18.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer31 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean32 = scopeSerializer31.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer33 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer34 = scopeSerializer31.unwrappingSerializer(nameTransformer33);
        boolean boolean35 = scopeSerializer31.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer36 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer37 = scopeSerializer31.unwrappingSerializer(nameTransformer36);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper38 = null;
        com.fasterxml.jackson.databind.JavaType javaType39 = null;
        scopeSerializer31.acceptJsonFormatVisitor(jsonFormatVisitorWrapper38, javaType39);
        boolean boolean41 = scopeSerializer31.usesObjectId();
        boolean boolean42 = scopeSerializer31.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider43 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer44 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean45 = scopeSerializer44.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass46 = scopeSerializer44.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        java.util.Date date54 = accessToken53.getExpiresAt();
        java.lang.String str55 = accessToken53.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet56 = accessToken53.getScopes();
        boolean boolean57 = scopeSerializer44.isEmpty(scopeSet56);
        boolean boolean58 = scopeSerializer31.isEmpty(serializerProvider43, scopeSet56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder30.addScopes(scopeSet56);
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        java.lang.String str61 = accessToken60.getToken();
        java.lang.String str62 = accessToken60.getUserName();
        java.util.Date date63 = accessToken60.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            authService16.revokeAccessToken(accessToken60);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(authService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(scopeSetClass46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(scopeSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Bearer " + "'", str61, "Bearer ");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.osiam.client.exception.UnauthorizedException: GET" + "'", str62, "org.osiam.client.exception.UnauthorizedException: GET");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12349");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.addScope(scope8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setClientId("ADMIN");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setClientId("refresh_token");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshToken("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setUserId("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        java.lang.String str19 = accessToken18.getType();
        boolean boolean20 = accessToken18.isRefreshTokenExpired();
        java.lang.String str21 = osiamGroupService4.extractErrorMessageForbidden(accessToken18);
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope43 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.addScope(scope43);
        org.osiam.client.oauth.Scope scope45 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException47 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean48 = scope45.equals((java.lang.Object) invalidAttributeException47);
        java.lang.String str49 = scope45.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder42.addScope(scope45);
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder38.addScope(scope45);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder38.setRefreshToken("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group55 = osiamGroupService4.replaceGroup("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", group24, accessToken54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: [GET POST PUT PATCH DELETE]" + "'", str21, "Insufficient scopes: [GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(webTarget22);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(scope45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "GET" + "'", str49, "GET");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
    }

    @Test
    public void test12350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12350");
        org.osiam.client.exception.OsiamRequestException osiamRequestException2 = new org.osiam.client.exception.OsiamRequestException(0, "Query [attributes=Authorization, filter=org.osiam.client.exception.ForbiddenException: hi!, sortBy=ME, sortOrder=descending, startIndex=90, count=10]");
    }

    @Test
    public void test12351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12351");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder2.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        boolean boolean8 = accessToken7.isRefreshTokenExpired();
        java.lang.String str9 = accessToken7.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = accessToken7.getScopes();
        boolean boolean11 = scopeSerializer0.isEmpty(scopeSet10);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer13 = scopeSerializer0.unwrappingSerializer(nameTransformer12);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper14 = null;
        com.fasterxml.jackson.databind.JavaType javaType15 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper14, javaType15);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer17 = scopeSerializer0.getDelegatee();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(scopeSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer13);
        org.junit.Assert.assertNull(wildcardJsonSerializer17);
    }

    @Test
    public void test12352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12352");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.AuthService.Builder builder8 = builder5.setClientRedirectUri("POST");
        org.osiam.client.AuthService.Builder builder10 = builder5.setClientRedirectUri("ADMIN");
        org.osiam.client.AuthService authService11 = builder10.build();
        org.osiam.client.AuthService.Builder builder13 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientId("ME");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder19 = builder17.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientRedirectUri("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientRedirectUri("hi!");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientId("Cannot connect to server");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AuthService.Builder builder29 = builder25.setClientSecret("");
        org.osiam.client.AuthService authService30 = builder25.build();
        org.osiam.client.AuthService.Builder builder32 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientId("ME");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder42 = builder38.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService43 = builder42.build();
        org.osiam.client.AuthService.Builder builder45 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder47 = builder45.setClientId("ME");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService54 = builder53.build();
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        boolean boolean62 = accessToken61.isRefreshTokenExpired();
        java.lang.String str63 = accessToken61.getUserId();
        java.lang.String str64 = accessToken61.getToken();
        java.lang.String str65 = authService54.extractErrorMessageForbidden(accessToken61);
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str67 = scope66.getValue();
        java.lang.String str68 = scope66.toString();
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray70 = new org.osiam.client.oauth.Scope[] { scope66, scope69 };
        java.net.URI uRI71 = authService54.getAuthorizationUri(scopeArray70);
        java.net.URI uRI72 = authService43.getAuthorizationUri(scopeArray70);
        java.net.URI uRI73 = authService30.getAuthorizationUri(scopeArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI74 = authService11.getAuthorizationUri(scopeArray70);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to create redirect URI");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(authService30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(authService43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(authService54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Bearer " + "'", str64, "Bearer ");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Insufficient scopes: []" + "'", str65, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PATCH" + "'", str67, "PATCH");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PATCH" + "'", str68, "PATCH");
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertNotNull(scopeArray70);
        org.junit.Assert.assertNotNull(uRI71);
        org.junit.Assert.assertNotNull(uRI72);
        org.junit.Assert.assertNotNull(uRI73);
    }

    @Test
    public void test12353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12353");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test12354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12354");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setResourceServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder10.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.addScope(scope19);
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException23 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean24 = scope21.equals((java.lang.Object) invalidAttributeException23);
        java.lang.String str25 = scope21.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder18.addScope(scope21);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.addScope(scope33);
        org.osiam.client.oauth.GrantType grantType35 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str36 = grantType35.getUrlParam();
        boolean boolean37 = scope33.equals((java.lang.Object) grantType35);
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.addScope(scope40);
        boolean boolean42 = scope33.equals((java.lang.Object) builder39);
        org.osiam.client.oauth.AccessToken accessToken43 = builder39.build();
        java.lang.String str44 = accessToken43.getRefreshToken();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector15.revokeAllAccessTokens("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamRequestException: hi!", accessToken43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + grantType35 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType35.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "client_credentials" + "'", str36, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test12355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12355");
        org.osiam.client.exception.OsiamRequestException osiamRequestException3 = new org.osiam.client.exception.OsiamRequestException((int) (short) 1, "Bearer ");
        int int4 = osiamRequestException3.getHttpStatusCode();
        int int5 = osiamRequestException3.getHttpStatusCode();
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException6 = new org.osiam.client.exception.ConnectionInitializationException("Query [attributes=, filter=null, sortBy=POST, sortOrder=descending, startIndex=1, count=100]", (java.lang.Throwable) osiamRequestException3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test12356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12356");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet53 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider55 = null;
        scopeSerializer0.serialize(scopeSet53, jsonGenerator54, serializerProvider55);
        boolean boolean57 = scopeSerializer0.isUnwrappingSerializer();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test12357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12357");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService10 = builder7.build();
        org.osiam.client.AuthService.Builder builder12 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("ME");
        org.osiam.client.AuthService.Builder builder16 = builder14.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder18 = builder16.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder20 = builder18.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService21 = builder20.build();
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken28 = builder27.build();
        boolean boolean29 = accessToken28.isRefreshTokenExpired();
        java.lang.String str30 = authService21.extractErrorMessageForbidden(accessToken28);
        boolean boolean31 = accessToken28.isRefreshTokenExpired();
        java.lang.String str32 = accessToken28.getType();
        java.lang.String str33 = accessToken28.getToken();
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setRefreshTokenExpiresAt(date36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder35.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str45 = scope44.toString();
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder39.addScope(scope44);
        boolean boolean47 = accessToken28.equals((java.lang.Object) builder39);
        java.lang.String str48 = authService10.extractErrorMessageForbidden(accessToken28);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        boolean boolean57 = accessToken55.isClientOnly();
        java.lang.String str58 = accessToken55.getClientId();
        java.lang.String str59 = accessToken55.getUserId();
        java.lang.String str60 = accessToken55.getClientId();
        java.lang.String str61 = accessToken55.getRefreshToken();
        java.lang.String str62 = accessToken55.getToken();
        java.lang.String str63 = authService10.extractErrorMessageForbidden(accessToken55);
        org.osiam.client.AuthService.Builder builder66 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder68 = builder66.setClientId("ME");
        org.osiam.client.AuthService.Builder builder70 = builder68.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder72 = builder70.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder74 = builder72.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService75 = builder74.build();
        org.osiam.client.oauth.AccessToken.Builder builder77 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date78 = null;
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder77.setRefreshTokenExpiresAt(date78);
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder77.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken82 = builder81.build();
        boolean boolean83 = accessToken82.isRefreshTokenExpired();
        java.lang.String str84 = authService75.extractErrorMessageForbidden(accessToken82);
        boolean boolean85 = accessToken82.isRefreshTokenExpired();
        java.lang.String str86 = accessToken82.getType();
        java.util.Date date87 = accessToken82.getExpiresAt();
        boolean boolean88 = accessToken82.isRefreshTokenExpired();
        boolean boolean89 = accessToken82.isClientOnly();
        java.util.Date date90 = accessToken82.getRefreshTokenExpiresAt();
        java.lang.String str91 = accessToken82.getToken();
        // The following exception was thrown during execution in test generation
        try {
            authService10.revokeAllAccessTokens("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: hi!", accessToken82);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(authService21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(accessToken28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Insufficient scopes: []" + "'", str30, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Bearer " + "'", str33, "Bearer ");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PUT" + "'", str45, "PUT");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Bearer " + "'", str62, "Bearer ");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(authService75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(accessToken82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Insufficient scopes: []" + "'", str84, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Bearer " + "'", str91, "Bearer ");
    }

    @Test
    public void test12358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12358");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder8.build();
        javax.ws.rs.client.WebTarget webTarget11 = osiamGroupService10.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget12 = osiamGroupService10.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = accessToken22.getScopes();
        java.lang.String str28 = accessToken22.getToken();
        java.lang.String str29 = osiamGroupService10.extractErrorMessageForbidden(accessToken22);
        java.lang.String str30 = accessToken22.getUserId();
        org.osiam.client.OsiamConnector.Builder builder31 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder33 = builder31.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder37 = builder35.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder39 = builder37.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector40 = builder37.build();
        org.osiam.client.OsiamConnector.Builder builder42 = builder37.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder44 = builder42.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector45 = builder42.build();
        org.osiam.client.AuthService.Builder builder47 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder49 = builder47.setClientId("ME");
        org.osiam.client.AuthService.Builder builder51 = builder49.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder53 = builder51.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService56 = builder55.build();
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        boolean boolean64 = accessToken63.isRefreshTokenExpired();
        java.lang.String str65 = accessToken63.getUserId();
        java.lang.String str66 = accessToken63.getToken();
        java.lang.String str67 = authService56.extractErrorMessageForbidden(accessToken63);
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str69 = scope68.getValue();
        java.lang.String str70 = scope68.toString();
        org.osiam.client.oauth.Scope scope71 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray72 = new org.osiam.client.oauth.Scope[] { scope68, scope71 };
        java.net.URI uRI73 = authService56.getAuthorizationUri(scopeArray72);
        java.net.URI uRI74 = osiamConnector45.getAuthorizationUri(scopeArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken75 = authService6.refreshAccessToken(accessToken22, scopeArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client secret can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(webTarget11);
        org.junit.Assert.assertNotNull(webTarget12);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(scopeSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(osiamConnector40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(osiamConnector45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(authService56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Bearer " + "'", str66, "Bearer ");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Insufficient scopes: []" + "'", str67, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PATCH" + "'", str69, "PATCH");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PATCH" + "'", str70, "PATCH");
        org.junit.Assert.assertNotNull(scope71);
        org.junit.Assert.assertNotNull(scopeArray72);
        org.junit.Assert.assertNotNull(uRI73);
        org.junit.Assert.assertNotNull(uRI74);
    }

    @Test
    public void test12359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12359");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder1.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope10 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.addScope(scope10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserName("org.osiam.client.exception.UnauthorizedException: GET");
        org.osiam.client.helper.ScopeSerializer scopeSerializer14 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean15 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer14.unwrappingSerializer(nameTransformer16);
        boolean boolean18 = scopeSerializer14.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer19 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer20 = scopeSerializer14.unwrappingSerializer(nameTransformer19);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper21 = null;
        com.fasterxml.jackson.databind.JavaType javaType22 = null;
        scopeSerializer14.acceptJsonFormatVisitor(jsonFormatVisitorWrapper21, javaType22);
        boolean boolean24 = scopeSerializer14.usesObjectId();
        boolean boolean25 = scopeSerializer14.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider26 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer27 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean28 = scopeSerializer27.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass29 = scopeSerializer27.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        java.util.Date date37 = accessToken36.getExpiresAt();
        java.lang.String str38 = accessToken36.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet39 = accessToken36.getScopes();
        boolean boolean40 = scopeSerializer27.isEmpty(scopeSet39);
        boolean boolean41 = scopeSerializer14.isEmpty(serializerProvider26, scopeSet39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder13.addScopes(scopeSet39);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder13.setType("org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.Scope scope46 = new org.osiam.client.oauth.Scope("PUT");
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken53 = builder52.build();
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder52.setClientId("hi!");
        boolean boolean56 = scope46.equals((java.lang.Object) builder52);
        java.lang.String str57 = scope46.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder13.addScope(scope46);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder13.setType("org.osiam.client.exception.ConnectionInitializationException: Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder62 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date63 = null;
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder66.setType("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        java.lang.String str80 = accessToken79.toString();
        java.lang.String str81 = accessToken79.getType();
        java.util.Date date82 = accessToken79.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder66.setRefreshTokenExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder84 = builder13.setRefreshTokenExpiresAt(date82);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(scope10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(scopeSetClass29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(scopeSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(accessToken53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PUT" + "'", str57, "PUT");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str80, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test12360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12360");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader8 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer0.unwrappingDeserializer(nameTransformer9);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeSetJsonDeserializer10.unwrappingDeserializer(nameTransformer11);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer13 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass14 = scopeDeserializer13.handledType();
        java.lang.Class<?> wildcardClass15 = scopeDeserializer13.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer17 = scopeDeserializer13.unwrappingDeserializer(nameTransformer16);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer18 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer19 = scopeDeserializer13.unwrappingDeserializer(nameTransformer18);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer20 = scopeSetJsonDeserializer19.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection21 = scopeSetJsonDeserializer19.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet22 = scopeSetJsonDeserializer19.getEmptyValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer23 = scopeSetJsonDeserializer12.replaceDelegatee(scopeSetJsonDeserializer19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(objectIdReader8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer17);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer19);
        org.junit.Assert.assertNull(wildcardJsonDeserializer20);
        org.junit.Assert.assertNull(objCollection21);
        org.junit.Assert.assertNull(scopeSet22);
    }

    @Test
    public void test12361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12361");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setResourceServerEndpoint("GET POST PUT PATCH DELETE");
        org.osiam.client.OsiamConnector osiamConnector17 = builder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder18 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.descending("hi!");
        org.osiam.client.query.Query query27 = queryBuilder26.build();
        java.lang.String str28 = query27.toString();
        java.lang.String str29 = query27.getSortOrder();
        java.lang.String str30 = query27.getFilter();
        java.lang.String str31 = query27.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector17.createQueryBuilder(query27);
        org.osiam.client.OsiamGroupService.Builder builder35 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService36 = builder35.build();
        org.osiam.client.OsiamGroupService osiamGroupService37 = builder35.build();
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken44);
        java.lang.String str46 = osiamGroupService37.extractErrorMessageForbidden(accessToken44);
        org.osiam.client.OsiamGroupService.Builder builder48 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService49 = builder48.build();
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet58 = accessToken56.getScopes();
        java.lang.String str59 = osiamGroupService49.extractErrorMessageForbidden(accessToken56);
        boolean boolean60 = accessToken56.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken56);
        java.lang.String str62 = osiamGroupService37.extractErrorMessageForbidden(accessToken56);
        boolean boolean63 = accessToken56.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector17.revokeAllAccessTokens("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: client_credentials", accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(osiamConnector17);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(query27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str28, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "descending" + "'", str31, "descending");
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(osiamGroupService36);
        org.junit.Assert.assertNotNull(osiamGroupService37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(scopeSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test12362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12362");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientId("Bearer ");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setClientId("refresh_token");
        org.osiam.client.OsiamConnector osiamConnector12 = builder6.build();
        org.osiam.resources.scim.UpdateUser updateUser14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getRefreshToken();
        boolean boolean25 = accessToken21.isExpired();
        boolean boolean26 = accessToken21.isExpired();
        boolean boolean27 = accessToken21.isClientOnly();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user28 = osiamConnector12.updateUser("refresh_token", updateUser14, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(osiamConnector12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test12363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12363");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.AuthService authService6 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken8 = null;
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAllAccessTokens("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]", accessToken8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
    }

    @Test
    public void test12364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12364");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Cannot connect to server");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.Scope scope3 = org.osiam.client.oauth.Scope.POST;
        org.osiam.client.OsiamGroupService.Builder builder5 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder5.build();
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder5.build();
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.lang.String str16 = osiamGroupService7.extractErrorMessageForbidden(accessToken14);
        java.util.Date date17 = accessToken14.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean20 = accessToken14.equals((java.lang.Object) scope19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        boolean boolean29 = accessToken27.isClientOnly();
        java.lang.String str30 = accessToken27.getClientId();
        boolean boolean31 = accessToken27.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope34 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.addScope(scope34);
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException38 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean39 = scope36.equals((java.lang.Object) invalidAttributeException38);
        java.lang.String str40 = scope36.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder33.addScope(scope36);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setUserName("Authorization");
        boolean boolean48 = accessToken27.equals((java.lang.Object) builder45);
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.addScope(scope51);
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException55 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean56 = scope53.equals((java.lang.Object) invalidAttributeException55);
        java.lang.String str57 = scope53.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder50.addScope(scope53);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder62.addScope(scope65);
        org.osiam.client.oauth.GrantType grantType67 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str68 = grantType67.getUrlParam();
        boolean boolean69 = scope65.equals((java.lang.Object) grantType67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder45.addScope(scope65);
        boolean boolean71 = scope19.equals((java.lang.Object) builder70);
        boolean boolean72 = scope3.equals((java.lang.Object) builder70);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.setClientId("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamGroupService.Builder builder76 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService77 = builder76.build();
        org.osiam.client.oauth.AccessToken.Builder builder79 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date80 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = builder79.setRefreshTokenExpiresAt(date80);
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder79.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken84 = builder83.build();
        java.util.Date date85 = accessToken84.getExpiresAt();
        java.lang.String str86 = accessToken84.getUserName();
        java.lang.String str87 = accessToken84.toString();
        java.lang.String str88 = osiamGroupService77.extractErrorMessageForbidden(accessToken84);
        java.util.Date date89 = accessToken84.getRefreshTokenExpiresAt();
        java.util.Date date90 = accessToken84.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder91 = builder74.setExpiresAt(date90);
        org.osiam.client.oauth.AccessToken.Builder builder93 = builder91.setType("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.oauth.AccessToken accessToken94 = builder93.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user95 = osiamUserService2.getCurrentUser(accessToken94);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(scope3);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(scope34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "GET" + "'", str40, "GET");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GET" + "'", str57, "GET");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + grantType67 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType67.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "client_credentials" + "'", str68, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(osiamGroupService77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(accessToken84);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str87, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Insufficient scopes: []" + "'", str88, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(accessToken94);
    }

    @Test
    public void test12365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12365");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer67 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer68 = scopeSerializer0.unwrappingSerializer(nameTransformer67);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper69 = null;
        com.fasterxml.jackson.databind.JavaType javaType70 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper69, javaType70);
        boolean boolean72 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer73 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer74 = scopeSerializer0.unwrappingSerializer(nameTransformer73);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer74);
    }

    @Test
    public void test12366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12366");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        boolean boolean1 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer3 = scopeDeserializer0.unwrappingDeserializer(nameTransformer2);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader4 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer3);
        org.junit.Assert.assertNull(objectIdReader4);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
    }

    @Test
    public void test12367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12367");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder13.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshToken("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.helper.ScopeSerializer scopeSerializer27 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date30 = null;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setRefreshTokenExpiresAt(date30);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken34 = builder33.build();
        boolean boolean35 = accessToken34.isRefreshTokenExpired();
        java.lang.String str36 = accessToken34.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet37 = accessToken34.getScopes();
        boolean boolean38 = scopeSerializer27.isEmpty(scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        java.lang.String str47 = accessToken45.getUserId();
        java.lang.String str48 = accessToken45.getClientId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken45.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer27.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder26.addScopes(scopeSet49);
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        boolean boolean62 = accessToken60.isClientOnly();
        java.lang.String str63 = accessToken60.getRefreshToken();
        boolean boolean64 = accessToken60.isExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = accessToken60.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder53.addScopes(scopeSet65);
        org.osiam.client.oauth.Scope scope68 = new org.osiam.client.oauth.Scope("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder53.addScope(scope68);
        java.lang.String str70 = scope68.getValue();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(scopeSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(scopeSet65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]" + "'", str70, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
    }

    @Test
    public void test12368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12368");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        org.osiam.client.AuthService.Builder builder7 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService12 = builder11.build();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.lang.String str21 = accessToken19.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder22 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder24.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder24.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.descending("hi!");
        org.osiam.client.query.Query query31 = queryBuilder30.build();
        java.lang.String str32 = query31.toString();
        java.lang.String str33 = query31.getSortOrder();
        java.lang.String str34 = query31.getSortBy();
        java.lang.String str35 = query31.getFilter();
        java.lang.String str36 = query31.getSortOrder();
        java.lang.String str37 = query31.getAttributes();
        boolean boolean38 = accessToken19.equals((java.lang.Object) query31);
        java.lang.String str39 = authService12.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        java.lang.String str47 = accessToken46.toString();
        java.lang.String str48 = accessToken46.getClientId();
        org.osiam.client.OsiamConnector.Builder builder49 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder51 = builder49.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder53 = builder51.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder55 = builder53.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector56 = builder55.build();
        org.osiam.client.query.QueryBuilder queryBuilder57 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder63.descending("hi!");
        org.osiam.client.query.Query query66 = queryBuilder65.build();
        java.lang.String str67 = query66.toString();
        java.lang.String str68 = query66.toString();
        java.lang.String str69 = query66.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector56.createQueryBuilder(query66);
        org.osiam.client.query.QueryBuilder queryBuilder71 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder73 = queryBuilder71.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder75 = queryBuilder73.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder77 = queryBuilder73.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder79 = queryBuilder77.descending("hi!");
        org.osiam.client.query.Query query80 = queryBuilder79.build();
        org.osiam.client.query.QueryBuilder queryBuilder81 = osiamConnector56.createQueryBuilder(query80);
        boolean boolean82 = accessToken46.equals((java.lang.Object) queryBuilder81);
        java.util.Date date83 = accessToken46.getRefreshTokenExpiresAt();
        org.osiam.client.query.QueryBuilder queryBuilder84 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder86 = queryBuilder84.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder88 = queryBuilder86.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder90 = queryBuilder88.ascending("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder92 = queryBuilder90.ascending("org.osiam.client.exception.OsiamRequestException: hi!");
        boolean boolean93 = accessToken46.equals((java.lang.Object) "org.osiam.client.exception.OsiamRequestException: hi!");
        java.lang.String str94 = authService12.extractErrorMessageForbidden(accessToken46);
        boolean boolean95 = accessToken46.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", statusType5, accessToken46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(authService12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(query31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str32, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "descending" + "'", str33, "descending");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "descending" + "'", str36, "descending");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Authorization" + "'", str37, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str47, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(osiamConnector56);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(query66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str67, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str68, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder77);
        org.junit.Assert.assertNotNull(queryBuilder79);
        org.junit.Assert.assertNotNull(query80);
        org.junit.Assert.assertNotNull(queryBuilder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(queryBuilder86);
        org.junit.Assert.assertNotNull(queryBuilder88);
        org.junit.Assert.assertNotNull(queryBuilder90);
        org.junit.Assert.assertNotNull(queryBuilder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Insufficient scopes: []" + "'", str94, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test12369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12369");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder8.setResourceServerEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder13 = builder8.setResourceServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder15 = builder13.setResourceServerEndpoint("org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder17 = builder13.setEndpoint("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.OsiamConnector.Builder builder19 = builder13.setClientId("Cannot connect to server");
        org.osiam.client.OsiamConnector osiamConnector20 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date23 = null;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.setRefreshTokenExpiresAt(date23);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder22.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken27 = builder26.build();
        boolean boolean28 = accessToken27.isRefreshTokenExpired();
        java.lang.String str29 = accessToken27.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder30 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.descending("hi!");
        org.osiam.client.query.Query query39 = queryBuilder38.build();
        java.lang.String str40 = query39.toString();
        java.lang.String str41 = query39.getSortOrder();
        java.lang.String str42 = query39.getSortBy();
        java.lang.String str43 = query39.getFilter();
        java.lang.String str44 = query39.getSortOrder();
        java.lang.String str45 = query39.getAttributes();
        boolean boolean46 = accessToken27.equals((java.lang.Object) query39);
        org.osiam.client.OsiamConnector.Builder builder47 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder49 = builder47.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder51 = builder49.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder53 = builder51.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder55 = builder51.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder57 = builder51.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder59 = builder57.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder61 = builder57.setClientRedirectUri("PUT");
        boolean boolean62 = accessToken27.equals((java.lang.Object) builder61);
        java.lang.String str63 = accessToken27.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList64 = osiamConnector20.getAllGroups(accessToken27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(osiamConnector20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(accessToken27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(query39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str40, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "descending" + "'", str41, "descending");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Authorization" + "'", str45, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test12370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12370");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder2.count(409);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.ascending("org.osiam.client.exception.UnauthorizedException: client_credentials");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
    }

    @Test
    public void test12371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12371");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortBy();
        org.osiam.client.query.Query query59 = query55.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder60 = osiamConnector5.createQueryBuilder(query55);
        org.osiam.client.oauth.AccessToken accessToken62 = null;
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector5.deleteUser("GET POST PUT PATCH DELETE", accessToken62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(query59);
        org.junit.Assert.assertNotNull(queryBuilder60);
    }

    @Test
    public void test12372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12372");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        java.lang.String str21 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date24 = null;
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshTokenExpiresAt(date24);
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken30 = builder27.build();
        java.lang.String str31 = accessToken30.toString();
        java.lang.String str32 = authService6.extractErrorMessageForbidden(accessToken30);
        org.osiam.client.oauth.AccessToken.Builder builder34 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date35 = null;
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setRefreshTokenExpiresAt(date35);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder34.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken39 = builder38.build();
        java.util.Date date40 = accessToken39.getExpiresAt();
        java.lang.String str41 = accessToken39.getRefreshToken();
        java.lang.String str42 = accessToken39.getType();
        java.lang.String str43 = accessToken39.getClientId();
        java.lang.String str44 = accessToken39.getUserName();
        java.lang.String str45 = authService6.extractErrorMessageForbidden(accessToken39);
        org.osiam.client.OsiamGroupService.Builder builder47 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService48 = builder47.build();
        org.osiam.client.oauth.AccessToken.Builder builder50 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date51 = null;
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder50.setRefreshTokenExpiresAt(date51);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder50.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken55 = builder54.build();
        boolean boolean56 = accessToken55.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet57 = accessToken55.getScopes();
        java.lang.String str58 = osiamGroupService48.extractErrorMessageForbidden(accessToken55);
        java.lang.String str59 = authService6.extractErrorMessageForbidden(accessToken55);
        boolean boolean60 = accessToken55.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken55);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Insufficient scopes: []" + "'", str21, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(accessToken30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str31, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(accessToken39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Insufficient scopes: []" + "'", str45, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(scopeSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Insufficient scopes: []" + "'", str58, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test12373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12373");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientSecret("Bearer ");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setAuthServerEndpoint("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientId("Query [attributes=null, filter=null, sortBy=null, sortOrder=null, startIndex=1, count=100]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test12374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12374");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query53 = queryBuilder50.build();
        org.osiam.client.query.QueryBuilder queryBuilder54 = osiamConnector5.createQueryBuilder(query53);
        org.osiam.client.query.QueryBuilder queryBuilder55 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder57 = queryBuilder55.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder57.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.descending("hi!");
        org.osiam.client.query.Query query64 = queryBuilder63.build();
        java.lang.String str65 = query64.toString();
        java.lang.String str66 = query64.getSortOrder();
        org.osiam.client.query.Query query67 = query64.nextPage();
        long long68 = query67.getStartIndex();
        java.lang.String str69 = query67.getSortBy();
        java.lang.String str70 = query67.getSortOrder();
        org.osiam.client.query.Query query71 = query67.previousPage();
        org.osiam.client.oauth.AccessToken accessToken72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult73 = osiamConnector5.searchUsers(query71, accessToken72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(query53);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder57);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(query64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str65, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "descending" + "'", str66, "descending");
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 11L + "'", long68 == 11L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "descending" + "'", str70, "descending");
        org.junit.Assert.assertNotNull(query71);
    }

    @Test
    public void test12375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12375");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder32.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder38.descending("hi!");
        org.osiam.client.query.Query query41 = queryBuilder40.build();
        java.lang.String str42 = query41.getAttributes();
        java.lang.String str43 = query41.toString();
        java.lang.String str44 = query41.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector5.createQueryBuilder(query41);
        org.osiam.resources.scim.User user47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        boolean boolean55 = accessToken54.isRefreshTokenExpired();
        java.lang.String str56 = accessToken54.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder57 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = queryBuilder57.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder63.descending("hi!");
        org.osiam.client.query.Query query66 = queryBuilder65.build();
        java.lang.String str67 = query66.toString();
        java.lang.String str68 = query66.getSortOrder();
        java.lang.String str69 = query66.getSortBy();
        java.lang.String str70 = query66.getFilter();
        java.lang.String str71 = query66.toString();
        boolean boolean72 = accessToken54.equals((java.lang.Object) query66);
        java.util.Date date73 = accessToken54.getExpiresAt();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet74 = accessToken54.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user75 = osiamConnector5.replaceUser("org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]", user47, accessToken54);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.InvalidAttributeException; message: The given User can't be null.");
        } catch (org.osiam.client.exception.InvalidAttributeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(query41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(query66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str67, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "descending" + "'", str68, "descending");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str71, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scopeSet74);
    }

    @Test
    public void test12376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12376");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.util.Date date7 = accessToken6.getExpiresAt();
        java.lang.String str8 = accessToken6.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = accessToken6.getScopes();
        java.util.Date date10 = accessToken6.getExpiresAt();
        java.lang.String str11 = accessToken6.getToken();
        java.lang.String str12 = accessToken6.getToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken6);
        java.lang.String str14 = accessToken6.getClientId();
        java.lang.String str15 = accessToken6.getClientId();
        boolean boolean16 = accessToken6.isClientOnly();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken6.getScopes();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(scopeSet9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Bearer " + "'", str11, "Bearer ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Bearer " + "'", str12, "Bearer ");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
    }

    @Test
    public void test12377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12377");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.OsiamConnector osiamConnector8 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder9 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder9.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.descending("hi!");
        org.osiam.client.query.Query query18 = queryBuilder17.build();
        org.osiam.client.query.Query query19 = queryBuilder17.build();
        long long20 = query19.getStartIndex();
        org.osiam.client.query.QueryBuilder queryBuilder21 = new org.osiam.client.query.QueryBuilder(query19);
        java.lang.String str22 = query19.getSortOrder();
        int int23 = query19.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector8.createQueryBuilder(query19);
        org.osiam.resources.scim.Group group25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        java.lang.String str33 = accessToken32.toString();
        java.lang.String str34 = accessToken32.getType();
        boolean boolean35 = accessToken32.isExpired();
        java.lang.String str36 = accessToken32.getToken();
        java.lang.String str37 = accessToken32.getToken();
        java.lang.String str38 = accessToken32.toString();
        boolean boolean39 = accessToken32.isRefreshTokenExpired();
        boolean boolean40 = accessToken32.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group41 = osiamConnector8.createGroup(group25, accessToken32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(osiamConnector8);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(query18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "descending" + "'", str22, "descending");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str33, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Bearer " + "'", str36, "Bearer ");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Bearer " + "'", str37, "Bearer ");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str38, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test12378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12378");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getType();
        boolean boolean9 = accessToken6.isExpired();
        java.util.Date date10 = accessToken6.getExpiresAt();
        boolean boolean11 = accessToken6.isRefreshTokenExpired();
        java.lang.String str12 = accessToken6.getUserName();
        boolean boolean13 = accessToken6.isExpired();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test12379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12379");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder10 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder12.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.descending("hi!");
        org.osiam.client.query.Query query19 = queryBuilder18.build();
        java.lang.String str20 = query19.toString();
        java.lang.String str21 = query19.getSortOrder();
        java.lang.String str22 = query19.getSortBy();
        org.osiam.client.query.Query query23 = query19.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector9.createQueryBuilder(query23);
        org.osiam.client.OsiamConnector.Builder builder25 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder27 = builder25.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder29 = builder27.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder31 = builder29.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder33 = builder29.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder35 = builder29.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder37 = builder29.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder39 = builder37.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder41 = builder37.setClientSecret("descending");
        org.osiam.client.OsiamConnector osiamConnector42 = builder37.build();
        org.osiam.client.query.QueryBuilder queryBuilder43 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder45 = queryBuilder43.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder47 = queryBuilder45.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder49 = queryBuilder45.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder51 = queryBuilder49.descending("hi!");
        org.osiam.client.query.Query query52 = queryBuilder51.build();
        java.lang.String str53 = query52.getAttributes();
        java.lang.String str54 = query52.toString();
        java.lang.String str55 = query52.getSortOrder();
        org.osiam.client.query.Query query56 = query52.nextPage();
        java.lang.String str57 = query52.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder58 = osiamConnector42.createQueryBuilder(query52);
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector9.createQueryBuilder(query52);
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder65.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder65.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope70 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str71 = scope70.toString();
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder65.addScope(scope70);
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setType("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken75 = builder72.build();
        java.lang.String str76 = accessToken75.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser77 = osiamConnector9.getCurrentUserBasic(accessToken75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str20, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "descending" + "'", str21, "descending");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(osiamConnector42);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder47);
        org.junit.Assert.assertNotNull(queryBuilder49);
        org.junit.Assert.assertNotNull(queryBuilder51);
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Authorization" + "'", str53, "Authorization");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str54, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "descending" + "'", str55, "descending");
        org.junit.Assert.assertNotNull(query56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(queryBuilder58);
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PUT" + "'", str71, "PUT");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(accessToken75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str76, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test12380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12380");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.getAttributes();
        long long11 = query9.getStartIndex();
        org.osiam.client.query.Query query12 = query9.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str15 = query9.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder(query9);
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Authorization" + "'", str10, "Authorization");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "descending" + "'", str15, "descending");
    }

    @Test
    public void test12381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12381");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder40.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder13.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        java.util.Date date62 = accessToken61.getExpiresAt();
        java.util.Date date63 = accessToken61.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder52.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder52.setUserName("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder52.setRefreshToken("authorization_code");
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder52.setType("Insufficient scopes: []");
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken77 = builder76.build();
        java.lang.Object obj78 = null;
        boolean boolean79 = accessToken77.equals(obj78);
        boolean boolean80 = accessToken77.isExpired();
        java.util.Date date81 = accessToken77.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder52.setRefreshTokenExpiresAt(date81);
        org.osiam.client.oauth.AccessToken.Builder builder84 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setRefreshTokenExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder84.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken89 = builder88.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken89);
        java.util.Date date91 = accessToken89.getExpiresAt();
        boolean boolean92 = accessToken89.isRefreshTokenExpired();
        java.util.Date date93 = accessToken89.getExpiresAt();
        java.util.Date date94 = accessToken89.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder95 = builder52.setRefreshTokenExpiresAt(date94);
        org.osiam.client.oauth.AccessToken.Builder builder97 = builder52.setRefreshToken("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder99 = builder52.setRefreshToken("Cannot connect to server");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(accessToken77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(accessToken89);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test12382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12382");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getClientId();
        boolean boolean15 = accessToken11.isClientOnly();
        java.lang.String str16 = accessToken11.getToken();
        java.lang.String str17 = osiamGroupService4.extractErrorMessageForbidden(accessToken11);
        javax.ws.rs.core.Response.StatusType statusType19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        boolean boolean28 = accessToken26.isClientOnly();
        java.lang.String str29 = accessToken26.getRefreshToken();
        boolean boolean30 = accessToken26.isExpired();
        boolean boolean31 = accessToken26.isRefreshTokenExpired();
        org.osiam.client.AuthService.Builder builder33 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientId("ME");
        boolean boolean36 = accessToken26.equals((java.lang.Object) builder33);
        boolean boolean37 = accessToken26.isRefreshTokenExpired();
        java.lang.String str38 = accessToken26.getUserName();
        boolean boolean39 = accessToken26.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.checkAndHandleResponse("org.osiam.client.exception.UnauthorizedException: DELETE", statusType19, accessToken26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Bearer " + "'", str16, "Bearer ");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test12383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12383");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder1.setRefreshToken("Bearer ");
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.PATCH;
        boolean boolean14 = scope12.equals((java.lang.Object) 401);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder1.addScope(scope12);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setType("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=Authorization]");
        org.osiam.client.AuthService.Builder builder19 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder21 = builder19.setClientId("ME");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService24 = builder23.build();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken31 = builder30.build();
        boolean boolean32 = accessToken31.isRefreshTokenExpired();
        boolean boolean33 = accessToken31.isClientOnly();
        java.lang.String str34 = accessToken31.getClientId();
        java.lang.String str35 = authService24.extractErrorMessageForbidden(accessToken31);
        java.util.Date date36 = accessToken31.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder15.setRefreshTokenExpiresAt(date36);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(authService24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(accessToken31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test12384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12384");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector osiamConnector13 = builder10.build();
        org.osiam.client.OsiamGroupService.Builder builder16 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder16.build();
        org.osiam.client.OsiamGroupService osiamGroupService18 = builder16.build();
        javax.ws.rs.client.WebTarget webTarget19 = osiamGroupService18.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget20 = osiamGroupService18.targetEndpoint;
        org.osiam.client.AuthService.Builder builder22 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientId("ME");
        org.osiam.client.AuthService.Builder builder26 = builder24.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService31 = builder30.build();
        org.osiam.client.OsiamGroupService.Builder builder33 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService34 = builder33.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet43 = accessToken41.getScopes();
        java.lang.String str44 = osiamGroupService34.extractErrorMessageForbidden(accessToken41);
        boolean boolean45 = accessToken41.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken41);
        java.lang.String str47 = authService31.extractErrorMessageForbidden(accessToken41);
        org.osiam.client.oauth.AccessToken.Builder builder49 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date50 = null;
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder49.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken54 = builder53.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken54);
        java.util.Date date56 = accessToken54.getExpiresAt();
        boolean boolean57 = accessToken54.isClientOnly();
        boolean boolean58 = accessToken54.isClientOnly();
        java.lang.String str59 = authService31.extractErrorMessageForbidden(accessToken54);
        org.osiam.client.AuthService.Builder builder61 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder63 = builder61.setClientId("ME");
        org.osiam.client.AuthService.Builder builder65 = builder63.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService66 = builder65.build();
        org.osiam.client.OsiamGroupService.Builder builder68 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService69 = builder68.build();
        org.osiam.client.oauth.AccessToken.Builder builder71 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date72 = null;
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder71.setRefreshTokenExpiresAt(date72);
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder71.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken76 = builder75.build();
        boolean boolean77 = accessToken76.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet78 = accessToken76.getScopes();
        java.lang.String str79 = osiamGroupService69.extractErrorMessageForbidden(accessToken76);
        boolean boolean80 = accessToken76.isClientOnly();
        java.lang.String str81 = authService66.extractErrorMessageForbidden(accessToken76);
        org.osiam.client.oauth.AccessToken.Builder builder83 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date84 = null;
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder83.setRefreshTokenExpiresAt(date84);
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder83.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder87.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken90 = builder87.build();
        java.util.Date date91 = accessToken90.getExpiresAt();
        java.lang.String str92 = accessToken90.toString();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken90);
        java.lang.String str94 = authService66.extractErrorMessageForbidden(accessToken90);
        java.lang.String str95 = authService31.extractErrorMessageForbidden(accessToken90);
        java.lang.String str96 = osiamGroupService18.extractErrorMessageForbidden(accessToken90);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken90);
        boolean boolean98 = accessToken90.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector13.deleteGroup("Query [attributes=Authorization, filter=null, sortBy=AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=], sortOrder=ascending, startIndex=1, count=10]", accessToken90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The string \"AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16\" for the URI component SCHEME contains an invalid character, ' ', at index 11.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(osiamGroupService18);
        org.junit.Assert.assertNotNull(webTarget19);
        org.junit.Assert.assertNotNull(webTarget20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(authService31);
        org.junit.Assert.assertNotNull(osiamGroupService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(scopeSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Insufficient scopes: []" + "'", str47, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(accessToken54);
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Insufficient scopes: []" + "'", str59, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(authService66);
        org.junit.Assert.assertNotNull(osiamGroupService69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(accessToken76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(scopeSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Insufficient scopes: []" + "'", str79, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Insufficient scopes: []" + "'", str81, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(accessToken90);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str92, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Insufficient scopes: []" + "'", str94, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Insufficient scopes: []" + "'", str95, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Insufficient scopes: []" + "'", str96, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test12385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12385");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService4 = builder3.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        java.lang.String str15 = accessToken11.getClientId();
        boolean boolean16 = accessToken11.isRefreshTokenExpired();
        java.lang.String str17 = authService4.extractErrorMessageForbidden(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.lang.String str26 = accessToken24.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.toString();
        java.lang.String str38 = query36.getSortOrder();
        java.lang.String str39 = query36.getSortBy();
        java.lang.String str40 = query36.getFilter();
        java.lang.String str41 = query36.getSortOrder();
        java.lang.String str42 = query36.getAttributes();
        boolean boolean43 = accessToken24.equals((java.lang.Object) query36);
        org.osiam.client.OsiamConnector.Builder builder44 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder46 = builder44.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder48 = builder46.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder50 = builder48.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder52 = builder48.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder54 = builder48.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder56 = builder54.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder58 = builder54.setClientRedirectUri("PUT");
        boolean boolean59 = accessToken24.equals((java.lang.Object) builder58);
        java.lang.String str60 = accessToken24.getClientId();
        java.lang.String str61 = accessToken24.getToken();
        java.lang.String str62 = authService4.extractErrorMessageForbidden(accessToken24);
        java.lang.String str63 = accessToken24.getType();
        java.lang.String str64 = accessToken24.toString();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(authService4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str37, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "descending" + "'", str38, "descending");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "descending" + "'", str41, "descending");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Authorization" + "'", str42, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Bearer " + "'", str61, "Bearer ");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Insufficient scopes: []" + "'", str62, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str64, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12386");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        java.lang.String str12 = accessToken9.getType();
        java.lang.String str13 = accessToken9.getClientId();
        java.lang.String str14 = accessToken9.getUserName();
        java.lang.String str15 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str33 = scope32.toString();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder31.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setType("Insufficient scopes: []");
        org.osiam.client.oauth.Scope scope38 = new org.osiam.client.oauth.Scope("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder36.addScope(scope38);
        org.osiam.client.oauth.AccessToken accessToken40 = builder36.build();
        java.lang.String str41 = osiamGroupService2.extractErrorMessageForbidden(accessToken40);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken49);
        java.util.Date date51 = accessToken49.getExpiresAt();
        boolean boolean52 = accessToken49.isRefreshTokenExpired();
        java.util.Date date53 = accessToken49.getExpiresAt();
        java.lang.String str54 = accessToken49.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.deleteResource("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]", accessToken49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Insufficient scopes: []" + "'", str15, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PUT" + "'", str33, "PUT");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(accessToken40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]" + "'", str41, "Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test12387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12387");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader6 = scopeDeserializer0.getObjectIdReader();
        boolean boolean7 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getNullValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objectIdReader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(scopeSet8);
    }

    @Test
    public void test12388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12388");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.ConflictException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList4 = osiamUserService2.getAllUsers(accessToken3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
    }

    @Test
    public void test12389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12389");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.oauth.AccessToken.Builder builder7 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder7.setRefreshTokenExpiresAt(date8);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken12 = builder11.build();
        boolean boolean13 = accessToken12.isRefreshTokenExpired();
        java.lang.String str14 = accessToken12.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.toString();
        boolean boolean30 = accessToken12.equals((java.lang.Object) query24);
        org.osiam.client.query.QueryBuilder queryBuilder31 = osiamConnector5.createQueryBuilder(query24);
        org.osiam.client.query.QueryBuilder queryBuilder32 = osiamConnector5.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder35.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder41 = queryBuilder39.descending("hi!");
        org.osiam.client.query.Query query42 = queryBuilder41.build();
        java.lang.String str43 = query42.toString();
        java.lang.String str44 = query42.getSortOrder();
        java.lang.String str45 = query42.getSortBy();
        java.lang.String str46 = query42.getFilter();
        java.lang.String str47 = query42.getSortOrder();
        java.lang.String str48 = query42.getAttributes();
        java.lang.String str49 = query42.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder50 = osiamConnector5.createQueryBuilder(query42);
        org.osiam.client.query.QueryBuilder queryBuilder51 = osiamConnector5.createQueryBuilder();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken53 = osiamConnector5.retrieveAccessToken("org.osiam.client.exception.UnauthorizedException: PUT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str29, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(queryBuilder41);
        org.junit.Assert.assertNotNull(query42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "descending" + "'", str44, "descending");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "descending" + "'", str47, "descending");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Authorization" + "'", str48, "Authorization");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Authorization" + "'", str49, "Authorization");
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder51);
    }

    @Test
    public void test12390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12390");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getClientId();
        java.lang.String str10 = accessToken6.getClientId();
        java.lang.String str11 = accessToken6.getToken();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException18 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean19 = scope16.equals((java.lang.Object) invalidAttributeException18);
        java.lang.String str20 = scope16.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.addScope(scope28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope42 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.addScope(scope42);
        org.osiam.client.oauth.GrantType grantType44 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str45 = grantType44.getUrlParam();
        boolean boolean46 = scope42.equals((java.lang.Object) grantType44);
        java.lang.String str47 = scope42.toString();
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder25.addScope(scope42);
        boolean boolean49 = accessToken6.equals((java.lang.Object) builder25);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.addScope(scope52);
        org.osiam.client.oauth.Scope scope54 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException56 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean57 = scope54.equals((java.lang.Object) invalidAttributeException56);
        java.lang.String str58 = scope54.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder51.addScope(scope54);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope66 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.addScope(scope66);
        org.osiam.client.oauth.AccessToken.Builder builder69 = builder63.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken70 = builder69.build();
        java.lang.String str71 = accessToken70.getClientId();
        java.util.Date date72 = accessToken70.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder25.setExpiresAt(date72);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Bearer " + "'", str11, "Bearer ");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(scope42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + grantType44 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType44.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "client_credentials" + "'", str45, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PATCH" + "'", str47, "PATCH");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(scope54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "GET" + "'", str58, "GET");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(scope66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(accessToken70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Bearer " + "'", str71, "Bearer ");
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test12391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12391");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = accessToken9.getScopes();
        java.lang.String str12 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        boolean boolean13 = accessToken9.isRefreshTokenExpired();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.descending("hi!");
        org.osiam.client.query.Query query23 = queryBuilder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder22.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder22.filter("org.osiam.client.exception.ForbiddenException: hi!");
        boolean boolean28 = accessToken9.equals((java.lang.Object) "org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken9);
        org.osiam.client.AuthService.Builder builder31 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientSecret("");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientRedirectUri("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        boolean boolean40 = accessToken9.equals((java.lang.Object) builder39);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken9);
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(scopeSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(query23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test12392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12392");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        org.osiam.resources.scim.Group group6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope9 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.addScope(scope9);
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException13 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean14 = scope11.equals((java.lang.Object) invalidAttributeException13);
        java.lang.String str15 = scope11.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder8.addScope(scope11);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.addScope(scope25);
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        java.lang.String str31 = scope27.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder24.addScope(scope27);
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder20.addScope(scope27);
        org.osiam.client.oauth.AccessToken.Builder builder35 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.addScope(scope36);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException40 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean41 = scope38.equals((java.lang.Object) invalidAttributeException40);
        java.lang.String str42 = scope38.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder35.addScope(scope38);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setUserId("");
        org.osiam.client.oauth.Scope scope48 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder47.addScope(scope48);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        java.util.Date date57 = accessToken56.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder47.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder20.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder63 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date64 = null;
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder63.setRefreshTokenExpiresAt(date64);
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder63.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken68 = builder67.build();
        java.util.Date date69 = accessToken68.getExpiresAt();
        java.util.Date date70 = accessToken68.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder59.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken accessToken72 = builder59.build();
        java.lang.String str73 = accessToken72.getClientId();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken72);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group75 = osiamGroupService3.createGroup(group6, accessToken72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GET" + "'", str15, "GET");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GET" + "'", str31, "GET");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "GET" + "'", str42, "GET");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(scope48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(accessToken68);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(accessToken72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Bearer " + "'", str73, "Bearer ");
    }

    @Test
    public void test12393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12393");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setType("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setType("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setClientId("2024-03-22T13:51:20.388");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test12394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12394");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        java.lang.Class<?> wildcardClass9 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection11 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader12 = scopeDeserializer0.getObjectIdReader();
        com.fasterxml.jackson.core.JsonParser jsonParser13 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet15 = scopeDeserializer0.deserialize(jsonParser13, deserializationContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNull(objCollection11);
        org.junit.Assert.assertNull(objectIdReader12);
    }

    @Test
    public void test12395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12395");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector osiamConnector11 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder12 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.query.QueryBuilder queryBuilder20 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder20.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder26 = queryBuilder22.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder28 = queryBuilder26.descending("hi!");
        org.osiam.client.query.Query query29 = queryBuilder28.build();
        java.lang.String str30 = query29.toString();
        java.lang.String str31 = query29.toString();
        java.lang.String str32 = query29.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder33 = osiamConnector19.createQueryBuilder(query29);
        org.osiam.client.query.QueryBuilder queryBuilder34 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder38 = queryBuilder36.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder40 = queryBuilder36.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder42 = queryBuilder40.descending("hi!");
        org.osiam.client.query.Query query43 = queryBuilder42.build();
        org.osiam.client.query.QueryBuilder queryBuilder44 = osiamConnector19.createQueryBuilder(query43);
        org.osiam.client.query.QueryBuilder queryBuilder46 = queryBuilder44.attributes("ME");
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder44.descending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.Query query49 = queryBuilder44.build();
        org.osiam.client.query.Query query50 = query49.nextPage();
        java.lang.String str51 = query50.getAttributes();
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        boolean boolean59 = accessToken58.isRefreshTokenExpired();
        boolean boolean60 = accessToken58.isClientOnly();
        java.lang.String str61 = accessToken58.getClientId();
        java.lang.String str62 = accessToken58.getClientId();
        java.lang.String str63 = accessToken58.getToken();
        java.lang.String str64 = accessToken58.toString();
        java.lang.String str65 = accessToken58.getType();
        java.util.Date date66 = accessToken58.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult67 = osiamConnector11.searchGroups(query50, accessToken58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder28);
        org.junit.Assert.assertNotNull(query29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str30, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(queryBuilder38);
        org.junit.Assert.assertNotNull(queryBuilder40);
        org.junit.Assert.assertNotNull(queryBuilder42);
        org.junit.Assert.assertNotNull(query43);
        org.junit.Assert.assertNotNull(queryBuilder44);
        org.junit.Assert.assertNotNull(queryBuilder46);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(query49);
        org.junit.Assert.assertNotNull(query50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ME" + "'", str51, "ME");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Bearer " + "'", str63, "Bearer ");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str64, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12396");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector osiamConnector11 = builder4.build();
        org.osiam.client.OsiamConnector osiamConnector12 = builder4.build();
        org.osiam.client.OsiamGroupService.Builder builder14 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        boolean boolean23 = accessToken22.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken22.getScopes();
        java.lang.String str25 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        boolean boolean26 = accessToken22.isClientOnly();
        boolean boolean27 = accessToken22.isClientOnly();
        java.util.Date date28 = accessToken22.getRefreshTokenExpiresAt();
        java.lang.String str29 = accessToken22.getUserName();
        org.osiam.client.AuthService.Builder builder31 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder33 = builder31.setClientId("ME");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService.Builder builder41 = builder37.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService42 = builder41.build();
        org.osiam.client.AuthService.Builder builder44 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder46 = builder44.setClientId("ME");
        org.osiam.client.AuthService.Builder builder48 = builder46.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder50 = builder48.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder52 = builder50.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService53 = builder52.build();
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.lang.String str62 = accessToken60.getUserId();
        java.lang.String str63 = accessToken60.getToken();
        java.lang.String str64 = authService53.extractErrorMessageForbidden(accessToken60);
        org.osiam.client.oauth.Scope scope65 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str66 = scope65.getValue();
        java.lang.String str67 = scope65.toString();
        org.osiam.client.oauth.Scope scope68 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray69 = new org.osiam.client.oauth.Scope[] { scope65, scope68 };
        java.net.URI uRI70 = authService53.getAuthorizationUri(scopeArray69);
        java.net.URI uRI71 = authService42.getAuthorizationUri(scopeArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken72 = osiamConnector12.refreshAccessToken(accessToken22, scopeArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(osiamConnector12);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(authService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(authService53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Bearer " + "'", str63, "Bearer ");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Insufficient scopes: []" + "'", str64, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PATCH" + "'", str66, "PATCH");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PATCH" + "'", str67, "PATCH");
        org.junit.Assert.assertNotNull(scope68);
        org.junit.Assert.assertNotNull(scopeArray69);
        org.junit.Assert.assertNotNull(uRI70);
        org.junit.Assert.assertNotNull(uRI71);
    }

    @Test
    public void test12397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12397");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken20 = builder15.build();
        java.lang.String str21 = accessToken20.getClientId();
        java.util.Date date22 = accessToken20.getRefreshTokenExpiresAt();
        java.lang.String str23 = accessToken20.getClientId();
        org.osiam.client.OsiamConnector.Builder builder24 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder26 = builder24.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder28 = builder24.setResourceServerEndpoint("PATCH");
        org.osiam.client.OsiamConnector osiamConnector29 = builder28.build();
        boolean boolean30 = accessToken20.equals((java.lang.Object) osiamConnector29);
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder33.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder39 = queryBuilder37.descending("hi!");
        org.osiam.client.query.Query query40 = queryBuilder39.build();
        java.lang.String str41 = query40.toString();
        java.lang.String str42 = query40.getSortOrder();
        java.lang.String str43 = query40.getSortBy();
        java.lang.String str44 = query40.getFilter();
        java.lang.String str45 = query40.getSortOrder();
        java.lang.String str46 = query40.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder47 = new org.osiam.client.query.QueryBuilder(query40);
        long long48 = query40.getStartIndex();
        org.osiam.client.query.Query query49 = query40.nextPage();
        org.osiam.client.query.Query query50 = query40.nextPage();
        java.lang.String str51 = query50.getAttributes();
        org.osiam.client.query.Query query52 = query50.previousPage();
        org.osiam.client.oauth.AccessToken.Builder builder54 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder56 = builder54.addScope(scope55);
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException59 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean60 = scope57.equals((java.lang.Object) invalidAttributeException59);
        java.lang.String str61 = scope57.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder54.addScope(scope57);
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder62.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder66.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder66.addScope(scope69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder66.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        org.osiam.client.oauth.AccessToken.Builder builder75 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder75.setRefreshTokenExpiresAt(date76);
        org.osiam.client.oauth.AccessToken.Builder builder79 = builder75.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken80 = builder79.build();
        java.lang.Object obj81 = null;
        boolean boolean82 = accessToken80.equals(obj81);
        boolean boolean83 = accessToken80.isExpired();
        java.util.Date date84 = accessToken80.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder72.setExpiresAt(date84);
        org.osiam.client.oauth.AccessToken.Builder builder87 = builder85.setUserName("POST");
        org.osiam.client.oauth.AccessToken.Builder builder89 = builder87.setUserName("2024-03-22T13:51:20.388");
        org.osiam.client.oauth.AccessToken accessToken90 = builder89.build();
        java.util.Date date91 = accessToken90.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult92 = osiamConnector29.searchGroups(query50, accessToken90);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Bearer " + "'", str21, "Bearer ");
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Bearer " + "'", str23, "Bearer ");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(osiamConnector29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(queryBuilder39);
        org.junit.Assert.assertNotNull(query40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str41, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "descending" + "'", str42, "descending");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "descending" + "'", str45, "descending");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Authorization" + "'", str46, "Authorization");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(query49);
        org.junit.Assert.assertNotNull(query50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Authorization" + "'", str51, "Authorization");
        org.junit.Assert.assertNotNull(query52);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GET" + "'", str61, "GET");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(accessToken80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(accessToken90);
        org.junit.Assert.assertNotNull(date91);
        org.junit.Assert.assertEquals(date91.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12398");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        boolean boolean6 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeSetJsonDeserializer8.getObjectIdReader();
        boolean boolean10 = scopeSetJsonDeserializer8.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet11 = scopeSetJsonDeserializer8.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader12 = scopeSetJsonDeserializer8.getObjectIdReader();
        com.fasterxml.jackson.core.JsonParser jsonParser13 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        java.util.Date date22 = accessToken21.getExpiresAt();
        java.lang.String str23 = accessToken21.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet24 = accessToken21.getScopes();
        java.lang.String str25 = accessToken21.getUserId();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken21.getScopes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet27 = scopeSetJsonDeserializer8.deserialize(jsonParser13, deserializationContext14, scopeSet26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Can not update object of type java.util.HashSet (by deserializer of type org.osiam.client.helper.ScopeDeserializer)");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(objectIdReader9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(scopeSet11);
        org.junit.Assert.assertNull(objectIdReader12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(scopeSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(scopeSet26);
    }

    @Test
    public void test12399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12399");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("password");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getExpiresAt();
        java.lang.String str24 = accessToken22.getRefreshToken();
        java.lang.String str25 = accessToken22.getType();
        java.lang.String str26 = accessToken22.getClientId();
        java.lang.String str27 = accessToken22.getUserName();
        java.lang.String str28 = accessToken22.toString();
        java.lang.String str29 = accessToken22.getUserName();
        java.lang.String str30 = accessToken22.getToken();
        org.osiam.client.AuthService.Builder builder32 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder34 = builder32.setClientId("ME");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder40 = builder38.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder42 = builder38.setClientId("");
        org.osiam.client.AuthService.Builder builder44 = builder38.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService45 = builder44.build();
        org.osiam.client.OsiamConnector.Builder builder46 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder48 = builder46.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder50 = builder48.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder52 = builder50.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder54 = builder52.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector55 = builder52.build();
        org.osiam.client.OsiamConnector.Builder builder57 = builder52.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder59 = builder57.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector60 = builder57.build();
        org.osiam.client.AuthService.Builder builder62 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder64 = builder62.setClientId("ME");
        org.osiam.client.AuthService.Builder builder66 = builder64.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder68 = builder66.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder70 = builder68.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService71 = builder70.build();
        org.osiam.client.oauth.AccessToken.Builder builder73 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date74 = null;
        org.osiam.client.oauth.AccessToken.Builder builder75 = builder73.setRefreshTokenExpiresAt(date74);
        org.osiam.client.oauth.AccessToken.Builder builder77 = builder73.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken78 = builder77.build();
        boolean boolean79 = accessToken78.isRefreshTokenExpired();
        java.lang.String str80 = accessToken78.getUserId();
        java.lang.String str81 = accessToken78.getToken();
        java.lang.String str82 = authService71.extractErrorMessageForbidden(accessToken78);
        org.osiam.client.oauth.Scope scope83 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str84 = scope83.getValue();
        java.lang.String str85 = scope83.toString();
        org.osiam.client.oauth.Scope scope86 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray87 = new org.osiam.client.oauth.Scope[] { scope83, scope86 };
        java.net.URI uRI88 = authService71.getAuthorizationUri(scopeArray87);
        java.net.URI uRI89 = osiamConnector60.getAuthorizationUri(scopeArray87);
        java.net.URI uRI90 = authService45.getAuthorizationUri(scopeArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken91 = osiamConnector15.refreshAccessToken(accessToken22, scopeArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str28, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(authService45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(osiamConnector55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(osiamConnector60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(authService71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(accessToken78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Bearer " + "'", str81, "Bearer ");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Insufficient scopes: []" + "'", str82, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PATCH" + "'", str84, "PATCH");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "PATCH" + "'", str85, "PATCH");
        org.junit.Assert.assertNotNull(scope86);
        org.junit.Assert.assertNotNull(scopeArray87);
        org.junit.Assert.assertNotNull(uRI88);
        org.junit.Assert.assertNotNull(uRI89);
        org.junit.Assert.assertNotNull(uRI90);
    }

    @Test
    public void test12400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12400");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("Authorization");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setClientSecret("ME");
        org.osiam.client.OsiamConnector.Builder builder16 = builder12.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder18 = builder12.setClientRedirectUri("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder20 = builder18.setClientId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder22 = builder20.setClientRedirectUri("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector osiamConnector23 = builder22.build();
        org.osiam.client.query.QueryBuilder queryBuilder24 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder26 = osiamConnector23.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder27 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder27.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder33.descending("hi!");
        org.osiam.client.query.Query query36 = queryBuilder35.build();
        java.lang.String str37 = query36.getAttributes();
        java.lang.String str38 = query36.toString();
        java.lang.String str39 = query36.getSortOrder();
        java.lang.String str40 = query36.getAttributes();
        java.lang.String str41 = query36.getAttributes();
        long long42 = query36.getStartIndex();
        org.osiam.client.query.Query query43 = query36.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder44 = new org.osiam.client.query.QueryBuilder(query43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        java.lang.String str52 = accessToken51.toString();
        java.lang.String str53 = accessToken51.getClientId();
        org.osiam.client.OsiamConnector.Builder builder54 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder56 = builder54.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder58 = builder56.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder60 = builder58.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector61 = builder60.build();
        org.osiam.client.query.QueryBuilder queryBuilder62 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder68 = queryBuilder64.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder70 = queryBuilder68.descending("hi!");
        org.osiam.client.query.Query query71 = queryBuilder70.build();
        java.lang.String str72 = query71.toString();
        java.lang.String str73 = query71.toString();
        java.lang.String str74 = query71.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder75 = osiamConnector61.createQueryBuilder(query71);
        org.osiam.client.query.QueryBuilder queryBuilder76 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder78 = queryBuilder76.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder80 = queryBuilder78.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder82 = queryBuilder78.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder84 = queryBuilder82.descending("hi!");
        org.osiam.client.query.Query query85 = queryBuilder84.build();
        org.osiam.client.query.QueryBuilder queryBuilder86 = osiamConnector61.createQueryBuilder(query85);
        boolean boolean87 = accessToken51.equals((java.lang.Object) queryBuilder86);
        java.util.Date date88 = accessToken51.getExpiresAt();
        java.lang.String str89 = accessToken51.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult90 = osiamConnector23.searchUsers(query43, accessToken51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(osiamConnector23);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder26);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(query36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Authorization" + "'", str37, "Authorization");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str38, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Authorization" + "'", str40, "Authorization");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Authorization" + "'", str41, "Authorization");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(query43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str52, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(osiamConnector61);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(query71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str72, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str73, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(queryBuilder75);
        org.junit.Assert.assertNotNull(queryBuilder78);
        org.junit.Assert.assertNotNull(queryBuilder80);
        org.junit.Assert.assertNotNull(queryBuilder82);
        org.junit.Assert.assertNotNull(queryBuilder84);
        org.junit.Assert.assertNotNull(query85);
        org.junit.Assert.assertNotNull(queryBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test12401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12401");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        boolean boolean3 = scopeDeserializer0.isCachable();
        java.util.Collection<java.lang.Object> objCollection4 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet5 = scopeDeserializer0.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(objCollection4);
        org.junit.Assert.assertNull(scopeSet5);
    }

    @Test
    public void test12402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12402");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("ME");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientId("PUT");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("descending");
        org.osiam.client.AuthService.Builder builder13 = builder9.setClientSecret("PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService.Builder builder17 = builder13.setClientSecret("GET POST PUT PATCH DELETE");
        org.osiam.client.AuthService authService18 = builder17.build();
        org.osiam.client.OsiamConnector.Builder builder19 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder21 = builder19.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder23 = builder21.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder25 = builder23.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder27 = builder25.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector28 = builder25.build();
        org.osiam.client.OsiamConnector.Builder builder30 = builder25.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder32 = builder30.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector33 = builder30.build();
        org.osiam.client.AuthService.Builder builder35 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientId("ME");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder43 = builder41.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService44 = builder43.build();
        org.osiam.client.oauth.AccessToken.Builder builder46 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date47 = null;
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setRefreshTokenExpiresAt(date47);
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder46.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken51 = builder50.build();
        boolean boolean52 = accessToken51.isRefreshTokenExpired();
        java.lang.String str53 = accessToken51.getUserId();
        java.lang.String str54 = accessToken51.getToken();
        java.lang.String str55 = authService44.extractErrorMessageForbidden(accessToken51);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str57 = scope56.getValue();
        java.lang.String str58 = scope56.toString();
        org.osiam.client.oauth.Scope scope59 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray60 = new org.osiam.client.oauth.Scope[] { scope56, scope59 };
        java.net.URI uRI61 = authService44.getAuthorizationUri(scopeArray60);
        java.net.URI uRI62 = osiamConnector33.getAuthorizationUri(scopeArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken63 = authService18.retrieveAccessToken(scopeArray60);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(osiamConnector28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(osiamConnector33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(authService44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(accessToken51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Bearer " + "'", str54, "Bearer ");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Insufficient scopes: []" + "'", str55, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PATCH" + "'", str57, "PATCH");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PATCH" + "'", str58, "PATCH");
        org.junit.Assert.assertNotNull(scope59);
        org.junit.Assert.assertNotNull(scopeArray60);
        org.junit.Assert.assertNotNull(uRI61);
        org.junit.Assert.assertNotNull(uRI62);
    }

    @Test
    public void test12403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12403");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.OsiamConnector.Builder builder6 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder14.build();
        org.osiam.client.query.QueryBuilder queryBuilder20 = osiamConnector19.createQueryBuilder();
        org.osiam.client.query.Query query21 = queryBuilder20.build();
        org.osiam.client.query.Query query22 = query21.nextPage();
        long long23 = query22.getStartIndex();
        org.osiam.client.query.Query query24 = query22.previousPage();
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date27 = null;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setRefreshTokenExpiresAt(date27);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder26.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken33 = builder30.build();
        org.osiam.client.oauth.AccessToken accessToken34 = builder30.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken34);
        java.lang.String str36 = accessToken34.getUserName();
        java.lang.String str37 = accessToken34.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult38 = osiamConnector5.searchUsers(query22, accessToken34);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 101L + "'", long23 == 101L);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertNotNull(accessToken34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test12404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12404");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer64 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer65 = scopeSerializer0.unwrappingSerializer(nameTransformer64);
        boolean boolean66 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer67 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer68 = scopeSerializer0.unwrappingSerializer(nameTransformer67);
        boolean boolean69 = scopeSetJsonSerializer68.usesObjectId();
        boolean boolean70 = scopeSetJsonSerializer68.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer71 = scopeSetJsonSerializer68.getDelegatee();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(wildcardJsonSerializer71);
    }

    @Test
    public void test12405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12405");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        org.osiam.client.query.Query query12 = query9.nextPage();
        long long13 = query12.getStartIndex();
        java.lang.String str14 = query12.getSortBy();
        org.osiam.client.query.Query query15 = query12.nextPage();
        org.osiam.client.query.Query query16 = query12.previousPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
    }

    @Test
    public void test12406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12406");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setAuthServerEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder14 = builder10.setAuthServerEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder10.setClientSecret("org.osiam.client.exception.ConflictException: PATCH");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector osiamConnector19 = builder16.build();
        org.osiam.client.AuthService.Builder builder23 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientId("ME");
        org.osiam.client.AuthService.Builder builder27 = builder25.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder29 = builder27.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder31 = builder29.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder33 = builder29.setClientId("");
        org.osiam.client.AuthService.Builder builder35 = builder29.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService36 = builder35.build();
        org.osiam.client.OsiamConnector.Builder builder37 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder39 = builder37.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder41 = builder39.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder43 = builder41.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder45 = builder43.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector46 = builder43.build();
        org.osiam.client.OsiamConnector.Builder builder48 = builder43.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder50 = builder48.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector51 = builder48.build();
        org.osiam.client.AuthService.Builder builder53 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientId("ME");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder61 = builder59.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService62 = builder61.build();
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.lang.String str71 = accessToken69.getUserId();
        java.lang.String str72 = accessToken69.getToken();
        java.lang.String str73 = authService62.extractErrorMessageForbidden(accessToken69);
        org.osiam.client.oauth.Scope scope74 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str75 = scope74.getValue();
        java.lang.String str76 = scope74.toString();
        org.osiam.client.oauth.Scope scope77 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray78 = new org.osiam.client.oauth.Scope[] { scope74, scope77 };
        java.net.URI uRI79 = authService62.getAuthorizationUri(scopeArray78);
        java.net.URI uRI80 = osiamConnector51.getAuthorizationUri(scopeArray78);
        java.net.URI uRI81 = authService36.getAuthorizationUri(scopeArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken82 = osiamConnector19.retrieveAccessToken("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending", "org.osiam.client.exception.InvalidAttributeException: authorization_code", scopeArray78);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(authService36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(osiamConnector46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(osiamConnector51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(authService62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Bearer " + "'", str72, "Bearer ");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PATCH" + "'", str75, "PATCH");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PATCH" + "'", str76, "PATCH");
        org.junit.Assert.assertNotNull(scope77);
        org.junit.Assert.assertNotNull(scopeArray78);
        org.junit.Assert.assertNotNull(uRI79);
        org.junit.Assert.assertNotNull(uRI80);
        org.junit.Assert.assertNotNull(uRI81);
    }

    @Test
    public void test12407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12407");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken13 = builder10.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken13);
        java.lang.String str16 = osiamGroupService2.extractErrorMessageForbidden(accessToken13);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group18 = osiamGroupService2.mapToResource("descending");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: descending");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Insufficient scopes: []" + "'", str16, "Insufficient scopes: []");
    }

    @Test
    public void test12408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12408");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.query.QueryBuilder queryBuilder71 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder72 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder73 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder74 = osiamConnector13.createQueryBuilder();
        org.osiam.resources.scim.UpdateUser updateUser76 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder78.setRefreshTokenExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder78.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken83 = builder82.build();
        java.util.Date date84 = accessToken83.getExpiresAt();
        java.lang.String str85 = accessToken83.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user86 = osiamConnector13.updateUser("Insufficient scopes: [Authorization, GET, GET POST PUT PATCH DELETE, PUT]", updateUser76, accessToken83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(queryBuilder71);
        org.junit.Assert.assertNotNull(queryBuilder72);
        org.junit.Assert.assertNotNull(queryBuilder73);
        org.junit.Assert.assertNotNull(queryBuilder74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(accessToken83);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test12409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12409");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder0.setResourceServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test12410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12410");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshToken("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.helper.ScopeSerializer scopeSerializer16 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean17 = scopeSerializer16.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass18 = scopeSerializer16.handledType();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        java.util.Date date26 = accessToken25.getExpiresAt();
        java.lang.String str27 = accessToken25.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet28 = accessToken25.getScopes();
        boolean boolean29 = scopeSerializer16.isEmpty(scopeSet28);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder15.addScopes(scopeSet28);
        org.osiam.client.oauth.AccessToken.Builder builder32 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date33 = null;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder32.setRefreshTokenExpiresAt(date33);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder32.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken37 = builder36.build();
        boolean boolean38 = accessToken37.isRefreshTokenExpired();
        boolean boolean39 = accessToken37.isClientOnly();
        java.lang.String str40 = accessToken37.getClientId();
        java.lang.String str41 = accessToken37.getClientId();
        java.util.Date date42 = accessToken37.getRefreshTokenExpiresAt();
        java.util.Date date43 = accessToken37.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder30.setExpiresAt(date43);
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        org.osiam.client.oauth.AccessToken accessToken46 = builder44.build();
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setRefreshToken("org.osiam.client.exception.NoResultException: Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(scopeSetClass18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(scopeSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(accessToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test12411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12411");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setClientSecret("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setClientRedirectUri("PATCH");
        org.osiam.client.OsiamConnector.Builder builder12 = builder2.setEndpoint("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector13 = builder2.build();
        org.osiam.client.OsiamConnector.Builder builder14 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("PUT");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken.Builder builder21 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date22 = null;
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setRefreshTokenExpiresAt(date22);
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder21.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken26 = builder25.build();
        boolean boolean27 = accessToken26.isRefreshTokenExpired();
        java.lang.String str28 = accessToken26.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder29 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder33 = queryBuilder31.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder35 = queryBuilder31.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder37 = queryBuilder35.descending("hi!");
        org.osiam.client.query.Query query38 = queryBuilder37.build();
        java.lang.String str39 = query38.toString();
        java.lang.String str40 = query38.getSortOrder();
        java.lang.String str41 = query38.getSortBy();
        java.lang.String str42 = query38.getFilter();
        java.lang.String str43 = query38.toString();
        boolean boolean44 = accessToken26.equals((java.lang.Object) query38);
        org.osiam.client.query.QueryBuilder queryBuilder45 = osiamConnector19.createQueryBuilder(query38);
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.getAttributes();
        java.lang.String str57 = query55.toString();
        java.lang.String str58 = query55.getSortOrder();
        org.osiam.client.query.QueryBuilder queryBuilder59 = osiamConnector19.createQueryBuilder(query55);
        org.osiam.client.query.QueryBuilder queryBuilder60 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder62 = queryBuilder60.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder64 = queryBuilder62.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder66 = queryBuilder64.startIndex((long) (byte) 0);
        org.osiam.client.query.Query query67 = queryBuilder64.build();
        org.osiam.client.query.QueryBuilder queryBuilder68 = osiamConnector19.createQueryBuilder(query67);
        java.lang.String str69 = query67.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder70 = osiamConnector13.createQueryBuilder(query67);
        org.osiam.client.oauth.AccessToken.Builder builder72 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date73 = null;
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder72.setRefreshTokenExpiresAt(date73);
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder72.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken77 = builder76.build();
        boolean boolean78 = accessToken77.isRefreshTokenExpired();
        java.lang.String str79 = accessToken77.getUserId();
        java.lang.String str80 = accessToken77.getToken();
        boolean boolean81 = accessToken77.isExpired();
        java.lang.String str82 = accessToken77.getClientId();
        java.lang.String str83 = accessToken77.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList84 = osiamConnector13.getAllUsers(accessToken77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(accessToken26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(queryBuilder33);
        org.junit.Assert.assertNotNull(queryBuilder35);
        org.junit.Assert.assertNotNull(queryBuilder37);
        org.junit.Assert.assertNotNull(query38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str39, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "descending" + "'", str40, "descending");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str43, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(queryBuilder45);
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Authorization" + "'", str56, "Authorization");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str57, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "descending" + "'", str58, "descending");
        org.junit.Assert.assertNotNull(queryBuilder59);
        org.junit.Assert.assertNotNull(queryBuilder62);
        org.junit.Assert.assertNotNull(queryBuilder64);
        org.junit.Assert.assertNotNull(queryBuilder66);
        org.junit.Assert.assertNotNull(query67);
        org.junit.Assert.assertNotNull(queryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(queryBuilder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(accessToken77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Bearer " + "'", str80, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test12412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12412");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("ascending");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        java.util.Date date11 = accessToken10.getExpiresAt();
        java.lang.String str12 = accessToken10.getRefreshToken();
        java.lang.String str13 = accessToken10.getType();
        java.lang.String str14 = accessToken10.getClientId();
        java.lang.String str15 = accessToken10.getUserName();
        java.lang.String str16 = accessToken10.toString();
        java.lang.String str17 = accessToken10.getUserName();
        java.lang.String str18 = accessToken10.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user19 = osiamUserService2.getUser("org.osiam.client.exception.OsiamClientException: password", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str16, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Bearer " + "'", str18, "Bearer ");
    }

    @Test
    public void test12413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12413");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.osiam.client.OsiamConnector osiamConnector5 = builder4.build();
        org.osiam.client.query.QueryBuilder queryBuilder6 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.count((int) (short) 0);
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.attributes("");
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder10.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.ascending("password");
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder16.count((int) (short) -1);
        org.osiam.client.query.Query query21 = queryBuilder16.build();
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector5.createQueryBuilder(query21);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.ascending("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConflictException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(osiamConnector5);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(query21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
    }

    @Test
    public void test12414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12414");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getUserName();
        java.util.Date date23 = accessToken20.getRefreshTokenExpiresAt();
        java.lang.String str24 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        java.lang.String str25 = accessToken20.getToken();
        java.lang.String str26 = accessToken20.getClientId();
        java.lang.String str27 = accessToken20.getUserId();
        java.lang.String str28 = accessToken20.getClientId();
        java.lang.String str29 = accessToken20.getType();
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Bearer " + "'", str25, "Bearer ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test12415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12415");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder7 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder7.build();
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet17 = accessToken15.getScopes();
        java.lang.String str18 = osiamGroupService8.extractErrorMessageForbidden(accessToken15);
        boolean boolean19 = accessToken15.isClientOnly();
        boolean boolean20 = accessToken15.isClientOnly();
        java.lang.String str21 = accessToken15.toString();
        java.lang.String str22 = osiamGroupService4.extractErrorMessageForbidden(accessToken15);
        org.osiam.client.oauth.AccessToken.Builder builder24 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date25 = null;
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder24.setRefreshTokenExpiresAt(date25);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder24.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken29 = builder28.build();
        boolean boolean30 = accessToken29.isRefreshTokenExpired();
        java.lang.String str31 = accessToken29.getUserId();
        java.lang.String str32 = accessToken29.getToken();
        java.util.Date date33 = accessToken29.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken29);
        java.lang.String str35 = osiamGroupService4.extractErrorMessageForbidden(accessToken29);
        org.osiam.resources.scim.Group group36 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date39 = null;
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setRefreshTokenExpiresAt(date39);
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder38.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken43 = builder42.build();
        boolean boolean44 = accessToken43.isRefreshTokenExpired();
        java.lang.String str45 = accessToken43.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder46 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder48 = queryBuilder46.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder52.descending("hi!");
        org.osiam.client.query.Query query55 = queryBuilder54.build();
        java.lang.String str56 = query55.toString();
        java.lang.String str57 = query55.getSortOrder();
        java.lang.String str58 = query55.getSortBy();
        java.lang.String str59 = query55.getFilter();
        java.lang.String str60 = query55.toString();
        boolean boolean61 = accessToken43.equals((java.lang.Object) query55);
        java.util.Date date62 = accessToken43.getExpiresAt();
        java.lang.String str63 = accessToken43.getUserName();
        java.lang.String str64 = accessToken43.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group65 = osiamGroupService4.createResource(group36, accessToken43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scopeSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Insufficient scopes: []" + "'", str18, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str21, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Insufficient scopes: []" + "'", str22, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(accessToken29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Bearer " + "'", str32, "Bearer ");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(accessToken43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(queryBuilder48);
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(query55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str56, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "descending" + "'", str57, "descending");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str60, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test12416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12416");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = osiamGroupService3.extractErrorMessageUnauthorized("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=null, sortOrder=null, startIndex=11, count=10]", statusType6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
    }

    @Test
    public void test12417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12417");
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User> userBuilder1 = new org.osiam.client.AbstractOsiamService.Builder<org.osiam.resources.scim.User>("org.osiam.client.exception.OsiamClientException: password");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12418");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken10);
        java.lang.String str12 = osiamGroupService3.extractErrorMessageForbidden(accessToken10);
        javax.ws.rs.client.WebTarget webTarget13 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget14 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget15 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget16 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = osiamGroupService3.extractErrorMessage("org.osiam.client.exception.NoResultException: org.osiam.client.exception.ConnectionInitializationException: descending", statusType18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Insufficient scopes: []" + "'", str12, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget13);
        org.junit.Assert.assertNotNull(webTarget14);
        org.junit.Assert.assertNotNull(webTarget15);
        org.junit.Assert.assertNotNull(webTarget16);
    }

    @Test
    public void test12419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12419");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("refresh_token");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        java.lang.String str13 = accessToken10.getToken();
        boolean boolean14 = accessToken10.isExpired();
        java.lang.String str15 = accessToken10.getClientId();
        boolean boolean16 = accessToken10.isExpired();
        java.lang.String str17 = accessToken10.getUserId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.getUser("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.ForbiddenException: hi!", accessToken10);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Bearer " + "'", str13, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test12420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12420");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.descending("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.ascending("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder13.attributes("org.osiam.client.exception.InvalidAttributeException: Cannot connect to server");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
    }

    @Test
    public void test12421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12421");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        org.osiam.client.query.Query query12 = query9.nextPage();
        org.osiam.client.query.Query query13 = query9.nextPage();
        java.lang.String str14 = query13.toString();
        java.lang.String str15 = query13.getSortBy();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test12422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12422");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        boolean boolean5 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer7 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer8 = scopeDeserializer0.unwrappingDeserializer(nameTransformer7);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer9 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass10 = scopeDeserializer9.handledType();
        java.lang.Class<?> wildcardClass11 = scopeDeserializer9.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer12 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer13 = scopeDeserializer9.unwrappingDeserializer(nameTransformer12);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer14 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer15 = scopeDeserializer9.unwrappingDeserializer(nameTransformer14);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer17 = scopeDeserializer9.unwrappingDeserializer(nameTransformer16);
        java.lang.Class<?> wildcardClass18 = scopeDeserializer9.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader19 = scopeDeserializer9.getObjectIdReader();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer20 = scopeDeserializer0.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer13);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer15);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(objectIdReader19);
    }

    @Test
    public void test12423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12423");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer5 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer6 = scopeDeserializer0.unwrappingDeserializer(nameTransformer5);
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeSetJsonDeserializer6.getDelegatee();
        java.lang.Class<?> wildcardClass8 = scopeSetJsonDeserializer6.handledType();
        java.lang.Class<?> wildcardClass9 = scopeSetJsonDeserializer6.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeSetJsonDeserializer6.getNullValue();
        java.util.Collection<java.lang.Object> objCollection11 = scopeSetJsonDeserializer6.getKnownPropertyNames();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNull(objCollection11);
    }

    @Test
    public void test12424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12424");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer5 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer5.handledType();
        boolean boolean7 = scopeDeserializer5.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer5.getNullValue();
        java.lang.Class<?> wildcardClass9 = scopeDeserializer5.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet10 = scopeDeserializer5.getNullValue();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer11 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer12 = scopeDeserializer5.unwrappingDeserializer(nameTransformer11);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = scopeDeserializer5.getNullValue();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer14 = scopeSetJsonDeserializer4.replaceDelegatee((com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeDeserializer5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(scopeSet10);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer12);
        org.junit.Assert.assertNull(scopeSet13);
    }

    @Test
    public void test12425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12425");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientSecret("");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.AuthService authService11 = builder9.build();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date14 = null;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setRefreshTokenExpiresAt(date14);
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken18 = builder17.build();
        boolean boolean19 = accessToken18.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet20 = accessToken18.getScopes();
        boolean boolean21 = accessToken18.isRefreshTokenExpired();
        boolean boolean22 = accessToken18.isExpired();
        java.util.Date date23 = accessToken18.getExpiresAt();
        java.lang.String str24 = authService11.extractErrorMessageForbidden(accessToken18);
        java.lang.String str25 = accessToken18.getRefreshToken();
        java.lang.String str26 = accessToken18.getUserName();
        java.lang.String str27 = accessToken18.getUserName();
        boolean boolean28 = accessToken18.isExpired();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken18);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(authService11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(accessToken18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(scopeSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test12426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12426");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.resources.scim.UpdateGroup updateGroup7 = null;
        org.osiam.client.OsiamGroupService.Builder builder9 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder9.build();
        javax.ws.rs.client.WebTarget webTarget11 = osiamGroupService10.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder13 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder13.build();
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder13.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        java.lang.String str24 = osiamGroupService15.extractErrorMessageForbidden(accessToken22);
        java.util.Date date25 = accessToken22.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean28 = accessToken22.equals((java.lang.Object) scope27);
        java.lang.String str29 = accessToken22.getRefreshToken();
        java.lang.String str30 = accessToken22.getToken();
        java.lang.String str31 = accessToken22.getUserId();
        java.lang.String str32 = osiamGroupService10.extractErrorMessageForbidden(accessToken22);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken22);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group34 = osiamGroupService5.updateGroup("Insufficient scopes: [GET]", updateGroup7, accessToken22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(webTarget11);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Bearer " + "'", str30, "Bearer ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Insufficient scopes: []" + "'", str32, "Insufficient scopes: []");
    }

    @Test
    public void test12427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12427");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass64 = scopeSerializer0.handledType();
        org.osiam.client.oauth.Scope scope66 = new org.osiam.client.oauth.Scope("");
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope69 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.addScope(scope69);
        org.osiam.client.oauth.Scope[] scopeArray71 = new org.osiam.client.oauth.Scope[] { scope66, scope69 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet72 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet72, scopeArray71);
        boolean boolean74 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet72);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer75 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer76 = scopeSerializer0.unwrappingSerializer(nameTransformer75);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass77 = scopeSerializer0.handledType();
        boolean boolean78 = scopeSerializer0.usesObjectId();
        boolean boolean79 = scopeSerializer0.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer80 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer81 = scopeSerializer0.unwrappingSerializer(nameTransformer80);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer82 = scopeSetJsonSerializer81.getDelegatee();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(scopeSetClass64);
        org.junit.Assert.assertNotNull(scope69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(scopeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer76);
        org.junit.Assert.assertNull(scopeSetClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer81);
        org.junit.Assert.assertNull(wildcardJsonSerializer82);
    }

    @Test
    public void test12428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12428");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        java.lang.String str15 = accessToken13.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder16 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder18 = queryBuilder16.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder20 = queryBuilder18.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder22 = queryBuilder18.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder24 = queryBuilder22.descending("hi!");
        org.osiam.client.query.Query query25 = queryBuilder24.build();
        java.lang.String str26 = query25.toString();
        java.lang.String str27 = query25.getSortOrder();
        java.lang.String str28 = query25.getSortBy();
        java.lang.String str29 = query25.getFilter();
        java.lang.String str30 = query25.getSortOrder();
        java.lang.String str31 = query25.getAttributes();
        boolean boolean32 = accessToken13.equals((java.lang.Object) query25);
        org.osiam.client.OsiamConnector.Builder builder33 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder35 = builder33.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder37 = builder35.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder39 = builder37.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder41 = builder37.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder43 = builder37.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder45 = builder43.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder47 = builder43.setClientRedirectUri("PUT");
        boolean boolean48 = accessToken13.equals((java.lang.Object) builder47);
        java.lang.String str49 = accessToken13.getClientId();
        java.lang.String str50 = accessToken13.getToken();
        java.lang.String str51 = osiamGroupService4.extractErrorMessageForbidden(accessToken13);
        org.osiam.client.AuthService.Builder builder53 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder55 = builder53.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder57 = builder55.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder59 = builder57.setClientSecret("");
        org.osiam.client.AuthService.Builder builder61 = builder57.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService62 = builder57.build();
        org.osiam.client.oauth.AccessToken.Builder builder64 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date65 = null;
        org.osiam.client.oauth.AccessToken.Builder builder66 = builder64.setRefreshTokenExpiresAt(date65);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder64.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken69 = builder68.build();
        boolean boolean70 = accessToken69.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet71 = accessToken69.getScopes();
        boolean boolean72 = accessToken69.isClientOnly();
        java.lang.Object obj73 = null;
        boolean boolean74 = accessToken69.equals(obj73);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken69);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken69);
        java.lang.String str77 = accessToken69.getClientId();
        java.lang.String str78 = authService62.extractErrorMessageForbidden(accessToken69);
        java.lang.String str79 = osiamGroupService4.extractErrorMessageForbidden(accessToken69);
        org.osiam.resources.scim.Group group81 = null;
        org.osiam.client.oauth.AccessToken accessToken82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group83 = osiamGroupService4.updateGroup("", group81, accessToken82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given id must not be null nor empty.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(queryBuilder18);
        org.junit.Assert.assertNotNull(queryBuilder20);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder24);
        org.junit.Assert.assertNotNull(query25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str26, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "descending" + "'", str27, "descending");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "descending" + "'", str30, "descending");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Authorization" + "'", str31, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Bearer " + "'", str50, "Bearer ");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(authService62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(accessToken69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(scopeSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Insufficient scopes: []" + "'", str78, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Insufficient scopes: []" + "'", str79, "Insufficient scopes: []");
    }

    @Test
    public void test12429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12429");
        org.osiam.client.exception.ForbiddenException forbiddenException2 = new org.osiam.client.exception.ForbiddenException("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.exception.OsiamClientException osiamClientException3 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ConflictException: PATCH", (java.lang.Throwable) forbiddenException2);
    }

    @Test
    public void test12430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12430");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        java.lang.String str7 = accessToken6.toString();
        java.lang.String str8 = accessToken6.getType();
        boolean boolean9 = accessToken6.isExpired();
        java.util.Date date10 = accessToken6.getExpiresAt();
        boolean boolean11 = accessToken6.isRefreshTokenExpired();
        org.osiam.client.oauth.AccessToken.Builder builder13 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.addScope(scope14);
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException18 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean19 = scope16.equals((java.lang.Object) invalidAttributeException18);
        java.lang.String str20 = scope16.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder13.addScope(scope16);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder21.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder23.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder25.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder29 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.addScope(scope30);
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder29.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder25.addScope(scope32);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder25.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder44.setUserId("PATCH");
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder44.setRefreshToken("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.Scope scope53 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.addScope(scope53);
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken61);
        java.util.Date date63 = accessToken61.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder54.setExpiresAt(date63);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder42.setExpiresAt(date63);
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        boolean boolean67 = accessToken6.equals((java.lang.Object) builder65);
        org.osiam.client.oauth.AccessToken accessToken68 = builder65.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str7, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(scope53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(accessToken68);
    }

    @Test
    public void test12431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12431");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector osiamConnector9 = builder8.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder8.setResourceServerEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector osiamConnector14 = builder13.build();
        org.osiam.client.query.QueryBuilder queryBuilder15 = osiamConnector14.createQueryBuilder();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(queryBuilder15);
    }

    @Test
    public void test12432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12432");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=21, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken accessToken3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser4 = osiamUserService2.getCurrentUserBasic(accessToken3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
    }

    @Test
    public void test12433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12433");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer3 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getEmptyValue();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer5 = scopeDeserializer0.getDelegatee();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer0.handledType();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardJsonDeserializer3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(wildcardJsonDeserializer5);
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test12434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12434");
        org.osiam.client.exception.UnauthorizedException unauthorizedException1 = new org.osiam.client.exception.UnauthorizedException("org.osiam.client.exception.NoResultException: Insufficient scopes: []");
    }

    @Test
    public void test12435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12435");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        java.lang.String str11 = query10.getSortBy();
        java.lang.String str12 = query10.getFilter();
        int int13 = query10.getCount();
        long long14 = query10.getStartIndex();
        java.lang.String str15 = query10.getAttributes();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Authorization" + "'", str15, "Authorization");
    }

    @Test
    public void test12436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12436");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector osiamConnector15 = builder14.build();
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date18 = null;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.setRefreshTokenExpiresAt(date18);
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder17.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken accessToken22 = builder21.build();
        java.util.Date date23 = accessToken22.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector15.revokeAccessToken(accessToken22);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(osiamConnector15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(accessToken22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12437");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer6 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer7 = scopeSetJsonDeserializer5.unwrappingDeserializer(nameTransformer6);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeSetJsonDeserializer5.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeSetJsonDeserializer5.getEmptyValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader10 = scopeSetJsonDeserializer5.getObjectIdReader();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader11 = scopeSetJsonDeserializer5.getObjectIdReader();
        java.lang.Class<?> wildcardClass12 = scopeSetJsonDeserializer5.handledType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = scopeSetJsonDeserializer5.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet14 = scopeSetJsonDeserializer5.getEmptyValue();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertNull(objectIdReader10);
        org.junit.Assert.assertNull(objectIdReader11);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(scopeSet13);
        org.junit.Assert.assertNull(scopeSet14);
    }

    @Test
    public void test12438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12438");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder3.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder7 = builder5.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder9 = builder7.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService10 = builder9.build();
        org.osiam.client.AuthService.Builder builder12 = builder9.setClientSecret("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.AuthService.Builder builder14 = builder12.setClientId("");
        org.osiam.client.AuthService.Builder builder16 = builder12.setClientRedirectUri("ADMIN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(authService10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test12439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12439");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        java.lang.Class<?> wildcardClass2 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer3 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer4 = scopeDeserializer0.unwrappingDeserializer(nameTransformer3);
        java.util.Collection<java.lang.Object> objCollection5 = scopeDeserializer0.getKnownPropertyNames();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader7 = scopeDeserializer0.getObjectIdReader();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer4);
        org.junit.Assert.assertNull(objCollection5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(objectIdReader7);
    }

    @Test
    public void test12440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12440");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getNullValue();
        java.lang.Class<?> wildcardClass4 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.lang.Class<?> wildcardClass6 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer7 = scopeDeserializer0.getDelegatee();
        java.lang.Class<?> wildcardClass8 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader9 = scopeDeserializer0.getObjectIdReader();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.deser.SettableBeanProperty settableBeanProperty11 = scopeDeserializer0.findBackReference("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not handle managed/back reference 'org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]': type: value deserializer of type org.osiam.client.helper.ScopeDeserializer does not support them");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardJsonDeserializer7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(objectIdReader9);
    }

    @Test
    public void test12441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12441");
        org.osiam.client.exception.ConflictException conflictException1 = new org.osiam.client.exception.ConflictException("org.osiam.client.exception.OsiamRequestException: Authorization");
    }

    @Test
    public void test12442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12442");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("client_credentials");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setEndpoint("Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setClientId("GET");
        org.osiam.client.OsiamConnector.Builder builder18 = builder16.setClientSecret("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test12443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12443");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.setType("client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setUserId("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserId("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.AuthService.Builder builder34 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder36 = builder34.setClientId("ME");
        org.osiam.client.AuthService.Builder builder38 = builder36.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService39 = builder38.build();
        org.osiam.client.OsiamGroupService.Builder builder41 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService42 = builder41.build();
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        boolean boolean50 = accessToken49.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet51 = accessToken49.getScopes();
        java.lang.String str52 = osiamGroupService42.extractErrorMessageForbidden(accessToken49);
        boolean boolean53 = accessToken49.isClientOnly();
        java.lang.String str54 = authService39.extractErrorMessageForbidden(accessToken49);
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder60.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken63 = builder60.build();
        java.lang.String str64 = accessToken63.toString();
        java.lang.String str65 = authService39.extractErrorMessageForbidden(accessToken63);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet66 = accessToken63.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder30.addScopes(scopeSet66);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(authService39);
        org.junit.Assert.assertNotNull(osiamGroupService42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(scopeSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Insufficient scopes: []" + "'", str52, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Insufficient scopes: []" + "'", str54, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str64, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Insufficient scopes: []" + "'", str65, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scopeSet66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test12444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12444");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder11 = queryBuilder8.startIndex((long) (byte) 100);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.attributes("Cannot connect to server");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder11.filter("ADMIN");
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.ascending("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.descending("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(queryBuilder11);
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
    }

    @Test
    public void test12445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12445");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.ConflictException: org.osiam.client.exception.OsiamClientException: ME");
    }

    @Test
    public void test12446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12446");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        boolean boolean2 = scopeDeserializer0.isCachable();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet3 = scopeDeserializer0.getEmptyValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet4 = scopeDeserializer0.getNullValue();
        com.fasterxml.jackson.databind.deser.impl.ObjectIdReader objectIdReader5 = scopeDeserializer0.getObjectIdReader();
        java.util.Collection<java.lang.Object> objCollection6 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Collection<java.lang.Object> objCollection8 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer9 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer10 = scopeDeserializer0.unwrappingDeserializer(nameTransformer9);
        com.fasterxml.jackson.core.JsonParser jsonParser11 = null;
        com.fasterxml.jackson.databind.DeserializationContext deserializationContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.osiam.client.oauth.Scope> scopeSet13 = scopeDeserializer0.deserialize(jsonParser11, deserializationContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeSet3);
        org.junit.Assert.assertNull(scopeSet4);
        org.junit.Assert.assertNull(objectIdReader5);
        org.junit.Assert.assertNull(objCollection6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(objCollection8);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer10);
    }

    @Test
    public void test12447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12447");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        boolean boolean10 = accessToken9.isRefreshTokenExpired();
        java.lang.String str11 = accessToken9.getUserId();
        java.lang.String str12 = accessToken9.getToken();
        java.util.Date date13 = accessToken9.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.User> userList15 = osiamUserService2.getAllUsers(accessToken9);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Bearer " + "'", str12, "Bearer ");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12448");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setResourceServerEndpoint("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setEndpoint("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("PUT");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        org.osiam.client.query.QueryBuilder queryBuilder14 = osiamConnector13.createQueryBuilder();
        org.osiam.client.query.Query query15 = queryBuilder14.build();
        org.osiam.client.query.Query query16 = query15.nextPage();
        java.lang.String str17 = query15.getSortOrder();
        java.lang.String str18 = query15.getFilter();
        long long19 = query15.getStartIndex();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(query15);
        org.junit.Assert.assertNotNull(query16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test12449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12449");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        org.osiam.client.query.Query query10 = queryBuilder8.build();
        int int11 = query10.getCount();
        long long12 = query10.getStartIndex();
        java.lang.String str13 = query10.toString();
        java.lang.String str14 = query10.toString();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertNotNull(query10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str13, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test12450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12450");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        java.lang.String str8 = accessToken6.getUserId();
        java.lang.String str9 = accessToken6.getToken();
        java.lang.String str10 = accessToken6.getClientId();
        java.lang.String str11 = accessToken6.getToken();
        java.lang.String str12 = accessToken6.toString();
        boolean boolean13 = accessToken6.isClientOnly();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Bearer " + "'", str9, "Bearer ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Bearer " + "'", str11, "Bearer ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test12451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12451");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getAttributes();
        int int13 = query9.getCount();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query9);
        long long15 = query9.getStartIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.query.Query query16 = query9.previousPage();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: StartIndex < 1 is not possible.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Authorization" + "'", str12, "Authorization");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test12452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12452");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setEndpoint("");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setAuthServerEndpoint("org.osiam.client.exception.ConflictException: Query [attributes=Cannot connect to server, filter=null, sortBy=hi!, sortOrder=descending, startIndex=10, count=10]");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test12453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12453");
        org.osiam.client.exception.OsiamClientException osiamClientException1 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ForbiddenException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
    }

    @Test
    public void test12454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12454");
        org.osiam.client.oauth.Scope scope1 = new org.osiam.client.oauth.Scope("org.osiam.client.exception.UnauthorizedException: client_credentials");
        org.osiam.client.OsiamConnector.Builder builder2 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientRedirectUri("password");
        org.osiam.client.OsiamConnector.Builder builder12 = builder8.setAuthServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: descending");
        org.osiam.client.OsiamConnector osiamConnector13 = builder8.build();
        boolean boolean14 = scope1.equals((java.lang.Object) builder8);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test12455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12455");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setClientSecret("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("org.osiam.client.exception.ConnectionInitializationException: Bearer ");
        org.osiam.client.OsiamConnector osiamConnector13 = builder10.build();
        org.osiam.client.oauth.AccessToken accessToken14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser15 = osiamConnector13.getCurrentUserBasic(accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(osiamConnector13);
    }

    @Test
    public void test12456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12456");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken10 = builder9.build();
        boolean boolean11 = accessToken10.isRefreshTokenExpired();
        java.lang.String str12 = accessToken10.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.descending("hi!");
        org.osiam.client.query.Query query22 = queryBuilder21.build();
        java.lang.String str23 = query22.toString();
        java.lang.String str24 = query22.getSortOrder();
        java.lang.String str25 = query22.getSortBy();
        java.lang.String str26 = query22.getFilter();
        java.lang.String str27 = query22.toString();
        boolean boolean28 = accessToken10.equals((java.lang.Object) query22);
        java.util.Date date29 = accessToken10.getExpiresAt();
        java.lang.String str30 = accessToken10.getUserName();
        java.lang.String str31 = osiamGroupService2.extractErrorMessageForbidden(accessToken10);
        org.osiam.client.oauth.AccessToken.Builder builder33 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date34 = null;
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder33.setRefreshTokenExpiresAt(date34);
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder33.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken38 = builder37.build();
        boolean boolean39 = accessToken38.isRefreshTokenExpired();
        boolean boolean40 = accessToken38.isClientOnly();
        java.lang.String str41 = accessToken38.getClientId();
        boolean boolean42 = accessToken38.isClientOnly();
        java.lang.String str43 = accessToken38.getToken();
        java.lang.String str44 = accessToken38.getToken();
        boolean boolean45 = accessToken38.isRefreshTokenExpired();
        java.lang.String str46 = osiamGroupService2.extractErrorMessageForbidden(accessToken38);
        javax.ws.rs.client.WebTarget webTarget47 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget48 = osiamGroupService2.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = osiamGroupService2.extractErrorMessage("org.osiam.client.exception.NoResultException: authorization_code", statusType50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(accessToken10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(query22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str23, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "descending" + "'", str24, "descending");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Insufficient scopes: []" + "'", str31, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Bearer " + "'", str43, "Bearer ");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Bearer " + "'", str44, "Bearer ");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget47);
        org.junit.Assert.assertNotNull(webTarget48);
    }

    @Test
    public void test12457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12457");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getUserName();
        java.lang.String str14 = accessToken11.getUserName();
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        java.lang.String str23 = accessToken21.getClientId();
        boolean boolean24 = accessToken11.equals((java.lang.Object) accessToken21);
        java.lang.String str25 = accessToken21.getUserId();
        boolean boolean26 = accessToken21.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken21);
        java.lang.String str28 = accessToken21.getToken();
        java.lang.String str29 = accessToken21.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group30 = osiamGroupService3.getGroup("org.osiam.client.exception.ConflictException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME", accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Bearer " + "'", str28, "Bearer ");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test12458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12458");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.AuthService.Builder builder9 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder15 = builder13.setClientSecret("");
        org.osiam.client.AuthService.Builder builder17 = builder15.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService authService18 = builder17.build();
        org.osiam.client.AuthService.Builder builder20 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder22 = builder20.setClientId("ME");
        org.osiam.client.AuthService.Builder builder24 = builder22.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService25 = builder24.build();
        org.osiam.client.OsiamGroupService.Builder builder27 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService28 = builder27.build();
        org.osiam.client.oauth.AccessToken.Builder builder30 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date31 = null;
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setRefreshTokenExpiresAt(date31);
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken35 = builder34.build();
        boolean boolean36 = accessToken35.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet37 = accessToken35.getScopes();
        java.lang.String str38 = osiamGroupService28.extractErrorMessageForbidden(accessToken35);
        boolean boolean39 = accessToken35.isClientOnly();
        java.lang.String str40 = authService25.extractErrorMessageForbidden(accessToken35);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder46.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken49 = builder46.build();
        java.lang.String str50 = accessToken49.toString();
        java.lang.String str51 = authService25.extractErrorMessageForbidden(accessToken49);
        org.osiam.client.oauth.AccessToken.Builder builder53 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date54 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setRefreshTokenExpiresAt(date54);
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken58 = builder57.build();
        java.util.Date date59 = accessToken58.getExpiresAt();
        java.lang.String str60 = accessToken58.getRefreshToken();
        java.lang.String str61 = accessToken58.getType();
        java.lang.String str62 = accessToken58.getClientId();
        java.lang.String str63 = accessToken58.getUserName();
        java.lang.String str64 = authService25.extractErrorMessageForbidden(accessToken58);
        org.osiam.client.exception.UnauthorizedException unauthorizedException66 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int67 = unauthorizedException66.getHttpStatusCode();
        int int68 = unauthorizedException66.getHttpStatusCode();
        java.lang.Throwable[] throwableArray69 = unauthorizedException66.getSuppressed();
        boolean boolean70 = accessToken58.equals((java.lang.Object) unauthorizedException66);
        java.lang.String str71 = accessToken58.toString();
        java.lang.String str72 = accessToken58.getToken();
        java.lang.String str73 = authService18.extractErrorMessageForbidden(accessToken58);
        // The following exception was thrown during execution in test generation
        try {
            osiamConnector7.revokeAccessToken(accessToken58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(authService18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(authService25);
        org.junit.Assert.assertNotNull(osiamGroupService28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(accessToken35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(scopeSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Insufficient scopes: []" + "'", str38, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str50, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Insufficient scopes: []" + "'", str51, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(accessToken58);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Insufficient scopes: []" + "'", str64, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 401 + "'", int67 == 401);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 401 + "'", int68 == 401);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str71, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Bearer " + "'", str72, "Bearer ");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Insufficient scopes: []" + "'", str73, "Insufficient scopes: []");
    }

    @Test
    public void test12459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12459");
        org.osiam.client.exception.OsiamRequestException osiamRequestException3 = new org.osiam.client.exception.OsiamRequestException((int) (short) -1, "org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        int int4 = osiamRequestException3.getHttpStatusCode();
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]", (java.lang.Throwable) osiamRequestException3);
        java.lang.String str6 = connectionInitializationException5.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str6, "org.osiam.client.exception.ConnectionInitializationException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
    }

    @Test
    public void test12460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12460");
        org.osiam.client.exception.OsiamClientException osiamClientException2 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.OsiamRequestException: descending");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException3 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.NoResultException: refresh_token", (java.lang.Throwable) osiamClientException2);
    }

    @Test
    public void test12461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12461");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType4 = null;
        org.osiam.client.OsiamGroupService.Builder builder6 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService7 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService8 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder6.build();
        org.osiam.client.OsiamGroupService osiamGroupService10 = builder6.build();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.PUT;
        java.lang.String str12 = scope11.toString();
        org.osiam.client.oauth.AccessToken.Builder builder14 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date15 = null;
        org.osiam.client.oauth.AccessToken.Builder builder16 = builder14.setRefreshTokenExpiresAt(date15);
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder14.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken19 = builder18.build();
        boolean boolean20 = accessToken19.isRefreshTokenExpired();
        java.lang.String str21 = accessToken19.getUserId();
        boolean boolean22 = accessToken19.isRefreshTokenExpired();
        java.lang.String str23 = accessToken19.getRefreshToken();
        boolean boolean24 = scope11.equals((java.lang.Object) accessToken19);
        java.lang.String str25 = osiamGroupService10.extractErrorMessageForbidden(accessToken19);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date28 = null;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setRefreshTokenExpiresAt(date28);
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder27.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken32 = builder31.build();
        java.util.Date date33 = accessToken32.getExpiresAt();
        java.lang.String str34 = accessToken32.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken32);
        org.osiam.client.oauth.AccessToken.Builder builder37 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date38 = null;
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder37.setRefreshTokenExpiresAt(date38);
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder37.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken42 = builder41.build();
        boolean boolean43 = accessToken42.isRefreshTokenExpired();
        boolean boolean44 = accessToken42.isClientOnly();
        java.lang.String str45 = accessToken42.getClientId();
        boolean boolean46 = accessToken42.isClientOnly();
        boolean boolean47 = accessToken32.equals((java.lang.Object) accessToken42);
        java.lang.String str48 = accessToken32.getToken();
        java.lang.String str49 = osiamGroupService10.extractErrorMessageForbidden(accessToken32);
        org.osiam.client.oauth.AccessToken.Builder builder51 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date52 = null;
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setRefreshTokenExpiresAt(date52);
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder51.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken56 = builder55.build();
        boolean boolean57 = accessToken56.isRefreshTokenExpired();
        java.lang.String str58 = accessToken56.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder59 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder61 = queryBuilder59.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder63 = queryBuilder61.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder65 = queryBuilder61.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder67 = queryBuilder65.descending("hi!");
        org.osiam.client.query.Query query68 = queryBuilder67.build();
        java.lang.String str69 = query68.toString();
        java.lang.String str70 = query68.getSortOrder();
        java.lang.String str71 = query68.getSortBy();
        java.lang.String str72 = query68.getFilter();
        java.lang.String str73 = query68.getSortOrder();
        java.lang.String str74 = query68.getAttributes();
        boolean boolean75 = accessToken56.equals((java.lang.Object) query68);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet76 = accessToken56.getScopes();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet77 = accessToken56.getScopes();
        boolean boolean78 = accessToken56.isClientOnly();
        java.lang.String str79 = osiamGroupService10.extractErrorMessageForbidden(accessToken56);
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService2.checkAndHandleResponse("org.osiam.client.exception.OsiamClientException: descending", statusType4, accessToken56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService7);
        org.junit.Assert.assertNotNull(osiamGroupService8);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(osiamGroupService10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PUT" + "'", str12, "PUT");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(accessToken19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Insufficient scopes: []" + "'", str25, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(accessToken32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(accessToken42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Bearer " + "'", str48, "Bearer ");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Insufficient scopes: []" + "'", str49, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(accessToken56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(queryBuilder61);
        org.junit.Assert.assertNotNull(queryBuilder63);
        org.junit.Assert.assertNotNull(queryBuilder65);
        org.junit.Assert.assertNotNull(queryBuilder67);
        org.junit.Assert.assertNotNull(query68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str69, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "descending" + "'", str70, "descending");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "descending" + "'", str73, "descending");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Authorization" + "'", str74, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(scopeSet76);
        org.junit.Assert.assertNotNull(scopeSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Insufficient scopes: []" + "'", str79, "Insufficient scopes: []");
    }

    @Test
    public void test12462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12462");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder4 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date5 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder4.setRefreshTokenExpiresAt(date5);
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder4.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken9 = builder8.build();
        java.util.Date date10 = accessToken9.getExpiresAt();
        java.lang.String str11 = accessToken9.getRefreshToken();
        boolean boolean12 = accessToken9.isClientOnly();
        java.lang.String str13 = osiamGroupService2.extractErrorMessageForbidden(accessToken9);
        org.osiam.client.oauth.AccessToken.Builder builder15 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date16 = null;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder15.setRefreshTokenExpiresAt(date16);
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder15.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken20 = builder19.build();
        java.util.Date date21 = accessToken20.getExpiresAt();
        java.lang.String str22 = accessToken20.getUserName();
        java.util.Date date23 = accessToken20.getRefreshTokenExpiresAt();
        java.lang.String str24 = osiamGroupService2.extractErrorMessageForbidden(accessToken20);
        org.osiam.client.AuthService.Builder builder26 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder28 = builder26.setClientId("ME");
        org.osiam.client.AuthService.Builder builder30 = builder28.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService31 = builder30.build();
        org.osiam.client.OsiamGroupService.Builder builder33 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService34 = builder33.build();
        org.osiam.client.oauth.AccessToken.Builder builder36 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date37 = null;
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setRefreshTokenExpiresAt(date37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken41 = builder40.build();
        boolean boolean42 = accessToken41.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet43 = accessToken41.getScopes();
        java.lang.String str44 = osiamGroupService34.extractErrorMessageForbidden(accessToken41);
        boolean boolean45 = accessToken41.isClientOnly();
        java.lang.String str46 = authService31.extractErrorMessageForbidden(accessToken41);
        org.osiam.client.oauth.AccessToken.Builder builder48 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date49 = null;
        org.osiam.client.oauth.AccessToken.Builder builder50 = builder48.setRefreshTokenExpiresAt(date49);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder48.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken55 = builder52.build();
        java.lang.String str56 = accessToken55.toString();
        java.lang.String str57 = authService31.extractErrorMessageForbidden(accessToken55);
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date60 = null;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.setRefreshTokenExpiresAt(date60);
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder59.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken64 = builder63.build();
        java.util.Date date65 = accessToken64.getExpiresAt();
        java.lang.String str66 = accessToken64.getRefreshToken();
        java.lang.String str67 = accessToken64.getType();
        java.lang.String str68 = accessToken64.getClientId();
        java.lang.String str69 = accessToken64.getUserName();
        java.lang.String str70 = authService31.extractErrorMessageForbidden(accessToken64);
        org.osiam.client.exception.UnauthorizedException unauthorizedException72 = new org.osiam.client.exception.UnauthorizedException("client_credentials");
        int int73 = unauthorizedException72.getHttpStatusCode();
        int int74 = unauthorizedException72.getHttpStatusCode();
        java.lang.Throwable[] throwableArray75 = unauthorizedException72.getSuppressed();
        boolean boolean76 = accessToken64.equals((java.lang.Object) unauthorizedException72);
        java.lang.String str77 = accessToken64.getType();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet78 = accessToken64.getScopes();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken64);
        java.lang.String str80 = osiamGroupService2.extractErrorMessageForbidden(accessToken64);
        org.osiam.resources.scim.Group group82 = null;
        org.osiam.client.oauth.AccessToken.Builder builder84 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date85 = null;
        org.osiam.client.oauth.AccessToken.Builder builder86 = builder84.setRefreshTokenExpiresAt(date85);
        org.osiam.client.oauth.AccessToken.Builder builder88 = builder84.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken89 = builder88.build();
        boolean boolean90 = accessToken89.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet91 = accessToken89.getScopes();
        java.lang.String str92 = accessToken89.getUserId();
        java.util.Date date93 = accessToken89.getExpiresAt();
        java.util.Date date94 = accessToken89.getExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group95 = osiamGroupService2.replaceGroup("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ", group82, accessToken89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(accessToken9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Insufficient scopes: []" + "'", str13, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(accessToken20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Insufficient scopes: []" + "'", str24, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(authService31);
        org.junit.Assert.assertNotNull(osiamGroupService34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(accessToken41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(scopeSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Insufficient scopes: []" + "'", str44, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Insufficient scopes: []" + "'", str46, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(accessToken55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str56, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Insufficient scopes: []" + "'", str57, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(accessToken64);
        org.junit.Assert.assertNotNull(date65);
        org.junit.Assert.assertEquals(date65.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Insufficient scopes: []" + "'", str70, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 401 + "'", int73 == 401);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 401 + "'", int74 == 401);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(scopeSet78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Insufficient scopes: []" + "'", str80, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(accessToken89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(scopeSet91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(date93);
        org.junit.Assert.assertEquals(date93.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date94);
        org.junit.Assert.assertEquals(date94.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12463");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("Bearer ");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget3 = osiamGroupService2.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder5 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date6 = null;
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setRefreshTokenExpiresAt(date6);
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken12 = builder9.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.toString();
        java.lang.String str15 = accessToken12.toString();
        java.util.Date date16 = accessToken12.getExpiresAt();
        java.lang.String str17 = osiamGroupService2.extractErrorMessageForbidden(accessToken12);
        org.osiam.resources.scim.Group group18 = null;
        org.osiam.client.OsiamGroupService.Builder builder20 = new org.osiam.client.OsiamGroupService.Builder("Authorization");
        org.osiam.client.OsiamGroupService osiamGroupService21 = builder20.build();
        javax.ws.rs.client.WebTarget webTarget22 = osiamGroupService21.targetEndpoint;
        org.osiam.client.OsiamGroupService.Builder builder24 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService25 = builder24.build();
        org.osiam.client.OsiamGroupService osiamGroupService26 = builder24.build();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder28.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken33 = builder32.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        java.lang.String str35 = osiamGroupService26.extractErrorMessageForbidden(accessToken33);
        java.util.Date date36 = accessToken33.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken33);
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ADMIN;
        boolean boolean39 = accessToken33.equals((java.lang.Object) scope38);
        java.lang.String str40 = accessToken33.getRefreshToken();
        java.lang.String str41 = accessToken33.getToken();
        java.lang.String str42 = accessToken33.getUserId();
        java.lang.String str43 = osiamGroupService21.extractErrorMessageForbidden(accessToken33);
        org.osiam.client.oauth.AccessToken.Builder builder45 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date46 = null;
        org.osiam.client.oauth.AccessToken.Builder builder47 = builder45.setRefreshTokenExpiresAt(date46);
        org.osiam.client.oauth.AccessToken.Builder builder49 = builder45.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder49.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken52 = builder49.build();
        java.util.Date date53 = accessToken52.getExpiresAt();
        java.lang.String str54 = accessToken52.getClientId();
        java.lang.String str55 = accessToken52.getType();
        java.lang.String str56 = osiamGroupService21.extractErrorMessageForbidden(accessToken52);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group57 = osiamGroupService2.createGroup(group18, accessToken52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(webTarget3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str14, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str15, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Insufficient scopes: []" + "'", str17, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService21);
        org.junit.Assert.assertNotNull(webTarget22);
        org.junit.Assert.assertNotNull(osiamGroupService25);
        org.junit.Assert.assertNotNull(osiamGroupService26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(accessToken33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Bearer " + "'", str41, "Bearer ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Insufficient scopes: []" + "'", str43, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(accessToken52);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Insufficient scopes: []" + "'", str56, "Insufficient scopes: []");
    }

    @Test
    public void test12464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12464");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder17 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder19 = builder17.addScope(scope18);
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException22 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean23 = scope20.equals((java.lang.Object) invalidAttributeException22);
        java.lang.String str24 = scope20.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder25 = builder17.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder26 = builder13.addScope(scope20);
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.addScope(scope29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException33 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean34 = scope31.equals((java.lang.Object) invalidAttributeException33);
        java.lang.String str35 = scope31.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder28.addScope(scope31);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserId("");
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.addScope(scope41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date45 = null;
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder44.setRefreshTokenExpiresAt(date45);
        org.osiam.client.oauth.AccessToken.Builder builder48 = builder44.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken49 = builder48.build();
        java.util.Date date50 = accessToken49.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder40.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder52 = builder13.setRefreshTokenExpiresAt(date50);
        org.osiam.client.oauth.AccessToken.Builder builder54 = builder52.setRefreshToken("");
        org.osiam.client.oauth.AccessToken.Builder builder56 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date57 = null;
        org.osiam.client.oauth.AccessToken.Builder builder58 = builder56.setRefreshTokenExpiresAt(date57);
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder56.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken61 = builder60.build();
        java.util.Date date62 = accessToken61.getExpiresAt();
        java.util.Date date63 = accessToken61.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder64 = builder52.setRefreshTokenExpiresAt(date63);
        org.osiam.client.oauth.AccessToken accessToken65 = builder52.build();
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder52.setUserId("DELETE");
        org.osiam.client.oauth.AccessToken.Builder builder69 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date70 = null;
        org.osiam.client.oauth.AccessToken.Builder builder71 = builder69.setRefreshTokenExpiresAt(date70);
        org.osiam.client.oauth.AccessToken.Builder builder73 = builder69.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken74 = builder73.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken74);
        java.util.Date date76 = accessToken74.getExpiresAt();
        boolean boolean77 = accessToken74.isRefreshTokenExpired();
        java.util.Date date78 = accessToken74.getExpiresAt();
        java.util.Date date79 = accessToken74.getRefreshTokenExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder52.setExpiresAt(date79);
        org.osiam.client.oauth.AccessToken.Builder builder82 = new org.osiam.client.oauth.AccessToken.Builder("client_credentials");
        org.osiam.client.oauth.AccessToken accessToken83 = builder82.build();
        java.lang.String str84 = accessToken83.toString();
        java.lang.String str85 = accessToken83.getToken();
        boolean boolean86 = accessToken83.isExpired();
        java.lang.String str87 = accessToken83.getClientId();
        boolean boolean88 = accessToken83.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet89 = accessToken83.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder90 = builder52.addScopes(scopeSet89);
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(accessToken49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(accessToken61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(accessToken65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(accessToken74);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(accessToken83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str84, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "client_credentials" + "'", str85, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(scopeSet89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test12465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12465");
        org.osiam.client.helper.ScopeDeserializer scopeDeserializer0 = new org.osiam.client.helper.ScopeDeserializer();
        java.lang.Class<?> wildcardClass1 = scopeDeserializer0.handledType();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer2 = scopeDeserializer0.getDelegatee();
        java.util.Collection<java.lang.Object> objCollection3 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer4 = null;
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer5 = scopeDeserializer0.unwrappingDeserializer(nameTransformer4);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet6 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection7 = scopeDeserializer0.getKnownPropertyNames();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet8 = scopeDeserializer0.getNullValue();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = scopeDeserializer0.getEmptyValue();
        boolean boolean10 = scopeDeserializer0.isCachable();
        com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer11 = scopeDeserializer0.getDelegatee();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet12 = scopeDeserializer0.getEmptyValue();
        java.util.Collection<java.lang.Object> objCollection13 = scopeDeserializer0.getKnownPropertyNames();
        com.fasterxml.jackson.databind.JsonDeserializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonDeserializer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonDeserializer<?> wildcardJsonDeserializer15 = scopeDeserializer0.replaceDelegatee(scopeSetJsonDeserializer14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(wildcardJsonDeserializer2);
        org.junit.Assert.assertNull(objCollection3);
        org.junit.Assert.assertNotNull(scopeSetJsonDeserializer5);
        org.junit.Assert.assertNull(scopeSet6);
        org.junit.Assert.assertNull(objCollection7);
        org.junit.Assert.assertNull(scopeSet8);
        org.junit.Assert.assertNull(scopeSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardJsonDeserializer11);
        org.junit.Assert.assertNull(scopeSet12);
        org.junit.Assert.assertNull(objCollection13);
    }

    @Test
    public void test12466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12466");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder6.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector9 = builder6.build();
        org.osiam.client.OsiamConnector.Builder builder11 = builder6.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder13 = builder11.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector14 = builder11.build();
        org.osiam.client.query.QueryBuilder queryBuilder15 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder21.descending("hi!");
        org.osiam.client.query.Query query24 = queryBuilder23.build();
        java.lang.String str25 = query24.toString();
        java.lang.String str26 = query24.getSortOrder();
        java.lang.String str27 = query24.getSortBy();
        java.lang.String str28 = query24.getFilter();
        java.lang.String str29 = query24.getSortOrder();
        java.lang.String str30 = query24.getAttributes();
        org.osiam.client.query.QueryBuilder queryBuilder31 = new org.osiam.client.query.QueryBuilder(query24);
        long long32 = query24.getStartIndex();
        org.osiam.client.query.Query query33 = query24.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder34 = new org.osiam.client.query.QueryBuilder(query33);
        org.osiam.client.query.Query query35 = query33.nextPage();
        org.osiam.client.OsiamGroupService.Builder builder37 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService38 = builder37.build();
        org.osiam.client.OsiamGroupService osiamGroupService39 = builder37.build();
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken46);
        java.lang.String str48 = osiamGroupService39.extractErrorMessageForbidden(accessToken46);
        java.util.Date date49 = accessToken46.getExpiresAt();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken46);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken46);
        java.lang.String str52 = accessToken46.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.Group> groupSCIMSearchResult53 = osiamConnector14.searchGroups(query33, accessToken46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(osiamConnector9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(osiamConnector14);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(query24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str25, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "descending" + "'", str26, "descending");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "descending" + "'", str29, "descending");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Authorization" + "'", str30, "Authorization");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(query33);
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(osiamGroupService38);
        org.junit.Assert.assertNotNull(osiamGroupService39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Insufficient scopes: []" + "'", str48, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test12467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12467");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setClientSecret("PATCH");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientId("org.osiam.client.exception.OsiamClientException: PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder2.setAuthServerEndpoint("org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.OsiamConnector.Builder builder8 = builder2.setResourceServerEndpoint("org.osiam.client.exception.ConnectionInitializationException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder10 = builder2.setAuthServerEndpoint("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.ConflictException: ");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientSecret("org.osiam.client.exception.ConflictException: org.osiam.client.exception.UnauthorizedException: PATCH");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test12468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12468");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.QueryBuilder queryBuilder13 = new org.osiam.client.query.QueryBuilder(query9);
        java.lang.String str14 = query9.toString();
        java.lang.String str15 = query9.getFilter();
        java.lang.String str16 = query9.getSortOrder();
        java.lang.String str17 = query9.getAttributes();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str14, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "descending" + "'", str16, "descending");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Authorization" + "'", str17, "Authorization");
    }

    @Test
    public void test12469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12469");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService4 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService5 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService6 = builder1.build();
        org.osiam.resources.scim.User user7 = null;
        org.osiam.client.AuthService.Builder builder9 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder11 = builder9.setClientId("ME");
        org.osiam.client.AuthService.Builder builder13 = builder11.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService14 = builder13.build();
        org.osiam.client.OsiamGroupService.Builder builder16 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService17 = builder16.build();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date20 = null;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.setRefreshTokenExpiresAt(date20);
        org.osiam.client.oauth.AccessToken.Builder builder23 = builder19.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken24 = builder23.build();
        boolean boolean25 = accessToken24.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet26 = accessToken24.getScopes();
        java.lang.String str27 = osiamGroupService17.extractErrorMessageForbidden(accessToken24);
        boolean boolean28 = accessToken24.isClientOnly();
        java.lang.String str29 = authService14.extractErrorMessageForbidden(accessToken24);
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder37 = builder35.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken accessToken38 = builder35.build();
        java.lang.String str39 = accessToken38.toString();
        java.lang.String str40 = authService14.extractErrorMessageForbidden(accessToken38);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        java.util.Date date48 = accessToken47.getExpiresAt();
        java.lang.String str49 = accessToken47.getRefreshToken();
        java.lang.String str50 = accessToken47.getType();
        java.lang.String str51 = accessToken47.getClientId();
        java.lang.String str52 = accessToken47.getUserName();
        java.lang.String str53 = authService14.extractErrorMessageForbidden(accessToken47);
        org.osiam.client.OsiamGroupService.Builder builder55 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService56 = builder55.build();
        org.osiam.client.oauth.AccessToken.Builder builder58 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date59 = null;
        org.osiam.client.oauth.AccessToken.Builder builder60 = builder58.setRefreshTokenExpiresAt(date59);
        org.osiam.client.oauth.AccessToken.Builder builder62 = builder58.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken63 = builder62.build();
        boolean boolean64 = accessToken63.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet65 = accessToken63.getScopes();
        java.lang.String str66 = osiamGroupService56.extractErrorMessageForbidden(accessToken63);
        java.lang.String str67 = authService14.extractErrorMessageForbidden(accessToken63);
        boolean boolean68 = accessToken63.isRefreshTokenExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user69 = osiamUserService6.createUser(user7, accessToken63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given User must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(osiamUserService4);
        org.junit.Assert.assertNotNull(osiamUserService5);
        org.junit.Assert.assertNotNull(osiamUserService6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(authService14);
        org.junit.Assert.assertNotNull(osiamGroupService17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(accessToken24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(scopeSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Insufficient scopes: []" + "'", str27, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(accessToken38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]" + "'", str39, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Insufficient scopes: []" + "'", str40, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(accessToken63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(scopeSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Insufficient scopes: []" + "'", str66, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Insufficient scopes: []" + "'", str67, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test12470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12470");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("Bearer ");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.client.OsiamUserService osiamUserService3 = builder1.build();
        org.osiam.client.query.QueryBuilder queryBuilder4 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder4.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder6.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.descending("hi!");
        org.osiam.client.query.Query query13 = queryBuilder12.build();
        org.osiam.client.query.Query query14 = queryBuilder12.build();
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder12.filter("org.osiam.client.exception.NoResultException: authorization_code");
        org.osiam.client.query.Query query17 = queryBuilder12.build();
        java.lang.String str18 = query17.getAttributes();
        org.osiam.client.query.Query query19 = query17.nextPage();
        org.osiam.client.AuthService.Builder builder21 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder23 = builder21.setClientId("ME");
        org.osiam.client.AuthService.Builder builder25 = builder23.setClientSecret("Bearer ");
        org.osiam.client.AuthService authService26 = builder25.build();
        org.osiam.client.OsiamGroupService.Builder builder28 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService29 = builder28.build();
        org.osiam.client.oauth.AccessToken.Builder builder31 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date32 = null;
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setRefreshTokenExpiresAt(date32);
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder31.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken36 = builder35.build();
        boolean boolean37 = accessToken36.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet38 = accessToken36.getScopes();
        java.lang.String str39 = osiamGroupService29.extractErrorMessageForbidden(accessToken36);
        boolean boolean40 = accessToken36.isClientOnly();
        java.lang.String str41 = authService26.extractErrorMessageForbidden(accessToken36);
        java.lang.String str42 = accessToken36.getUserId();
        java.lang.String str43 = accessToken36.getToken();
        java.lang.String str44 = accessToken36.getUserId();
        boolean boolean45 = accessToken36.isExpired();
        java.lang.String str46 = accessToken36.getClientId();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.SCIMSearchResult<org.osiam.resources.scim.User> userSCIMSearchResult47 = osiamUserService3.searchUsers(query17, accessToken36);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(osiamUserService3);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertNotNull(query14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Authorization" + "'", str18, "Authorization");
        org.junit.Assert.assertNotNull(query19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(authService26);
        org.junit.Assert.assertNotNull(osiamGroupService29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(accessToken36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(scopeSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Insufficient scopes: []" + "'", str39, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Insufficient scopes: []" + "'", str41, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Bearer " + "'", str43, "Bearer ");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test12471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12471");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder1.setRefreshToken("Bearer ");
        org.osiam.client.oauth.AccessToken accessToken12 = builder1.build();
        java.util.Date date13 = accessToken12.getExpiresAt();
        java.lang.String str14 = accessToken12.getType();
        java.lang.String str15 = accessToken12.getType();
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(accessToken12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test12472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12472");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setClientRedirectUri("authorization_code");
        org.osiam.client.OsiamConnector.Builder builder10 = builder8.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder12 = builder10.setClientId("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder14 = builder12.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.osiam.client.OsiamConnector.Builder builder16 = builder14.setAuthServerEndpoint("refresh_token");
        org.osiam.client.OsiamConnector.Builder builder18 = builder14.setAuthServerEndpoint("org.osiam.client.exception.OsiamClientException: descending");
        org.osiam.client.OsiamConnector osiamConnector19 = builder18.build();
        org.osiam.client.oauth.AccessToken accessToken20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser21 = osiamConnector19.getCurrentUserBasic(accessToken20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given accessToken must not be null.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(osiamConnector19);
    }

    @Test
    public void test12473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12473");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setUserId("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder5.setClientId("ME");
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder5.setUserId("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshToken("DELETE");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        java.lang.String str15 = accessToken14.getRefreshToken();
        java.lang.String str16 = accessToken14.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken14);
        java.util.Date date18 = accessToken14.getExpiresAt();
        java.lang.String str19 = accessToken14.getUserId();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DELETE" + "'", str15, "DELETE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DELETE" + "'", str16, "DELETE");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str19, "AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
    }

    @Test
    public void test12474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12474");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService4.targetEndpoint;
        org.osiam.resources.scim.Group group8 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date11 = null;
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder10.setRefreshTokenExpiresAt(date11);
        org.osiam.client.oauth.AccessToken.Builder builder14 = builder10.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken15 = builder14.build();
        boolean boolean16 = accessToken15.isRefreshTokenExpired();
        java.lang.String str17 = accessToken15.getUserId();
        java.lang.String str18 = accessToken15.getToken();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group19 = osiamGroupService4.updateGroup("Bearer ", group8, accessToken15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(accessToken15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Bearer " + "'", str18, "Bearer ");
    }

    @Test
    public void test12475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12475");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setType("AccessToken [token=client_credentials, expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder7 = builder5.setType("Authorization");
        org.osiam.client.oauth.Scope scope8 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str9 = scope8.toString();
        java.lang.String str10 = scope8.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder7.addScope(scope8);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ME" + "'", str9, "ME");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ME" + "'", str10, "ME");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test12476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12476");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer53 = scopeSerializer0.getDelegatee();
        boolean boolean54 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.Scope scope55 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.AccessToken.Builder builder57 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date58 = null;
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder57.setRefreshTokenExpiresAt(date58);
        org.osiam.client.oauth.AccessToken.Builder builder61 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date62 = null;
        org.osiam.client.oauth.AccessToken.Builder builder63 = builder61.setRefreshTokenExpiresAt(date62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder61.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken66 = builder65.build();
        java.util.Date date67 = accessToken66.getExpiresAt();
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder57.setRefreshTokenExpiresAt(date67);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder57.setType("descending");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder57.setUserId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        boolean boolean80 = accessToken79.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet81 = accessToken79.getScopes();
        org.osiam.client.oauth.AccessToken.Builder builder82 = builder72.addScopes(scopeSet81);
        boolean boolean83 = scope55.equals((java.lang.Object) scopeSet81);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider85 = null;
        scopeSerializer0.serialize(scopeSet81, jsonGenerator84, serializerProvider85);
        boolean boolean87 = scopeSerializer0.isUnwrappingSerializer();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNull(wildcardJsonSerializer53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(scope55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(accessToken66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(scopeSet81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test12477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12477");
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException3 = new org.osiam.client.exception.InvalidAttributeException("refresh_token");
        org.osiam.client.exception.OsiamClientException osiamClientException4 = new org.osiam.client.exception.OsiamClientException("org.osiam.client.exception.ForbiddenException: org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.ConnectionInitializationException: descending", (java.lang.Throwable) invalidAttributeException3);
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException5 = new org.osiam.client.exception.ConnectionInitializationException("org.osiam.client.exception.OsiamRequestException: ", (java.lang.Throwable) invalidAttributeException3);
    }

    @Test
    public void test12478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12478");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.usesObjectId();
        org.osiam.client.oauth.AccessToken.Builder builder3 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder3.setRefreshTokenExpiresAt(date4);
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope7 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException9 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean10 = scope7.equals((java.lang.Object) invalidAttributeException9);
        java.lang.String str11 = scope7.getValue();
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope13 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str14 = scope13.toString();
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str17 = scope16.getValue();
        java.lang.String str18 = scope16.getValue();
        org.osiam.client.oauth.Scope scope19 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException21 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean22 = scope19.equals((java.lang.Object) invalidAttributeException21);
        java.lang.String str23 = scope19.getValue();
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException29 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean30 = scope27.equals((java.lang.Object) invalidAttributeException29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        boolean boolean35 = scope33.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope36 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray37 = new org.osiam.client.oauth.Scope[] { scope6, scope7, scope12, scope13, scope15, scope16, scope19, scope24, scope25, scope26, scope27, scope31, scope32, scope33, scope36 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet38 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet38, scopeArray37);
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder3.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        boolean boolean41 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet38);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass42 = scopeSerializer0.handledType();
        com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer43 = scopeSerializer0.getDelegatee();
        boolean boolean44 = scopeSerializer0.usesObjectId();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertNotNull(scope7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNotNull(scope13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ME" + "'", str14, "ME");
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PATCH" + "'", str18, "PATCH");
        org.junit.Assert.assertNotNull(scope19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scope36);
        org.junit.Assert.assertNotNull(scopeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(scopeSetClass42);
        org.junit.Assert.assertNull(wildcardJsonSerializer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test12479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12479");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group4 = osiamGroupService2.mapToResource("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.OsiamClientException; message: Unable to parse Group: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        } catch (org.osiam.client.exception.OsiamClientException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
    }

    @Test
    public void test12480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12480");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService4.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        boolean boolean16 = accessToken14.isClientOnly();
        java.lang.String str17 = accessToken14.getRefreshToken();
        boolean boolean18 = accessToken14.isExpired();
        boolean boolean19 = accessToken14.isRefreshTokenExpired();
        java.lang.String str20 = accessToken14.getToken();
        java.util.Date date21 = accessToken14.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            osiamGroupService4.checkAndHandleResponse("refresh_token", statusType7, accessToken14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Bearer " + "'", str20, "Bearer ");
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }

    @Test
    public void test12481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12481");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(0);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.attributes("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder17.ascending("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.attributes("Insufficient scopes: [GET, GET POST PUT PATCH DELETE]");
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
    }

    @Test
    public void test12482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12482");
        org.osiam.client.exception.OsiamClientException osiamClientException3 = new org.osiam.client.exception.OsiamClientException("GET POST PUT PATCH DELETE");
        org.osiam.client.exception.ConnectionInitializationException connectionInitializationException4 = new org.osiam.client.exception.ConnectionInitializationException("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET POST PUT PATCH DELETE], refreshTokenId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=refresh_token, userId=org.osiam.client.exception.ConflictException: PATCH, userName=]", (java.lang.Throwable) osiamClientException3);
        org.osiam.client.exception.OsiamClientException osiamClientException5 = new org.osiam.client.exception.OsiamClientException("Insufficient scopes: [GET POST PUT PATCH DELETE]", (java.lang.Throwable) connectionInitializationException4);
    }

    @Test
    public void test12483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12483");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("PUT");
        org.osiam.client.AuthService authService2 = builder1.build();
        org.osiam.client.AuthService.Builder builder4 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder6 = builder4.setClientId("ME");
        org.osiam.client.AuthService.Builder builder8 = builder6.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder10 = builder8.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder12 = builder10.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService13 = builder12.build();
        org.osiam.client.OsiamGroupService.Builder builder15 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder15.build();
        org.osiam.client.oauth.AccessToken.Builder builder18 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date19 = null;
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder18.setRefreshTokenExpiresAt(date19);
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder18.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken23 = builder22.build();
        boolean boolean24 = accessToken23.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet25 = accessToken23.getScopes();
        java.lang.String str26 = osiamGroupService16.extractErrorMessageForbidden(accessToken23);
        boolean boolean27 = accessToken23.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        java.lang.String str29 = authService13.extractErrorMessageForbidden(accessToken23);
        java.lang.String str30 = accessToken23.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken23);
        org.osiam.client.AuthService.Builder builder33 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder35 = builder33.setClientId("ME");
        org.osiam.client.AuthService.Builder builder37 = builder35.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder39 = builder37.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder41 = builder39.setClientSecret("client_credentials");
        org.osiam.client.AuthService.Builder builder43 = builder39.setClientId("");
        org.osiam.client.AuthService.Builder builder45 = builder39.setClientRedirectUri("Authorization");
        org.osiam.client.AuthService authService46 = builder45.build();
        org.osiam.client.OsiamConnector.Builder builder47 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder49 = builder47.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder51 = builder49.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder53 = builder51.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder55 = builder53.setClientRedirectUri("GET");
        org.osiam.client.OsiamConnector osiamConnector56 = builder53.build();
        org.osiam.client.OsiamConnector.Builder builder58 = builder53.setAuthServerEndpoint("Cannot connect to server");
        org.osiam.client.OsiamConnector.Builder builder60 = builder58.setClientId("org.osiam.client.exception.NoResultException: AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector osiamConnector61 = builder58.build();
        org.osiam.client.AuthService.Builder builder63 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder65 = builder63.setClientId("ME");
        org.osiam.client.AuthService.Builder builder67 = builder65.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder69 = builder67.setClientRedirectUri("authorization_code");
        org.osiam.client.AuthService.Builder builder71 = builder69.setClientRedirectUri("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService72 = builder71.build();
        org.osiam.client.oauth.AccessToken.Builder builder74 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date75 = null;
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder74.setRefreshTokenExpiresAt(date75);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder74.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken79 = builder78.build();
        boolean boolean80 = accessToken79.isRefreshTokenExpired();
        java.lang.String str81 = accessToken79.getUserId();
        java.lang.String str82 = accessToken79.getToken();
        java.lang.String str83 = authService72.extractErrorMessageForbidden(accessToken79);
        org.osiam.client.oauth.Scope scope84 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str85 = scope84.getValue();
        java.lang.String str86 = scope84.toString();
        org.osiam.client.oauth.Scope scope87 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope[] scopeArray88 = new org.osiam.client.oauth.Scope[] { scope84, scope87 };
        java.net.URI uRI89 = authService72.getAuthorizationUri(scopeArray88);
        java.net.URI uRI90 = osiamConnector61.getAuthorizationUri(scopeArray88);
        java.net.URI uRI91 = authService46.getAuthorizationUri(scopeArray88);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.oauth.AccessToken accessToken92 = authService2.refreshAccessToken(accessToken23, scopeArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The client id can't be null or empty.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(authService2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(authService13);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(accessToken23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(scopeSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Insufficient scopes: []" + "'", str26, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Insufficient scopes: []" + "'", str29, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(authService46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(osiamConnector56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(osiamConnector61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(authService72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(accessToken79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Bearer " + "'", str82, "Bearer ");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Insufficient scopes: []" + "'", str83, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "PATCH" + "'", str85, "PATCH");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PATCH" + "'", str86, "PATCH");
        org.junit.Assert.assertNotNull(scope87);
        org.junit.Assert.assertNotNull(scopeArray88);
        org.junit.Assert.assertNotNull(uRI89);
        org.junit.Assert.assertNotNull(uRI90);
        org.junit.Assert.assertNotNull(uRI91);
    }

    @Test
    public void test12484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12484");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.toString();
        java.lang.String str12 = query9.getSortOrder();
        java.lang.String str13 = query9.getFilter();
        int int14 = query9.getCount();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str11, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "descending" + "'", str12, "descending");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test12485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12485");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("ME");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.core.Response.StatusType statusType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = osiamGroupService3.extractErrorMessageDefault("ascending", statusType5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
    }

    @Test
    public void test12486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12486");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector.Builder builder8 = builder4.setResourceServerEndpoint("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamConnector.Builder builder10 = builder4.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector osiamConnector11 = builder10.build();
        org.osiam.client.OsiamGroupService.Builder builder13 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.OsiamGroupService osiamGroupService14 = builder13.build();
        org.osiam.client.OsiamGroupService osiamGroupService15 = builder13.build();
        org.osiam.client.OsiamGroupService osiamGroupService16 = builder13.build();
        javax.ws.rs.client.WebTarget webTarget17 = osiamGroupService16.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget18 = osiamGroupService16.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date21 = null;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.setRefreshTokenExpiresAt(date21);
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder20.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken25 = builder24.build();
        boolean boolean26 = accessToken25.isRefreshTokenExpired();
        java.lang.String str27 = accessToken25.getUserName();
        org.osiam.client.query.QueryBuilder queryBuilder28 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder30 = queryBuilder28.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder32 = queryBuilder30.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder34 = queryBuilder30.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder36 = queryBuilder34.descending("hi!");
        org.osiam.client.query.Query query37 = queryBuilder36.build();
        java.lang.String str38 = query37.toString();
        java.lang.String str39 = query37.getSortOrder();
        java.lang.String str40 = query37.getSortBy();
        java.lang.String str41 = query37.getFilter();
        java.lang.String str42 = query37.getSortOrder();
        java.lang.String str43 = query37.getAttributes();
        boolean boolean44 = accessToken25.equals((java.lang.Object) query37);
        org.osiam.client.OsiamConnector.Builder builder45 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder47 = builder45.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder49 = builder47.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder51 = builder49.setClientRedirectUri("");
        org.osiam.client.OsiamConnector.Builder builder53 = builder49.setClientId("Insufficient scopes: []");
        org.osiam.client.OsiamConnector.Builder builder55 = builder49.setClientId("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.osiam.client.OsiamConnector.Builder builder57 = builder55.setEndpoint("Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamConnector.Builder builder59 = builder55.setClientRedirectUri("PUT");
        boolean boolean60 = accessToken25.equals((java.lang.Object) builder59);
        java.lang.String str61 = accessToken25.getClientId();
        java.lang.String str62 = accessToken25.getToken();
        java.lang.String str63 = osiamGroupService16.extractErrorMessageForbidden(accessToken25);
        org.osiam.client.AuthService.Builder builder65 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder67 = builder65.setClientSecret("Bearer ");
        org.osiam.client.AuthService.Builder builder69 = builder67.setClientRedirectUri("org.osiam.client.exception.ConnectionInitializationException: PATCH");
        org.osiam.client.AuthService.Builder builder71 = builder69.setClientSecret("");
        org.osiam.client.AuthService.Builder builder73 = builder69.setClientId("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.AuthService authService74 = builder69.build();
        org.osiam.client.oauth.AccessToken.Builder builder76 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date77 = null;
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setRefreshTokenExpiresAt(date77);
        org.osiam.client.oauth.AccessToken.Builder builder80 = builder76.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken81 = builder80.build();
        boolean boolean82 = accessToken81.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet83 = accessToken81.getScopes();
        boolean boolean84 = accessToken81.isClientOnly();
        java.lang.Object obj85 = null;
        boolean boolean86 = accessToken81.equals(obj85);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken81);
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken81);
        java.lang.String str89 = accessToken81.getClientId();
        java.lang.String str90 = authService74.extractErrorMessageForbidden(accessToken81);
        java.lang.String str91 = osiamGroupService16.extractErrorMessageForbidden(accessToken81);
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.client.user.BasicUser basicUser92 = osiamConnector11.getCurrentUserBasic(accessToken81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Schema specific part is opaque.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(osiamConnector11);
        org.junit.Assert.assertNotNull(osiamGroupService14);
        org.junit.Assert.assertNotNull(osiamGroupService15);
        org.junit.Assert.assertNotNull(osiamGroupService16);
        org.junit.Assert.assertNotNull(webTarget17);
        org.junit.Assert.assertNotNull(webTarget18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(accessToken25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(queryBuilder30);
        org.junit.Assert.assertNotNull(queryBuilder32);
        org.junit.Assert.assertNotNull(queryBuilder34);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str38, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "descending" + "'", str39, "descending");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "descending" + "'", str42, "descending");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Authorization" + "'", str43, "Authorization");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Bearer " + "'", str62, "Bearer ");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Insufficient scopes: []" + "'", str63, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(authService74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(accessToken81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(scopeSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Insufficient scopes: []" + "'", str90, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Insufficient scopes: []" + "'", str91, "Insufficient scopes: []");
    }

    @Test
    public void test12487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12487");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        javax.ws.rs.client.WebTarget webTarget4 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget5 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget6 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget7 = osiamGroupService3.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder9 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date10 = null;
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setRefreshTokenExpiresAt(date10);
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder9.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken14 = builder13.build();
        boolean boolean15 = accessToken14.isRefreshTokenExpired();
        java.lang.String str16 = accessToken14.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder17 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder19.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder19.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.descending("hi!");
        org.osiam.client.query.Query query26 = queryBuilder25.build();
        java.lang.String str27 = query26.toString();
        java.lang.String str28 = query26.getSortOrder();
        java.lang.String str29 = query26.getSortBy();
        java.lang.String str30 = query26.getFilter();
        java.lang.String str31 = query26.toString();
        boolean boolean32 = accessToken14.equals((java.lang.Object) query26);
        java.lang.String str33 = osiamGroupService3.extractErrorMessageForbidden(accessToken14);
        org.osiam.client.OsiamGroupService.Builder builder35 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService36 = builder35.build();
        org.osiam.client.OsiamGroupService osiamGroupService37 = builder35.build();
        javax.ws.rs.client.WebTarget webTarget38 = osiamGroupService37.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget39 = osiamGroupService37.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder41 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date42 = null;
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder41.setRefreshTokenExpiresAt(date42);
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder41.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken46 = builder45.build();
        boolean boolean47 = accessToken46.isRefreshTokenExpired();
        java.lang.String str48 = accessToken46.getUserName();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken46.getScopes();
        java.lang.String str50 = osiamGroupService37.extractErrorMessageForbidden(accessToken46);
        java.lang.String str51 = accessToken46.getClientId();
        java.lang.String str52 = accessToken46.getUserName();
        java.lang.String str53 = osiamGroupService3.extractErrorMessageForbidden(accessToken46);
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        java.lang.String str61 = accessToken60.toString();
        java.lang.String str62 = accessToken60.getType();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken60);
        java.util.Date date64 = accessToken60.getRefreshTokenExpiresAt();
        boolean boolean65 = accessToken60.isExpired();
        java.lang.String str66 = osiamGroupService3.extractErrorMessageForbidden(accessToken60);
        javax.ws.rs.client.WebTarget webTarget67 = osiamGroupService3.targetEndpoint;
        javax.ws.rs.core.Response.StatusType statusType69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = osiamGroupService3.extractErrorMessageDefault("org.osiam.client.exception.ForbiddenException: Query [attributes=, filter=null, sortBy=password, sortOrder=ascending, startIndex=1, count=100]", statusType69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(webTarget4);
        org.junit.Assert.assertNotNull(webTarget5);
        org.junit.Assert.assertNotNull(webTarget6);
        org.junit.Assert.assertNotNull(webTarget7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(accessToken14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(query26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str27, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "descending" + "'", str28, "descending");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str31, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Insufficient scopes: []" + "'", str33, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(osiamGroupService36);
        org.junit.Assert.assertNotNull(osiamGroupService37);
        org.junit.Assert.assertNotNull(webTarget38);
        org.junit.Assert.assertNotNull(webTarget39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(accessToken46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Insufficient scopes: []" + "'", str50, "Insufficient scopes: []");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Insufficient scopes: []" + "'", str53, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str61, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Insufficient scopes: []" + "'", str66, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget67);
    }

    @Test
    public void test12488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12488");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.resources.scim.Group group4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        java.util.Date date12 = accessToken11.getExpiresAt();
        java.lang.String str13 = accessToken11.getRefreshToken();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken11);
        org.osiam.client.oauth.AccessToken.Builder builder16 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date17 = null;
        org.osiam.client.oauth.AccessToken.Builder builder18 = builder16.setRefreshTokenExpiresAt(date17);
        org.osiam.client.oauth.AccessToken.Builder builder20 = builder16.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken21 = builder20.build();
        boolean boolean22 = accessToken21.isRefreshTokenExpired();
        boolean boolean23 = accessToken21.isClientOnly();
        java.lang.String str24 = accessToken21.getClientId();
        boolean boolean25 = accessToken21.isClientOnly();
        boolean boolean26 = accessToken11.equals((java.lang.Object) accessToken21);
        java.lang.String str27 = accessToken21.getUserId();
        boolean boolean28 = accessToken21.isExpired();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.Group group29 = osiamGroupService2.updateGroup("org.osiam.client.exception.OsiamClientException: org.osiam.client.exception.NoResultException: refresh_token", group4, accessToken21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: The given Group must not be null nor empty.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(accessToken21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test12489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12489");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date2 = null;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.setRefreshTokenExpiresAt(date2);
        org.osiam.client.oauth.AccessToken.Builder builder5 = builder1.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken6 = builder5.build();
        boolean boolean7 = accessToken6.isRefreshTokenExpired();
        boolean boolean8 = accessToken6.isClientOnly();
        java.lang.String str9 = accessToken6.getRefreshToken();
        boolean boolean10 = accessToken6.isExpired();
        boolean boolean11 = accessToken6.isExpired();
        java.lang.String str12 = accessToken6.toString();
        boolean boolean13 = accessToken6.isExpired();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(accessToken6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str12, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test12490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12490");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService2 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService3 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService4 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService5 = builder1.build();
        org.osiam.client.OsiamGroupService osiamGroupService6 = builder1.build();
        org.osiam.client.oauth.AccessToken.Builder builder8 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date9 = null;
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder8.setRefreshTokenExpiresAt(date9);
        org.osiam.client.oauth.AccessToken.Builder builder12 = builder8.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken13 = builder12.build();
        boolean boolean14 = accessToken13.isRefreshTokenExpired();
        boolean boolean15 = accessToken13.isClientOnly();
        java.lang.String str16 = accessToken13.getClientId();
        boolean boolean17 = accessToken13.isClientOnly();
        org.osiam.client.oauth.AccessToken.Builder builder19 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope20 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder21 = builder19.addScope(scope20);
        org.osiam.client.oauth.Scope scope22 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException24 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean25 = scope22.equals((java.lang.Object) invalidAttributeException24);
        java.lang.String str26 = scope22.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder27 = builder19.addScope(scope22);
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder31 = builder29.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder33 = builder31.setUserName("Authorization");
        boolean boolean34 = accessToken13.equals((java.lang.Object) builder31);
        java.lang.String str35 = osiamGroupService6.extractErrorMessageForbidden(accessToken13);
        javax.ws.rs.client.WebTarget webTarget36 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget37 = osiamGroupService6.targetEndpoint;
        javax.ws.rs.client.WebTarget webTarget38 = osiamGroupService6.targetEndpoint;
        org.osiam.client.oauth.AccessToken.Builder builder40 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date41 = null;
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshTokenExpiresAt(date41);
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isRefreshTokenExpired();
        java.lang.String str47 = accessToken45.getUserId();
        org.osiam.client.query.QueryBuilder queryBuilder48 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder50 = queryBuilder48.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder52 = queryBuilder50.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder54 = queryBuilder50.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder56 = queryBuilder54.descending("hi!");
        org.osiam.client.query.Query query57 = queryBuilder56.build();
        java.lang.String str58 = query57.toString();
        java.lang.String str59 = query57.getSortOrder();
        java.lang.String str60 = query57.getSortBy();
        java.lang.String str61 = query57.getFilter();
        java.lang.String str62 = query57.toString();
        boolean boolean63 = accessToken45.equals((java.lang.Object) query57);
        java.util.Date date64 = accessToken45.getExpiresAt();
        java.lang.String str65 = accessToken45.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.osiam.resources.scim.Group> groupList66 = osiamGroupService6.getAllGroups(accessToken45);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Cannot connect to server");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamGroupService2);
        org.junit.Assert.assertNotNull(osiamGroupService3);
        org.junit.Assert.assertNotNull(osiamGroupService4);
        org.junit.Assert.assertNotNull(osiamGroupService5);
        org.junit.Assert.assertNotNull(osiamGroupService6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(accessToken13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(scope22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Insufficient scopes: []" + "'", str35, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(webTarget36);
        org.junit.Assert.assertNotNull(webTarget37);
        org.junit.Assert.assertNotNull(webTarget38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(queryBuilder50);
        org.junit.Assert.assertNotNull(queryBuilder52);
        org.junit.Assert.assertNotNull(queryBuilder54);
        org.junit.Assert.assertNotNull(queryBuilder56);
        org.junit.Assert.assertNotNull(query57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str58, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "descending" + "'", str59, "descending");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str62, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test12491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12491");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean1 = scopeSerializer0.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer2 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer3 = scopeSerializer0.unwrappingSerializer(nameTransformer2);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass4 = scopeSetJsonSerializer3.handledType();
        boolean boolean5 = scopeSetJsonSerializer3.usesObjectId();
        boolean boolean6 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper7 = null;
        com.fasterxml.jackson.databind.JavaType javaType8 = null;
        scopeSetJsonSerializer3.acceptJsonFormatVisitor(jsonFormatVisitorWrapper7, javaType8);
        boolean boolean10 = scopeSetJsonSerializer3.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer11 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean12 = scopeSerializer11.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer13 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer14 = scopeSerializer11.unwrappingSerializer(nameTransformer13);
        boolean boolean15 = scopeSerializer11.usesObjectId();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer16 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer17 = scopeSerializer11.unwrappingSerializer(nameTransformer16);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer18 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer19 = scopeSerializer11.unwrappingSerializer(nameTransformer18);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider20 = null;
        org.osiam.client.helper.ScopeSerializer scopeSerializer21 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean22 = scopeSerializer21.usesObjectId();
        boolean boolean23 = scopeSerializer21.isUnwrappingSerializer();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer24 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer25 = scopeSerializer21.unwrappingSerializer(nameTransformer24);
        org.osiam.client.helper.ScopeSerializer scopeSerializer26 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder28 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date29 = null;
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setRefreshTokenExpiresAt(date29);
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException34 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean35 = scope32.equals((java.lang.Object) invalidAttributeException34);
        java.lang.String str36 = scope32.getValue();
        org.osiam.client.oauth.Scope scope37 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope38 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str39 = scope38.toString();
        org.osiam.client.oauth.Scope scope40 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope41 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str42 = scope41.getValue();
        java.lang.String str43 = scope41.getValue();
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException46 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean47 = scope44.equals((java.lang.Object) invalidAttributeException46);
        java.lang.String str48 = scope44.getValue();
        org.osiam.client.oauth.Scope scope49 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope50 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope51 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope52 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException54 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean55 = scope52.equals((java.lang.Object) invalidAttributeException54);
        org.osiam.client.oauth.Scope scope56 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope57 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope58 = org.osiam.client.oauth.Scope.GET;
        boolean boolean60 = scope58.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope61 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray62 = new org.osiam.client.oauth.Scope[] { scope31, scope32, scope37, scope38, scope40, scope41, scope44, scope49, scope50, scope51, scope52, scope56, scope57, scope58, scope61 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet63 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet63, scopeArray62);
        org.osiam.client.oauth.AccessToken.Builder builder65 = builder28.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet63);
        boolean boolean66 = scopeSerializer26.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet63);
        org.osiam.client.oauth.AccessToken.Builder builder68 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date69 = null;
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setRefreshTokenExpiresAt(date69);
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder68.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken73 = builder72.build();
        boolean boolean74 = accessToken73.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet75 = accessToken73.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider77 = null;
        scopeSerializer26.serialize(scopeSet75, jsonGenerator76, serializerProvider77);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider79 = null;
        org.osiam.client.oauth.AccessToken.Builder builder81 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date82 = null;
        org.osiam.client.oauth.AccessToken.Builder builder83 = builder81.setRefreshTokenExpiresAt(date82);
        org.osiam.client.oauth.AccessToken.Builder builder85 = builder81.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken86 = builder85.build();
        boolean boolean87 = accessToken86.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet88 = accessToken86.getScopes();
        boolean boolean89 = scopeSerializer26.isEmpty(serializerProvider79, scopeSet88);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider91 = null;
        scopeSerializer21.serialize(scopeSet88, jsonGenerator90, serializerProvider91);
        boolean boolean93 = scopeSerializer11.isEmpty(serializerProvider20, scopeSet88);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer94 = scopeSetJsonSerializer3.replaceDelegatee((com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>>) scopeSerializer11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer3);
        org.junit.Assert.assertNull(scopeSetClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer17);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GET" + "'", str36, "GET");
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNotNull(scope38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ME" + "'", str39, "ME");
        org.junit.Assert.assertNotNull(scope40);
        org.junit.Assert.assertNotNull(scope41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PATCH" + "'", str42, "PATCH");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PATCH" + "'", str43, "PATCH");
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "GET" + "'", str48, "GET");
        org.junit.Assert.assertNotNull(scope49);
        org.junit.Assert.assertNotNull(scope50);
        org.junit.Assert.assertNotNull(scope51);
        org.junit.Assert.assertNotNull(scope52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(scope56);
        org.junit.Assert.assertNotNull(scope57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(scope61);
        org.junit.Assert.assertNotNull(scopeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(accessToken73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(scopeSet75);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(accessToken86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(scopeSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test12492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12492");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.AccessToken.Builder builder6 = builder2.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken7 = builder6.build();
        boolean boolean8 = accessToken7.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet9 = accessToken7.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator10 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider11 = null;
        scopeSerializer0.serialize(scopeSet9, jsonGenerator10, serializerProvider11);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper13 = null;
        com.fasterxml.jackson.databind.JavaType javaType14 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper13, javaType14);
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet16 = null;
        boolean boolean17 = scopeSerializer0.isEmpty(scopeSet16);
        boolean boolean18 = scopeSerializer0.isUnwrappingSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder20 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope21 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder22 = builder20.addScope(scope21);
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException25 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean26 = scope23.equals((java.lang.Object) invalidAttributeException25);
        java.lang.String str27 = scope23.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder20.addScope(scope23);
        org.osiam.client.oauth.AccessToken.Builder builder30 = builder28.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder32 = builder30.setUserName("org.osiam.client.exception.ForbiddenException: hi!");
        org.osiam.client.oauth.Scope scope33 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder30.addScope(scope33);
        org.osiam.client.helper.ScopeSerializer scopeSerializer35 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean36 = scopeSerializer35.isUnwrappingSerializer();
        org.osiam.client.helper.ScopeSerializer scopeSerializer37 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder39 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date40 = null;
        org.osiam.client.oauth.AccessToken.Builder builder41 = builder39.setRefreshTokenExpiresAt(date40);
        org.osiam.client.oauth.AccessToken.Builder builder43 = builder39.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken44 = builder43.build();
        boolean boolean45 = accessToken44.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet46 = accessToken44.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider48 = null;
        scopeSerializer37.serialize(scopeSet46, jsonGenerator47, serializerProvider48);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer35.serialize(scopeSet46, jsonGenerator50, serializerProvider51);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder30.addScopes(scopeSet46);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider55 = null;
        scopeSerializer0.serialize(scopeSet46, jsonGenerator54, serializerProvider55);
        org.osiam.client.helper.ScopeSerializer scopeSerializer57 = new org.osiam.client.helper.ScopeSerializer();
        boolean boolean58 = scopeSerializer57.usesObjectId();
        boolean boolean59 = scopeSerializer57.usesObjectId();
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass60 = scopeSerializer57.handledType();
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer61 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer62 = scopeSerializer57.unwrappingSerializer(nameTransformer61);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass63 = scopeSetJsonSerializer62.handledType();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer64 = scopeSerializer0.replaceDelegatee(scopeSetJsonSerializer62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(accessToken7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(scopeSet9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GET" + "'", str27, "GET");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(accessToken44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(scopeSet46);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(scopeSetClass60);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer62);
        org.junit.Assert.assertNull(scopeSetClass63);
    }

    @Test
    public void test12493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12493");
        org.osiam.client.helper.ScopeSerializer scopeSerializer0 = new org.osiam.client.helper.ScopeSerializer();
        org.osiam.client.oauth.AccessToken.Builder builder2 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date3 = null;
        org.osiam.client.oauth.AccessToken.Builder builder4 = builder2.setRefreshTokenExpiresAt(date3);
        org.osiam.client.oauth.Scope scope5 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope6 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException8 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean9 = scope6.equals((java.lang.Object) invalidAttributeException8);
        java.lang.String str10 = scope6.getValue();
        org.osiam.client.oauth.Scope scope11 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope12 = org.osiam.client.oauth.Scope.ME;
        java.lang.String str13 = scope12.toString();
        org.osiam.client.oauth.Scope scope14 = org.osiam.client.oauth.Scope.PUT;
        org.osiam.client.oauth.Scope scope15 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str16 = scope15.getValue();
        java.lang.String str17 = scope15.getValue();
        org.osiam.client.oauth.Scope scope18 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException20 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean21 = scope18.equals((java.lang.Object) invalidAttributeException20);
        java.lang.String str22 = scope18.getValue();
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.oauth.Scope scope24 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope scope25 = org.osiam.client.oauth.Scope.ME;
        org.osiam.client.oauth.Scope scope26 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException28 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean29 = scope26.equals((java.lang.Object) invalidAttributeException28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.Scope scope31 = org.osiam.client.oauth.Scope.ADMIN;
        org.osiam.client.oauth.Scope scope32 = org.osiam.client.oauth.Scope.GET;
        boolean boolean34 = scope32.equals((java.lang.Object) '#');
        org.osiam.client.oauth.Scope scope35 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.Scope[] scopeArray36 = new org.osiam.client.oauth.Scope[] { scope5, scope6, scope11, scope12, scope14, scope15, scope18, scope23, scope24, scope25, scope26, scope30, scope31, scope32, scope35 };
        java.util.LinkedHashSet<org.osiam.client.oauth.Scope> scopeSet37 = new java.util.LinkedHashSet<org.osiam.client.oauth.Scope>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.osiam.client.oauth.Scope>) scopeSet37, scopeArray36);
        org.osiam.client.oauth.AccessToken.Builder builder39 = builder2.addScopes((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        boolean boolean40 = scopeSerializer0.isEmpty((java.util.Set<org.osiam.client.oauth.Scope>) scopeSet37);
        org.osiam.client.oauth.AccessToken.Builder builder42 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date43 = null;
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder42.setRefreshTokenExpiresAt(date43);
        org.osiam.client.oauth.AccessToken.Builder builder46 = builder42.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken47 = builder46.build();
        boolean boolean48 = accessToken47.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet49 = accessToken47.getScopes();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider51 = null;
        scopeSerializer0.serialize(scopeSet49, jsonGenerator50, serializerProvider51);
        com.fasterxml.jackson.databind.SerializerProvider serializerProvider53 = null;
        org.osiam.client.oauth.AccessToken.Builder builder55 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date56 = null;
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setRefreshTokenExpiresAt(date56);
        org.osiam.client.oauth.AccessToken.Builder builder59 = builder55.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken60 = builder59.build();
        boolean boolean61 = accessToken60.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet62 = accessToken60.getScopes();
        boolean boolean63 = scopeSerializer0.isEmpty(serializerProvider53, scopeSet62);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper64 = null;
        com.fasterxml.jackson.databind.JavaType javaType65 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper64, javaType65);
        com.fasterxml.jackson.databind.util.NameTransformer nameTransformer67 = null;
        com.fasterxml.jackson.databind.JsonSerializer<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetJsonSerializer68 = scopeSerializer0.unwrappingSerializer(nameTransformer67);
        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper jsonFormatVisitorWrapper69 = null;
        com.fasterxml.jackson.databind.JavaType javaType70 = null;
        scopeSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper69, javaType70);
        java.lang.Class<java.util.Set<org.osiam.client.oauth.Scope>> scopeSetClass72 = scopeSerializer0.handledType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNotNull(scope6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GET" + "'", str10, "GET");
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ME" + "'", str13, "ME");
        org.junit.Assert.assertNotNull(scope14);
        org.junit.Assert.assertNotNull(scope15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PATCH" + "'", str16, "PATCH");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PATCH" + "'", str17, "PATCH");
        org.junit.Assert.assertNotNull(scope18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GET" + "'", str22, "GET");
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(scope24);
        org.junit.Assert.assertNotNull(scope25);
        org.junit.Assert.assertNotNull(scope26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNotNull(scope32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNotNull(scopeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(accessToken47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(scopeSet49);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(accessToken60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(scopeSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(scopeSetJsonSerializer68);
        org.junit.Assert.assertNull(scopeSetClass72);
    }

    @Test
    public void test12494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12494");
        org.osiam.client.OsiamUserService.Builder builder1 = new org.osiam.client.OsiamUserService.Builder("org.osiam.client.exception.UnauthorizedException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.OsiamUserService osiamUserService2 = builder1.build();
        org.osiam.resources.scim.UpdateUser updateUser4 = null;
        org.osiam.client.oauth.AccessToken.Builder builder6 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date7 = null;
        org.osiam.client.oauth.AccessToken.Builder builder8 = builder6.setRefreshTokenExpiresAt(date7);
        org.osiam.client.oauth.AccessToken.Builder builder10 = builder6.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken11 = builder10.build();
        boolean boolean12 = accessToken11.isRefreshTokenExpired();
        boolean boolean13 = accessToken11.isClientOnly();
        java.lang.String str14 = accessToken11.getRefreshToken();
        boolean boolean15 = accessToken11.isExpired();
        java.lang.String str16 = accessToken11.getType();
        java.lang.String str17 = accessToken11.getUserName();
        // The following exception was thrown during execution in test generation
        try {
            org.osiam.resources.scim.User user18 = osiamUserService2.updateUser("", updateUser4, accessToken11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The given updateUser can't be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(osiamUserService2);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(accessToken11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test12495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12495");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        java.lang.String str11 = query9.getSortOrder();
        java.lang.String str12 = query9.getSortBy();
        org.osiam.client.query.Query query13 = query9.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder14 = new org.osiam.client.query.QueryBuilder(query13);
        java.lang.String str15 = query13.toString();
        java.lang.String str16 = query13.toString();
        org.osiam.client.query.Query query17 = query13.nextPage();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "descending" + "'", str11, "descending");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(query13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str15, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]" + "'", str16, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=11, count=10]");
        org.junit.Assert.assertNotNull(query17);
    }

    @Test
    public void test12496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12496");
        org.osiam.client.OsiamConnector.Builder builder0 = new org.osiam.client.OsiamConnector.Builder();
        org.osiam.client.OsiamConnector.Builder builder2 = builder0.setEndpoint("2024-03-22T13:51:20.388");
        org.osiam.client.OsiamConnector.Builder builder4 = builder2.setClientSecret("PUT");
        org.osiam.client.OsiamConnector.Builder builder6 = builder4.setEndpoint("hi!");
        org.osiam.client.OsiamConnector osiamConnector7 = builder6.build();
        org.osiam.client.query.QueryBuilder queryBuilder8 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder10 = queryBuilder8.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder12 = queryBuilder10.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder14 = queryBuilder10.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder16 = queryBuilder14.descending("hi!");
        org.osiam.client.query.Query query17 = queryBuilder16.build();
        java.lang.String str18 = query17.toString();
        java.lang.String str19 = query17.toString();
        java.lang.String str20 = query17.getFilter();
        org.osiam.client.query.QueryBuilder queryBuilder21 = osiamConnector7.createQueryBuilder(query17);
        org.osiam.client.query.QueryBuilder queryBuilder22 = osiamConnector7.createQueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder23 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder25.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder29 = queryBuilder25.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder31 = queryBuilder29.descending("hi!");
        org.osiam.client.query.Query query32 = queryBuilder31.build();
        java.lang.String str33 = query32.toString();
        java.lang.String str34 = query32.toString();
        org.osiam.client.query.Query query35 = query32.nextPage();
        org.osiam.client.query.QueryBuilder queryBuilder36 = osiamConnector7.createQueryBuilder(query32);
        org.osiam.client.query.Query query37 = query32.nextPage();
        long long38 = query32.getStartIndex();
        int int39 = query32.getCount();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(osiamConnector7);
        org.junit.Assert.assertNotNull(queryBuilder10);
        org.junit.Assert.assertNotNull(queryBuilder12);
        org.junit.Assert.assertNotNull(queryBuilder14);
        org.junit.Assert.assertNotNull(queryBuilder16);
        org.junit.Assert.assertNotNull(query17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str18, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str19, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder22);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(queryBuilder29);
        org.junit.Assert.assertNotNull(queryBuilder31);
        org.junit.Assert.assertNotNull(query32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str33, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str34, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(query35);
        org.junit.Assert.assertNotNull(queryBuilder36);
        org.junit.Assert.assertNotNull(query37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
    }

    @Test
    public void test12497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12497");
        org.osiam.client.oauth.AccessToken.Builder builder1 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope2 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder3 = builder1.addScope(scope2);
        org.osiam.client.oauth.Scope scope4 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException6 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean7 = scope4.equals((java.lang.Object) invalidAttributeException6);
        java.lang.String str8 = scope4.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder9 = builder1.addScope(scope4);
        org.osiam.client.oauth.AccessToken.Builder builder11 = builder9.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder13.setUserName("Authorization");
        org.osiam.client.oauth.Scope scope16 = org.osiam.client.oauth.Scope.PATCH;
        org.osiam.client.oauth.AccessToken.Builder builder17 = builder13.addScope(scope16);
        org.osiam.client.oauth.GrantType grantType18 = org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS;
        java.lang.String str19 = grantType18.getUrlParam();
        boolean boolean20 = scope16.equals((java.lang.Object) grantType18);
        org.osiam.client.oauth.AccessToken.Builder builder22 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope23 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder24 = builder22.addScope(scope23);
        boolean boolean25 = scope16.equals((java.lang.Object) builder22);
        org.osiam.client.oauth.AccessToken.Builder builder27 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope28 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder29 = builder27.addScope(scope28);
        org.osiam.client.oauth.Scope scope30 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException32 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean33 = scope30.equals((java.lang.Object) invalidAttributeException32);
        java.lang.String str34 = scope30.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder35 = builder27.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder22.addScope(scope30);
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setType("");
        org.osiam.client.oauth.Scope scope39 = org.osiam.client.oauth.Scope.PATCH;
        java.lang.String str40 = scope39.getValue();
        java.lang.String str41 = scope39.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder43 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope44 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder45 = builder43.addScope(scope44);
        org.osiam.client.oauth.Scope scope46 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException48 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean49 = scope46.equals((java.lang.Object) invalidAttributeException48);
        java.lang.String str50 = scope46.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder51 = builder43.addScope(scope46);
        org.osiam.client.oauth.AccessToken.Builder builder53 = builder51.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder55 = builder53.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder57 = builder55.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder59 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope60 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder61 = builder59.addScope(scope60);
        org.osiam.client.oauth.Scope scope62 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException64 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean65 = scope62.equals((java.lang.Object) invalidAttributeException64);
        java.lang.String str66 = scope62.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder67 = builder59.addScope(scope62);
        org.osiam.client.oauth.AccessToken.Builder builder68 = builder55.addScope(scope62);
        org.osiam.client.oauth.AccessToken.Builder builder70 = builder68.setType("client_credentials");
        org.osiam.client.oauth.AccessToken.Builder builder72 = builder70.setUserId("org.osiam.client.exception.ConnectionInitializationException: org.osiam.client.exception.OsiamClientException: ME");
        org.osiam.client.oauth.AccessToken.Builder builder74 = builder70.setClientId("descending");
        boolean boolean75 = scope39.equals((java.lang.Object) "descending");
        org.osiam.client.oauth.AccessToken.Builder builder76 = builder36.addScope(scope39);
        org.osiam.client.oauth.AccessToken.Builder builder78 = builder76.setClientId("org.osiam.client.exception.OsiamRequestException: org.osiam.client.exception.OsiamClientException: descending");
        org.junit.Assert.assertNotNull(scope2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(scope4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GET" + "'", str8, "GET");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(scope16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + grantType18 + "' != '" + org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS + "'", grantType18.equals(org.osiam.client.oauth.GrantType.CLIENT_CREDENTIALS));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "client_credentials" + "'", str19, "client_credentials");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(scope23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(scope28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(scope30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GET" + "'", str34, "GET");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(scope39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PATCH" + "'", str40, "PATCH");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PATCH" + "'", str41, "PATCH");
        org.junit.Assert.assertNotNull(scope44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GET" + "'", str50, "GET");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(scope60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(scope62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "GET" + "'", str66, "GET");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test12498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12498");
        org.osiam.client.OsiamGroupService.Builder builder1 = new org.osiam.client.OsiamGroupService.Builder("org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.UnauthorizedException: org.osiam.client.exception.InvalidAttributeException: org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
    }

    @Test
    public void test12499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12499");
        org.osiam.client.query.QueryBuilder queryBuilder0 = new org.osiam.client.query.QueryBuilder();
        org.osiam.client.query.QueryBuilder queryBuilder2 = queryBuilder0.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder4 = queryBuilder2.attributes("Authorization");
        org.osiam.client.query.QueryBuilder queryBuilder6 = queryBuilder2.count(10);
        org.osiam.client.query.QueryBuilder queryBuilder8 = queryBuilder6.descending("hi!");
        org.osiam.client.query.Query query9 = queryBuilder8.build();
        java.lang.String str10 = query9.toString();
        org.osiam.client.query.QueryBuilder queryBuilder11 = new org.osiam.client.query.QueryBuilder(query9);
        org.osiam.client.query.QueryBuilder queryBuilder13 = queryBuilder11.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10], userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder15 = queryBuilder13.startIndex((long) (short) 1);
        org.osiam.client.query.QueryBuilder queryBuilder17 = queryBuilder15.count(0);
        org.osiam.client.query.QueryBuilder queryBuilder19 = queryBuilder17.attributes("org.osiam.client.exception.InvalidAttributeException: Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.osiam.client.query.QueryBuilder queryBuilder21 = queryBuilder17.attributes("hi!");
        org.osiam.client.query.QueryBuilder queryBuilder23 = queryBuilder17.ascending("org.osiam.client.exception.OsiamRequestException: hi!");
        org.osiam.client.query.QueryBuilder queryBuilder25 = queryBuilder23.ascending("AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[GET, GET POST PUT PATCH DELETE, PUT], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=Bearer , userId=, userName=]");
        org.osiam.client.query.QueryBuilder queryBuilder27 = queryBuilder23.attributes("org.osiam.client.exception.OsiamRequestException: ");
        java.lang.Class<?> wildcardClass28 = queryBuilder27.getClass();
        org.junit.Assert.assertNotNull(queryBuilder2);
        org.junit.Assert.assertNotNull(queryBuilder4);
        org.junit.Assert.assertNotNull(queryBuilder6);
        org.junit.Assert.assertNotNull(queryBuilder8);
        org.junit.Assert.assertNotNull(query9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]" + "'", str10, "Query [attributes=Authorization, filter=null, sortBy=hi!, sortOrder=descending, startIndex=1, count=10]");
        org.junit.Assert.assertNotNull(queryBuilder13);
        org.junit.Assert.assertNotNull(queryBuilder15);
        org.junit.Assert.assertNotNull(queryBuilder17);
        org.junit.Assert.assertNotNull(queryBuilder19);
        org.junit.Assert.assertNotNull(queryBuilder21);
        org.junit.Assert.assertNotNull(queryBuilder23);
        org.junit.Assert.assertNotNull(queryBuilder25);
        org.junit.Assert.assertNotNull(queryBuilder27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test12500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12500");
        org.osiam.client.AuthService.Builder builder1 = new org.osiam.client.AuthService.Builder("");
        org.osiam.client.AuthService.Builder builder3 = builder1.setClientId("ME");
        org.osiam.client.AuthService.Builder builder5 = builder1.setClientSecret("PUT");
        org.osiam.client.AuthService authService6 = builder5.build();
        org.osiam.client.OsiamGroupService.Builder builder8 = new org.osiam.client.OsiamGroupService.Builder("GET");
        org.osiam.client.OsiamGroupService osiamGroupService9 = builder8.build();
        org.osiam.client.oauth.AccessToken.Builder builder11 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        java.util.Date date12 = null;
        org.osiam.client.oauth.AccessToken.Builder builder13 = builder11.setRefreshTokenExpiresAt(date12);
        org.osiam.client.oauth.AccessToken.Builder builder15 = builder11.setUserId("");
        org.osiam.client.oauth.AccessToken accessToken16 = builder15.build();
        boolean boolean17 = accessToken16.isRefreshTokenExpired();
        java.util.Set<org.osiam.client.oauth.Scope> scopeSet18 = accessToken16.getScopes();
        java.lang.String str19 = osiamGroupService9.extractErrorMessageForbidden(accessToken16);
        boolean boolean20 = accessToken16.isClientOnly();
        org.osiam.client.AbstractOsiamService.checkAccessTokenIsNotNull(accessToken16);
        java.lang.String str22 = accessToken16.toString();
        java.lang.String str23 = authService6.extractErrorMessageForbidden(accessToken16);
        org.osiam.client.oauth.AccessToken.Builder builder26 = new org.osiam.client.oauth.AccessToken.Builder("Bearer ");
        org.osiam.client.oauth.Scope scope27 = org.osiam.client.oauth.Scope.ALL;
        org.osiam.client.oauth.AccessToken.Builder builder28 = builder26.addScope(scope27);
        org.osiam.client.oauth.Scope scope29 = org.osiam.client.oauth.Scope.GET;
        org.osiam.client.exception.InvalidAttributeException invalidAttributeException31 = new org.osiam.client.exception.InvalidAttributeException("");
        boolean boolean32 = scope29.equals((java.lang.Object) invalidAttributeException31);
        java.lang.String str33 = scope29.getValue();
        org.osiam.client.oauth.AccessToken.Builder builder34 = builder26.addScope(scope29);
        org.osiam.client.oauth.AccessToken.Builder builder36 = builder34.setClientId("Bearer ");
        org.osiam.client.oauth.AccessToken.Builder builder38 = builder36.setUserId("");
        org.osiam.client.oauth.AccessToken.Builder builder40 = builder38.setUserName("Authorization");
        org.osiam.client.oauth.AccessToken.Builder builder42 = builder40.setRefreshToken("GET");
        org.osiam.client.oauth.AccessToken.Builder builder44 = builder40.setUserId("Cannot connect to server");
        org.osiam.client.oauth.AccessToken accessToken45 = builder44.build();
        boolean boolean46 = accessToken45.isExpired();
        java.util.Date date47 = accessToken45.getRefreshTokenExpiresAt();
        // The following exception was thrown during execution in test generation
        try {
            authService6.revokeAllAccessTokens("org.osiam.client.exception.OsiamClientException: client_credentials", accessToken45);
            org.junit.Assert.fail("Expected exception of type org.osiam.client.exception.ConnectionInitializationException; message: Unable to retrieve access token.");
        } catch (org.osiam.client.exception.ConnectionInitializationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(authService6);
        org.junit.Assert.assertNotNull(osiamGroupService9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(accessToken16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(scopeSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Insufficient scopes: []" + "'", str19, "Insufficient scopes: []");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]" + "'", str22, "AccessToken [token=Bearer , expiresAt=Sun Dec 02 16:47:04 GMT 292269055, scopes=[], refreshTokenId=, refreshTokenExpiresAt=Sun Dec 02 16:47:04 GMT 292269055, clientId=, userId=, userName=]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Insufficient scopes: []" + "'", str23, "Insufficient scopes: []");
        org.junit.Assert.assertNotNull(scope27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(scope29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GET" + "'", str33, "GET");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(accessToken45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Sun Dec 02 16:47:04 GMT 292269055");
    }
}

